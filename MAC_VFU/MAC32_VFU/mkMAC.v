//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Wed Apr 12 21:29:13 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_values                 O     1 const
// mac_result                     O    64 reg
// RDY_mac_result                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_values_multiplicand1       I    32
// get_values_multiplicand2       I    32
// get_values_addend              I    32
// get_values_mode                I     2
// EN_get_values                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC(CLK,
	     RST_N,

	     get_values_multiplicand1,
	     get_values_multiplicand2,
	     get_values_addend,
	     get_values_mode,
	     EN_get_values,
	     RDY_get_values,

	     mac_result,
	     RDY_mac_result);
  input  CLK;
  input  RST_N;

  // action method get_values
  input  [31 : 0] get_values_multiplicand1;
  input  [31 : 0] get_values_multiplicand2;
  input  [31 : 0] get_values_addend;
  input  [1 : 0] get_values_mode;
  input  EN_get_values;
  output RDY_get_values;

  // value method mac_result
  output [63 : 0] mac_result;
  output RDY_mac_result;

  // signals for module outputs
  wire [63 : 0] mac_result;
  wire RDY_get_values, RDY_mac_result;

  // register a
  reg [31 : 0] a;
  wire [31 : 0] a$D_IN;
  wire a$EN;

  // register counter
  reg [3 : 0] counter;
  wire [3 : 0] counter$D_IN;
  wire counter$EN;

  // register flag_0
  reg flag_0;
  wire flag_0$D_IN, flag_0$EN;

  // register flag_1
  reg flag_1;
  wire flag_1$D_IN, flag_1$EN;

  // register flag_2
  reg flag_2;
  wire flag_2$D_IN, flag_2$EN;

  // register inp_ready
  reg inp_ready;
  wire inp_ready$D_IN, inp_ready$EN;

  // register m1
  reg [31 : 0] m1;
  wire [31 : 0] m1$D_IN;
  wire m1$EN;

  // register m2
  reg [31 : 0] m2;
  wire [31 : 0] m2$D_IN;
  wire m2$EN;

  // register mac_output
  reg [63 : 0] mac_output;
  reg [63 : 0] mac_output$D_IN;
  wire mac_output$EN;

  // register mac_ready
  reg mac_ready;
  wire mac_ready$D_IN, mac_ready$EN;

  // register partial_product_0
  reg [31 : 0] partial_product_0;
  wire [31 : 0] partial_product_0$D_IN;
  wire partial_product_0$EN;

  // register partial_product_1
  reg [31 : 0] partial_product_1;
  wire [31 : 0] partial_product_1$D_IN;
  wire partial_product_1$EN;

  // register partial_product_2
  reg [31 : 0] partial_product_2;
  wire [31 : 0] partial_product_2$D_IN;
  wire partial_product_2$EN;

  // register partial_product_3
  reg [31 : 0] partial_product_3;
  wire [31 : 0] partial_product_3$D_IN;
  wire partial_product_3$EN;

  // register reg_mode
  reg [1 : 0] reg_mode;
  wire [1 : 0] reg_mode$D_IN;
  wire reg_mode$EN;

  // register x_0
  reg [15 : 0] x_0;
  wire [15 : 0] x_0$D_IN;
  wire x_0$EN;

  // register x_1
  reg [15 : 0] x_1;
  reg [15 : 0] x_1$D_IN;
  wire x_1$EN;

  // register x_2
  reg [15 : 0] x_2;
  reg [15 : 0] x_2$D_IN;
  wire x_2$EN;

  // register x_3
  reg [15 : 0] x_3;
  wire [15 : 0] x_3$D_IN;
  wire x_3$EN;

  // register y_0
  reg [15 : 0] y_0;
  wire [15 : 0] y_0$D_IN;
  wire y_0$EN;

  // register y_1
  reg [15 : 0] y_1;
  wire [15 : 0] y_1$D_IN;
  wire y_1$EN;

  // register y_2
  reg [15 : 0] y_2;
  wire [15 : 0] y_2$D_IN;
  wire y_2$EN;

  // register y_3
  reg [15 : 0] y_3;
  wire [15 : 0] y_3$D_IN;
  wire y_3$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_compute_MAC,
       CAN_FIRE_get_values,
       WILL_FIRE_RL_compute_MAC,
       WILL_FIRE_get_values;

  // remaining internal signals
  wire [63 : 0] _0_CONCAT_x_0_8_9_MUL_0_CONCAT_y_0_0_1___d42,
		_0_CONCAT_x_1_4_5_MUL_0_CONCAT_y_1_6_7___d48,
		_0_CONCAT_x_2_0_1_MUL_0_CONCAT_y_2_2_3___d54,
		_0_CONCAT_x_3_6_7_MUL_0_CONCAT_y_3_8_9___d60,
		x082_PLUS_y083__q1,
		x__h4524,
		x__h4803,
		x__h4926,
		x__h5066,
		x__h5068,
		x__h5070,
		x__h5082,
		y__h4961,
		y__h5069,
		y__h5071,
		y__h5083;
  wire [31 : 0] x__h4148,
		x__h4235,
		x__h4300,
		x__h4365,
		y__h4149,
		y__h4236,
		y__h4301,
		y__h4366,
		y__h4838,
		y__h4875;
  wire [15 : 0] x__h1742,
		x__h1812,
		x__h1876,
		x__h1940,
		x__h2128,
		x__h2193,
		x__h2257,
		x__h2321,
		y__h4559,
		y__h4620,
		y__h4674,
		y__h4728;
  wire NOT_get_values_multiplicand1_EQ_m1_06_07_OR_NO_ETC___d113;

  // action method get_values
  assign RDY_get_values = 1'd1 ;
  assign CAN_FIRE_get_values = 1'd1 ;
  assign WILL_FIRE_get_values = EN_get_values ;

  // value method mac_result
  assign mac_result = mac_output ;
  assign RDY_mac_result = mac_ready ;

  // rule RL_compute_MAC
  assign CAN_FIRE_RL_compute_MAC = 1'd1 ;
  assign WILL_FIRE_RL_compute_MAC = 1'd1 ;

  // register a
  assign a$D_IN = get_values_addend ;
  assign a$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_06_07_OR_NO_ETC___d113 ||
	      get_values_mode != reg_mode) ;

  // register counter
  assign counter$D_IN = 4'h0 ;
  assign counter$EN = 1'b0 ;

  // register flag_0
  assign flag_0$D_IN = inp_ready ;
  assign flag_0$EN = 1'd1 ;

  // register flag_1
  assign flag_1$D_IN = flag_0 ;
  assign flag_1$EN = 1'd1 ;

  // register flag_2
  assign flag_2$D_IN = flag_1 ;
  assign flag_2$EN = 1'd1 ;

  // register inp_ready
  assign inp_ready$D_IN =
	     NOT_get_values_multiplicand1_EQ_m1_06_07_OR_NO_ETC___d113 ||
	     get_values_mode != reg_mode ;
  assign inp_ready$EN = EN_get_values ;

  // register m1
  assign m1$D_IN = get_values_multiplicand1 ;
  assign m1$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_06_07_OR_NO_ETC___d113 ||
	      get_values_mode != reg_mode) ;

  // register m2
  assign m2$D_IN = get_values_multiplicand2 ;
  assign m2$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_06_07_OR_NO_ETC___d113 ||
	      get_values_mode != reg_mode) ;

  // register mac_output
  always@(reg_mode or x__h4926 or x__h4524 or x__h4803)
  begin
    case (reg_mode)
      2'd0: mac_output$D_IN = x__h4524;
      2'd1: mac_output$D_IN = x__h4803;
      default: mac_output$D_IN = x__h4926;
    endcase
  end
  assign mac_output$EN = flag_1 ;

  // register mac_ready
  assign mac_ready$D_IN = 1'd1 ;
  assign mac_ready$EN = flag_1 ;

  // register partial_product_0
  assign partial_product_0$D_IN =
	     _0_CONCAT_x_0_8_9_MUL_0_CONCAT_y_0_0_1___d42[31:0] ;
  assign partial_product_0$EN = flag_0 ;

  // register partial_product_1
  assign partial_product_1$D_IN =
	     _0_CONCAT_x_1_4_5_MUL_0_CONCAT_y_1_6_7___d48[31:0] ;
  assign partial_product_1$EN = flag_0 ;

  // register partial_product_2
  assign partial_product_2$D_IN =
	     _0_CONCAT_x_2_0_1_MUL_0_CONCAT_y_2_2_3___d54[31:0] ;
  assign partial_product_2$EN = flag_0 ;

  // register partial_product_3
  assign partial_product_3$D_IN =
	     _0_CONCAT_x_3_6_7_MUL_0_CONCAT_y_3_8_9___d60[31:0] ;
  assign partial_product_3$EN = flag_0 ;

  // register reg_mode
  assign reg_mode$D_IN = get_values_mode ;
  assign reg_mode$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_06_07_OR_NO_ETC___d113 ||
	      get_values_mode != reg_mode) ;

  // register x_0
  assign x_0$D_IN = (reg_mode == 2'd0) ? x__h1742 : m1[15:0] ;
  assign x_0$EN = inp_ready ;

  // register x_1
  always@(reg_mode or m1 or x__h1812)
  begin
    case (reg_mode)
      2'd0: x_1$D_IN = x__h1812;
      2'd1: x_1$D_IN = m1[31:16];
      default: x_1$D_IN = m1[15:0];
    endcase
  end
  assign x_1$EN = inp_ready ;

  // register x_2
  always@(reg_mode or m1 or x__h1876)
  begin
    case (reg_mode)
      2'd0: x_2$D_IN = x__h1876;
      2'd1: x_2$D_IN = m1[15:0];
      default: x_2$D_IN = m1[31:16];
    endcase
  end
  assign x_2$EN = inp_ready ;

  // register x_3
  assign x_3$D_IN = (reg_mode == 2'd0) ? x__h1940 : m1[31:16] ;
  assign x_3$EN = inp_ready ;

  // register y_0
  assign y_0$D_IN = (reg_mode == 2'd0) ? x__h2128 : m2[15:0] ;
  assign y_0$EN = inp_ready ;

  // register y_1
  assign y_1$D_IN = (reg_mode == 2'd0) ? x__h2193 : m2[31:16] ;
  assign y_1$EN = inp_ready ;

  // register y_2
  assign y_2$D_IN = (reg_mode == 2'd0) ? x__h2257 : m2[15:0] ;
  assign y_2$EN = inp_ready ;

  // register y_3
  assign y_3$D_IN = (reg_mode == 2'd0) ? x__h2321 : m2[31:16] ;
  assign y_3$EN = inp_ready ;

  // remaining internal signals
  assign NOT_get_values_multiplicand1_EQ_m1_06_07_OR_NO_ETC___d113 =
	     get_values_multiplicand1 != m1 ||
	     get_values_multiplicand2 != m2 ||
	     get_values_addend != a ;
  assign _0_CONCAT_x_0_8_9_MUL_0_CONCAT_y_0_0_1___d42 = x__h4148 * y__h4149 ;
  assign _0_CONCAT_x_1_4_5_MUL_0_CONCAT_y_1_6_7___d48 = x__h4235 * y__h4236 ;
  assign _0_CONCAT_x_2_0_1_MUL_0_CONCAT_y_2_2_3___d54 = x__h4300 * y__h4301 ;
  assign _0_CONCAT_x_3_6_7_MUL_0_CONCAT_y_3_8_9___d60 = x__h4365 * y__h4366 ;
  assign x082_PLUS_y083__q1 = x__h5082 + y__h5083 ;
  assign x__h1742 = { 8'd0, m1[7:0] } ;
  assign x__h1812 = { 8'd0, m1[15:8] } ;
  assign x__h1876 = { 8'd0, m1[23:16] } ;
  assign x__h1940 = { 8'd0, m1[31:24] } ;
  assign x__h2128 = { 8'd0, m2[7:0] } ;
  assign x__h2193 = { 8'd0, m2[15:8] } ;
  assign x__h2257 = { 8'd0, m2[23:16] } ;
  assign x__h2321 = { 8'd0, m2[31:24] } ;
  assign x__h4148 = { 16'd0, x_0 } ;
  assign x__h4235 = { 16'd0, x_1 } ;
  assign x__h4300 = { 16'd0, x_2 } ;
  assign x__h4365 = { 16'd0, x_3 } ;
  assign x__h4524 =
	     { partial_product_3[15:0] + y__h4559,
	       partial_product_2[15:0] + y__h4620,
	       partial_product_1[15:0] + y__h4674,
	       partial_product_0[15:0] + y__h4728 } ;
  assign x__h4803 =
	     { partial_product_1 + y__h4838, partial_product_0 + y__h4875 } ;
  assign x__h4926 = x__h5066 + y__h4961 ;
  assign x__h5066 = x__h5068 + y__h5069 ;
  assign x__h5068 = x__h5070 + y__h5071 ;
  assign x__h5070 = { 32'd0, partial_product_0 } ;
  assign x__h5082 = { 32'd0, partial_product_1 } ;
  assign y__h4149 = { 16'd0, y_0 } ;
  assign y__h4236 = { 16'd0, y_1 } ;
  assign y__h4301 = { 16'd0, y_2 } ;
  assign y__h4366 = { 16'd0, y_3 } ;
  assign y__h4559 = { 8'd0, a[31:24] } ;
  assign y__h4620 = { 8'd0, a[23:16] } ;
  assign y__h4674 = { 8'd0, a[15:8] } ;
  assign y__h4728 = { 8'd0, a[7:0] } ;
  assign y__h4838 = { 16'd0, a[31:16] } ;
  assign y__h4875 = { 16'd0, a[15:0] } ;
  assign y__h4961 = { 32'd0, a } ;
  assign y__h5069 = { partial_product_3, 32'd0 } ;
  assign y__h5071 = { x082_PLUS_y083__q1[47:0], 16'd0 } ;
  assign y__h5083 = { 32'd0, partial_product_2 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter <= `BSV_ASSIGNMENT_DELAY 4'd0;
	flag_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inp_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_output <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mac_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	partial_product_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_mode <= `BSV_ASSIGNMENT_DELAY 2'd0;
	x_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (a$EN) a <= `BSV_ASSIGNMENT_DELAY a$D_IN;
	if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
	if (flag_0$EN) flag_0 <= `BSV_ASSIGNMENT_DELAY flag_0$D_IN;
	if (flag_1$EN) flag_1 <= `BSV_ASSIGNMENT_DELAY flag_1$D_IN;
	if (flag_2$EN) flag_2 <= `BSV_ASSIGNMENT_DELAY flag_2$D_IN;
	if (inp_ready$EN) inp_ready <= `BSV_ASSIGNMENT_DELAY inp_ready$D_IN;
	if (m1$EN) m1 <= `BSV_ASSIGNMENT_DELAY m1$D_IN;
	if (m2$EN) m2 <= `BSV_ASSIGNMENT_DELAY m2$D_IN;
	if (mac_output$EN)
	  mac_output <= `BSV_ASSIGNMENT_DELAY mac_output$D_IN;
	if (mac_ready$EN) mac_ready <= `BSV_ASSIGNMENT_DELAY mac_ready$D_IN;
	if (partial_product_0$EN)
	  partial_product_0 <= `BSV_ASSIGNMENT_DELAY partial_product_0$D_IN;
	if (partial_product_1$EN)
	  partial_product_1 <= `BSV_ASSIGNMENT_DELAY partial_product_1$D_IN;
	if (partial_product_2$EN)
	  partial_product_2 <= `BSV_ASSIGNMENT_DELAY partial_product_2$D_IN;
	if (partial_product_3$EN)
	  partial_product_3 <= `BSV_ASSIGNMENT_DELAY partial_product_3$D_IN;
	if (reg_mode$EN) reg_mode <= `BSV_ASSIGNMENT_DELAY reg_mode$D_IN;
	if (x_0$EN) x_0 <= `BSV_ASSIGNMENT_DELAY x_0$D_IN;
	if (x_1$EN) x_1 <= `BSV_ASSIGNMENT_DELAY x_1$D_IN;
	if (x_2$EN) x_2 <= `BSV_ASSIGNMENT_DELAY x_2$D_IN;
	if (x_3$EN) x_3 <= `BSV_ASSIGNMENT_DELAY x_3$D_IN;
	if (y_0$EN) y_0 <= `BSV_ASSIGNMENT_DELAY y_0$D_IN;
	if (y_1$EN) y_1 <= `BSV_ASSIGNMENT_DELAY y_1$D_IN;
	if (y_2$EN) y_2 <= `BSV_ASSIGNMENT_DELAY y_2$D_IN;
	if (y_3$EN) y_3 <= `BSV_ASSIGNMENT_DELAY y_3$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 32'hAAAAAAAA;
    counter = 4'hA;
    flag_0 = 1'h0;
    flag_1 = 1'h0;
    flag_2 = 1'h0;
    inp_ready = 1'h0;
    m1 = 32'hAAAAAAAA;
    m2 = 32'hAAAAAAAA;
    mac_output = 64'hAAAAAAAAAAAAAAAA;
    mac_ready = 1'h0;
    partial_product_0 = 32'hAAAAAAAA;
    partial_product_1 = 32'hAAAAAAAA;
    partial_product_2 = 32'hAAAAAAAA;
    partial_product_3 = 32'hAAAAAAAA;
    reg_mode = 2'h2;
    x_0 = 16'hAAAA;
    x_1 = 16'hAAAA;
    x_2 = 16'hAAAA;
    x_3 = 16'hAAAA;
    y_0 = 16'hAAAA;
    y_1 = 16'hAAAA;
    y_2 = 16'hAAAA;
    y_3 = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC

