
// This module describes Complex Multiplier Inference-Balanced Pipeline(Versal architecture)
// 18x18 Complex multiplier can be packed into two DSP blocks(one DSPCPLX)
// ar, br and pr are real part and ai,bi and pi are imaginary part 
parameter AWIDTH = 18;
parameter BWIDTH = 18;
(*keep = "true"*)
<wire_or_reg> signed [AWIDTH-1:0] <ar>; //Real part of 1st complex input
(*keep = "true"*)
<wire_or_reg> signed [AWIDTH-1:0] <ai>; //Imaginary part of 1st complex input
(*keep = "true"*)
<wire_or_reg> signed [BWIDTH-1:0] <br>; //Real part of 2nd complex input
(*keep = "true"*)
<wire_or_reg> signed [BWIDTH-1:0] <bi>; //Imaginary part of 2nd complex input
<wire_or_reg> <clk>;
reg signed [AWIDTH+BWIDTH+1:0] <pr>; //Real part of complex output
reg signed [AWIDTH+BWIDTH+1:0] <pi>;  //Imaginary part of complex output

reg signed [AWIDTH-1:0] <ar_d>;
reg signed [AWIDTH-1:0] <ai_d>;
reg signed [BWIDTH-1:0] <br_d>;
reg signed [BWIDTH-1:0] <bi_d>;

wire signed [AWIDTH:0] <addcommon>;
wire signed [BWIDTH:0] <addr>;
wire signed [BWIDTH:0] <addi>;

wire signed [AWIDTH+BWIDTH:0] <multcommon>;
wire signed [AWIDTH+BWIDTH:0] <multr>;
wire signed [AWIDTH+BWIDTH:0] <multi>;

reg signed [AWIDTH+BWIDTH:0] <multcommon_d>;
reg signed [AWIDTH+BWIDTH:0] <multr_d>;
reg signed [AWIDTH+BWIDTH:0] <multi_d>;

//Inputs are registered AREG=BREG=1
always @(posedge <clk>) begin
	<ar_d> <= <ar>;
	<ai_d> <= <ai>;
	<bi_d> <= <bi>;
	<br_d> <= <br>;
end

//Balance Pipeline ADREG=0
assign	<addcommon> = <ar_d> - <ai_d>;
assign 	<addr> = <br_d> - <bi_d>;
assign	<addi> = <br_d> + <bi_d>;

//Common factor (ar-ai)*bi, shared for calculations of real & imaginary final
//products
assign <multcommon> = <bi_d> * <addcommon>;
assign <multr> = <ar_d> * <addr>;
assign <multi> = <ai_d> * <addi>;

//Multiplier outputs are registered MREG=1
always @(posedge <clk>) begin
	<multcommon_d> <= <multcommon>;
	<multr_d> <= <multr>;
	<multi_d> <= <multi>;
end

//Complex outputs are registered PREG=1
always @(posedge <clk>) begin
	<pr> <=  <multcommon_d> + <multr_d>;
	<pi> <=  <multcommon_d> + <multi_d>;
end

				
				