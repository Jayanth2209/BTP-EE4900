//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Tue May  9 21:53:42 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_inputs                 O     1
// mac_result                     O   132
// RDY_mac_result                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_inputs_multiplicand1       I    64
// get_inputs_multiplicand2       I    64
// get_inputs_addend              I    64
// get_inputs_mode                I     2 reg
// EN_get_inputs                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC64(CLK,
	       RST_N,

	       get_inputs_multiplicand1,
	       get_inputs_multiplicand2,
	       get_inputs_addend,
	       get_inputs_mode,
	       EN_get_inputs,
	       RDY_get_inputs,

	       mac_result,
	       RDY_mac_result);
  input  CLK;
  input  RST_N;

  // action method get_inputs
  input  [63 : 0] get_inputs_multiplicand1;
  input  [63 : 0] get_inputs_multiplicand2;
  input  [63 : 0] get_inputs_addend;
  input  [1 : 0] get_inputs_mode;
  input  EN_get_inputs;
  output RDY_get_inputs;

  // value method mac_result
  output [131 : 0] mac_result;
  output RDY_mac_result;

  // signals for module outputs
  wire [131 : 0] mac_result;
  wire RDY_get_inputs, RDY_mac_result;

  // inlined wires
  reg [128 : 0] mac_output_rv$port1__write_1;
  wire [704 : 0] partial_sum_rv$port1__read,
		 partial_sum_rv$port1__write_1,
		 partial_sum_rv$port2__read;
  wire [576 : 0] partial_product_rv$port1__read,
		 partial_product_rv$port1__write_1,
		 partial_product_rv$port2__read;
  wire [192 : 0] mac_inputs_rv$port1__read,
		 mac_inputs_rv$port1__write_1,
		 mac_inputs_rv$port2__read;
  wire [128 : 0] mac_output_rv$port2__read;
  wire mac_output_rv$EN_port1__write, partial_product_rv$EN_port0__write;

  // register counter
  reg [3 : 0] counter;
  wire [3 : 0] counter$D_IN;
  wire counter$EN;

  // register mac_inputs_rv
  reg [192 : 0] mac_inputs_rv;
  wire [192 : 0] mac_inputs_rv$D_IN;
  wire mac_inputs_rv$EN;

  // register mac_output_rv
  reg [128 : 0] mac_output_rv;
  wire [128 : 0] mac_output_rv$D_IN;
  wire mac_output_rv$EN;

  // register mode_r
  reg [1 : 0] mode_r;
  wire [1 : 0] mode_r$D_IN;
  wire mode_r$EN;

  // register partial_product_rv
  reg [576 : 0] partial_product_rv;
  wire [576 : 0] partial_product_rv$D_IN;
  wire partial_product_rv$EN;

  // register partial_sum_rv
  reg [704 : 0] partial_sum_rv;
  wire [704 : 0] partial_sum_rv$D_IN;
  wire partial_sum_rv$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_cycle_count,
       CAN_FIRE_RL_rl_generate_partials,
       CAN_FIRE_RL_rl_mac_16,
       CAN_FIRE_RL_rl_mac_32,
       CAN_FIRE_RL_rl_mac_64_1,
       CAN_FIRE_RL_rl_mac_64_2,
       CAN_FIRE_get_inputs,
       WILL_FIRE_RL_cycle_count,
       WILL_FIRE_RL_rl_generate_partials,
       WILL_FIRE_RL_rl_mac_16,
       WILL_FIRE_RL_rl_mac_32,
       WILL_FIRE_RL_rl_mac_64_1,
       WILL_FIRE_RL_rl_mac_64_2,
       WILL_FIRE_get_inputs;

  // inputs to muxes for submodule ports
  wire [128 : 0] MUX_mac_output_rv$port1__write_1__VAL_1,
		 MUX_mac_output_rv$port1__write_1__VAL_2,
		 MUX_mac_output_rv$port1__write_1__VAL_3;

  // remaining internal signals
  wire [127 : 0] x023_PLUS_y024__q5,
		 x387_PLUS_y388__q1,
		 x469_PLUS_y470__q2,
		 x488_PLUS_y489__q4,
		 x591_PLUS_y592__q3,
		 x__h3899,
		 x__h3925,
		 x__h3927,
		 x__h3929,
		 x__h4387,
		 x__h4469,
		 x__h4471,
		 x__h4591,
		 x__h4593,
		 x__h4595,
		 x__h6470,
		 x__h6471,
		 x__h6473,
		 x__h6475,
		 x__h6488,
		 x__h6490,
		 x__h7023,
		 y__h3926,
		 y__h3928,
		 y__h3930,
		 y__h4388,
		 y__h4470,
		 y__h4472,
		 y__h4592,
		 y__h4594,
		 y__h4596,
		 y__h6472,
		 y__h6474,
		 y__h6476,
		 y__h6489,
		 y__h6491,
		 y__h7024;
  wire [63 : 0] _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d47,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d55,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d60,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d62,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d33,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d43,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d52,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d57,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d22,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d29,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d40,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d50,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d13,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d17,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d26,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d38,
		mac_32_1__h7245,
		mac_32_2__h7246,
		x306_PLUS_y307__q6,
		x444_PLUS_y445__q7,
		x__h7266,
		x__h7268,
		x__h7270,
		x__h7306,
		x__h7404,
		x__h7406,
		x__h7408,
		x__h7444,
		y__h7267,
		y__h7269,
		y__h7271,
		y__h7307,
		y__h7405,
		y__h7407,
		y__h7409,
		y__h7445;
  wire [31 : 0] mac_16_1__h7572,
		mac_16_2__h7573,
		mac_16_3__h7574,
		mac_16_4__h7575;

  // action method get_inputs
  assign RDY_get_inputs = !mac_inputs_rv$port1__read[192] ;
  assign CAN_FIRE_get_inputs = !mac_inputs_rv$port1__read[192] ;
  assign WILL_FIRE_get_inputs = EN_get_inputs ;

  // value method mac_result
  assign mac_result = { counter, mac_output_rv[127:0] } ;
  assign RDY_mac_result = mac_output_rv[128] ;

  // rule RL_cycle_count
  assign CAN_FIRE_RL_cycle_count = 1'd1 ;
  assign WILL_FIRE_RL_cycle_count = 1'd1 ;

  // rule RL_rl_mac_64_2
  assign CAN_FIRE_RL_rl_mac_64_2 =
	     partial_sum_rv[704] && !mac_output_rv[128] && mode_r == 2'h2 ;
  assign WILL_FIRE_RL_rl_mac_64_2 = CAN_FIRE_RL_rl_mac_64_2 ;

  // rule RL_rl_mac_64_1
  assign CAN_FIRE_RL_rl_mac_64_1 =
	     partial_product_rv[576] && !partial_sum_rv$port1__read[704] &&
	     mode_r == 2'h2 ;
  assign WILL_FIRE_RL_rl_mac_64_1 = CAN_FIRE_RL_rl_mac_64_1 ;

  // rule RL_rl_mac_32
  assign CAN_FIRE_RL_rl_mac_32 =
	     partial_product_rv[576] && !mac_output_rv[128] &&
	     mode_r == 2'h1 ;
  assign WILL_FIRE_RL_rl_mac_32 = CAN_FIRE_RL_rl_mac_32 ;

  // rule RL_rl_mac_16
  assign CAN_FIRE_RL_rl_mac_16 =
	     partial_product_rv[576] && !mac_output_rv[128] &&
	     mode_r == 2'h0 ;
  assign WILL_FIRE_RL_rl_mac_16 = CAN_FIRE_RL_rl_mac_16 ;

  // rule RL_rl_generate_partials
  assign CAN_FIRE_RL_rl_generate_partials =
	     mac_inputs_rv[192] && !partial_product_rv$port1__read[576] ;
  assign WILL_FIRE_RL_rl_generate_partials =
	     CAN_FIRE_RL_rl_generate_partials ;

  // inputs to muxes for submodule ports
  assign MUX_mac_output_rv$port1__write_1__VAL_1 =
	     { 1'd1, x__h6470 + partial_sum_rv[703:576] } ;
  assign MUX_mac_output_rv$port1__write_1__VAL_2 =
	     { 1'd1, mac_32_2__h7246, mac_32_1__h7245 } ;
  assign MUX_mac_output_rv$port1__write_1__VAL_3 =
	     { 1'd1,
	       mac_16_4__h7575,
	       mac_16_3__h7574,
	       mac_16_2__h7573,
	       mac_16_1__h7572 } ;

  // inlined wires
  assign mac_inputs_rv$port1__read =
	     CAN_FIRE_RL_rl_generate_partials ?
	       193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       mac_inputs_rv ;
  assign mac_inputs_rv$port1__write_1 =
	     { 1'd1,
	       get_inputs_multiplicand1,
	       get_inputs_multiplicand2,
	       get_inputs_addend } ;
  assign mac_inputs_rv$port2__read =
	     EN_get_inputs ?
	       mac_inputs_rv$port1__write_1 :
	       mac_inputs_rv$port1__read ;
  assign partial_product_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_mac_16 || WILL_FIRE_RL_rl_mac_32 ||
	     WILL_FIRE_RL_rl_mac_64_1 ;
  assign partial_product_rv$port1__read =
	     partial_product_rv$EN_port0__write ?
	       577'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       partial_product_rv ;
  assign partial_product_rv$port1__write_1 =
	     { 1'd1,
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d13[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d17[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d22[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d26[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d29[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d33[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d38[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d40[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d43[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d47[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d50[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d52[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d55[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d57[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d60[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d62[31:0],
	       mac_inputs_rv[63:0] } ;
  assign partial_product_rv$port2__read =
	     CAN_FIRE_RL_rl_generate_partials ?
	       partial_product_rv$port1__write_1 :
	       partial_product_rv$port1__read ;
  assign partial_sum_rv$port1__read =
	     CAN_FIRE_RL_rl_mac_64_2 ?
	       705'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       partial_sum_rv ;
  assign partial_sum_rv$port1__write_1 =
	     { 1'd1, x__h3899, partial_product_rv[575:0] } ;
  assign partial_sum_rv$port2__read =
	     CAN_FIRE_RL_rl_mac_64_1 ?
	       partial_sum_rv$port1__write_1 :
	       partial_sum_rv$port1__read ;
  assign mac_output_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_mac_64_2 || WILL_FIRE_RL_rl_mac_32 ||
	     WILL_FIRE_RL_rl_mac_16 ;
  always@(WILL_FIRE_RL_rl_mac_64_2 or
	  MUX_mac_output_rv$port1__write_1__VAL_1 or
	  WILL_FIRE_RL_rl_mac_32 or
	  MUX_mac_output_rv$port1__write_1__VAL_2 or
	  WILL_FIRE_RL_rl_mac_16 or MUX_mac_output_rv$port1__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_mac_64_2:
	  mac_output_rv$port1__write_1 =
	      MUX_mac_output_rv$port1__write_1__VAL_1;
      WILL_FIRE_RL_rl_mac_32:
	  mac_output_rv$port1__write_1 =
	      MUX_mac_output_rv$port1__write_1__VAL_2;
      WILL_FIRE_RL_rl_mac_16:
	  mac_output_rv$port1__write_1 =
	      MUX_mac_output_rv$port1__write_1__VAL_3;
      default: mac_output_rv$port1__write_1 =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign mac_output_rv$port2__read =
	     mac_output_rv$EN_port1__write ?
	       mac_output_rv$port1__write_1 :
	       mac_output_rv ;

  // register counter
  assign counter$D_IN = counter + 4'd1 ;
  assign counter$EN = 1'd1 ;

  // register mac_inputs_rv
  assign mac_inputs_rv$D_IN = mac_inputs_rv$port2__read ;
  assign mac_inputs_rv$EN = 1'b1 ;

  // register mac_output_rv
  assign mac_output_rv$D_IN = mac_output_rv$port2__read ;
  assign mac_output_rv$EN = 1'b1 ;

  // register mode_r
  assign mode_r$D_IN = get_inputs_mode ;
  assign mode_r$EN = EN_get_inputs ;

  // register partial_product_rv
  assign partial_product_rv$D_IN = partial_product_rv$port2__read ;
  assign partial_product_rv$EN = 1'b1 ;

  // register partial_sum_rv
  assign partial_sum_rv$D_IN = partial_sum_rv$port2__read ;
  assign partial_sum_rv$EN = 1'b1 ;

  // remaining internal signals
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d47 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d55 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d60 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d62 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d33 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d43 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d52 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d57 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d22 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d29 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d40 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d50 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d13 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d17 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d26 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d38 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign mac_16_1__h7572 =
	     partial_product_rv[95:64] + { 16'd0, partial_product_rv[15:0] } ;
  assign mac_16_2__h7573 =
	     partial_product_rv[223:192] +
	     { 16'd0, partial_product_rv[31:16] } ;
  assign mac_16_3__h7574 =
	     partial_product_rv[447:416] +
	     { 16'd0, partial_product_rv[47:32] } ;
  assign mac_16_4__h7575 =
	     partial_product_rv[575:544] +
	     { 16'd0, partial_product_rv[63:48] } ;
  assign mac_32_1__h7245 = x__h7404 + y__h7405 ;
  assign mac_32_2__h7246 = x__h7266 + y__h7267 ;
  assign x023_PLUS_y024__q5 = x__h7023 + y__h7024 ;
  assign x306_PLUS_y307__q6 = x__h7306 + y__h7307 ;
  assign x387_PLUS_y388__q1 = x__h4387 + y__h4388 ;
  assign x444_PLUS_y445__q7 = x__h7444 + y__h7445 ;
  assign x469_PLUS_y470__q2 = x__h4469 + y__h4470 ;
  assign x488_PLUS_y489__q4 = x__h6488 + y__h6489 ;
  assign x591_PLUS_y592__q3 = x__h4591 + y__h4592 ;
  assign x__h3899 = x__h3925 + y__h3926 ;
  assign x__h3925 = x__h3927 + y__h3928 ;
  assign x__h3927 = x__h3929 + y__h3930 ;
  assign x__h3929 = { 96'd0, partial_product_rv[95:64] } ;
  assign x__h4387 = { 96'd0, partial_product_rv[127:96] } ;
  assign x__h4469 = x__h4471 + y__h4472 ;
  assign x__h4471 = { 96'd0, partial_product_rv[191:160] } ;
  assign x__h4591 = x__h4593 + y__h4594 ;
  assign x__h4593 = x__h4595 + y__h4596 ;
  assign x__h4595 = { 96'd0, partial_product_rv[287:256] } ;
  assign x__h6470 = x__h6471 + y__h6472 ;
  assign x__h6471 = x__h6473 + y__h6474 ;
  assign x__h6473 = x__h6475 + y__h6476 ;
  assign x__h6475 = { x488_PLUS_y489__q4[63:0], 64'd0 } ;
  assign x__h6488 = x__h6490 + y__h6491 ;
  assign x__h6490 = { 96'd0, partial_sum_rv[415:384] } ;
  assign x__h7023 = { 96'd0, partial_sum_rv[511:480] } ;
  assign x__h7266 = x__h7268 + y__h7269 ;
  assign x__h7268 = x__h7270 + y__h7271 ;
  assign x__h7270 = { 32'd0, partial_product_rv[447:416] } ;
  assign x__h7306 = { 32'd0, partial_product_rv[511:480] } ;
  assign x__h7404 = x__h7406 + y__h7407 ;
  assign x__h7406 = x__h7408 + y__h7409 ;
  assign x__h7408 = { 32'd0, partial_product_rv[95:64] } ;
  assign x__h7444 = { 32'd0, partial_product_rv[127:96] } ;
  assign y__h3926 = { x591_PLUS_y592__q3[79:0], 48'd0 } ;
  assign y__h3928 = { x469_PLUS_y470__q2[95:0], 32'd0 } ;
  assign y__h3930 = { x387_PLUS_y388__q1[111:0], 16'd0 } ;
  assign y__h4388 = { 96'd0, partial_product_rv[159:128] } ;
  assign y__h4470 = { 96'd0, partial_product_rv[255:224] } ;
  assign y__h4472 = { 96'd0, partial_product_rv[223:192] } ;
  assign y__h4592 = { 96'd0, partial_product_rv[383:352] } ;
  assign y__h4594 = { 96'd0, partial_product_rv[351:320] } ;
  assign y__h4596 = { 96'd0, partial_product_rv[319:288] } ;
  assign y__h6472 = { 64'd0, partial_sum_rv[63:0] } ;
  assign y__h6474 = { partial_sum_rv[575:544], 96'd0 } ;
  assign y__h6476 = { x023_PLUS_y024__q5[47:0], 80'd0 } ;
  assign y__h6489 = { 96'd0, partial_sum_rv[479:448] } ;
  assign y__h6491 = { 96'd0, partial_sum_rv[447:416] } ;
  assign y__h7024 = { 96'd0, partial_sum_rv[543:512] } ;
  assign y__h7267 = { 32'd0, partial_product_rv[63:32] } ;
  assign y__h7269 = { partial_product_rv[575:544], 32'd0 } ;
  assign y__h7271 = { x306_PLUS_y307__q6[47:0], 16'd0 } ;
  assign y__h7307 = { 32'd0, partial_product_rv[543:512] } ;
  assign y__h7405 = { 32'd0, partial_product_rv[31:0] } ;
  assign y__h7407 = { partial_product_rv[223:192], 32'd0 } ;
  assign y__h7409 = { x444_PLUS_y445__q7[47:0], 16'd0 } ;
  assign y__h7445 = { 32'd0, partial_product_rv[159:128] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 4'd0;
	mac_inputs_rv <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	mac_output_rv <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	mode_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	partial_product_rv <= `BSV_ASSIGNMENT_DELAY
	    577'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	partial_sum_rv <= `BSV_ASSIGNMENT_DELAY
	    705'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
	if (mac_inputs_rv$EN)
	  mac_inputs_rv <= `BSV_ASSIGNMENT_DELAY mac_inputs_rv$D_IN;
	if (mac_output_rv$EN)
	  mac_output_rv <= `BSV_ASSIGNMENT_DELAY mac_output_rv$D_IN;
	if (mode_r$EN) mode_r <= `BSV_ASSIGNMENT_DELAY mode_r$D_IN;
	if (partial_product_rv$EN)
	  partial_product_rv <= `BSV_ASSIGNMENT_DELAY partial_product_rv$D_IN;
	if (partial_sum_rv$EN)
	  partial_sum_rv <= `BSV_ASSIGNMENT_DELAY partial_sum_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter = 4'hA;
    mac_inputs_rv = 193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_rv = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mode_r = 2'h2;
    partial_product_rv =
	577'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_rv =
	705'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC64

