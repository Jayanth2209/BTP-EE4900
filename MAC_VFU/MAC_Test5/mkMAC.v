//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Wed Apr 12 16:27:55 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_values                 O     1 const
// mac_result                     O   132 reg
// RDY_mac_result                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_values_multiplicand1       I    64
// get_values_multiplicand2       I    64
// get_values_addend              I    64
// get_values_mode                I     2
// EN_get_values                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC(CLK,
	     RST_N,

	     get_values_multiplicand1,
	     get_values_multiplicand2,
	     get_values_addend,
	     get_values_mode,
	     EN_get_values,
	     RDY_get_values,

	     mac_result,
	     RDY_mac_result);
  input  CLK;
  input  RST_N;

  // action method get_values
  input  [63 : 0] get_values_multiplicand1;
  input  [63 : 0] get_values_multiplicand2;
  input  [63 : 0] get_values_addend;
  input  [1 : 0] get_values_mode;
  input  EN_get_values;
  output RDY_get_values;

  // value method mac_result
  output [131 : 0] mac_result;
  output RDY_mac_result;

  // signals for module outputs
  wire [131 : 0] mac_result;
  wire RDY_get_values, RDY_mac_result;

  // register a
  reg [63 : 0] a;
  wire [63 : 0] a$D_IN;
  wire a$EN;

  // register counter
  reg [3 : 0] counter;
  wire [3 : 0] counter$D_IN;
  wire counter$EN;

  // register flag_0
  reg flag_0;
  wire flag_0$D_IN, flag_0$EN;

  // register flag_1
  reg flag_1;
  wire flag_1$D_IN, flag_1$EN;

  // register flag_2
  reg flag_2;
  wire flag_2$D_IN, flag_2$EN;

  // register flag_3
  reg flag_3;
  wire flag_3$D_IN, flag_3$EN;

  // register flag_4
  reg flag_4;
  wire flag_4$D_IN, flag_4$EN;

  // register inp_ready
  reg inp_ready;
  wire inp_ready$D_IN, inp_ready$EN;

  // register m1
  reg [63 : 0] m1;
  wire [63 : 0] m1$D_IN;
  wire m1$EN;

  // register m2
  reg [63 : 0] m2;
  wire [63 : 0] m2$D_IN;
  wire m2$EN;

  // register mac_output
  reg [127 : 0] mac_output;
  reg [127 : 0] mac_output$D_IN;
  wire mac_output$EN;

  // register mac_ready
  reg mac_ready;
  wire mac_ready$D_IN, mac_ready$EN;

  // register partial_product_0
  reg [31 : 0] partial_product_0;
  wire [31 : 0] partial_product_0$D_IN;
  wire partial_product_0$EN;

  // register partial_product_1
  reg [31 : 0] partial_product_1;
  wire [31 : 0] partial_product_1$D_IN;
  wire partial_product_1$EN;

  // register partial_product_10
  reg [31 : 0] partial_product_10;
  wire [31 : 0] partial_product_10$D_IN;
  wire partial_product_10$EN;

  // register partial_product_11
  reg [31 : 0] partial_product_11;
  wire [31 : 0] partial_product_11$D_IN;
  wire partial_product_11$EN;

  // register partial_product_12
  reg [31 : 0] partial_product_12;
  wire [31 : 0] partial_product_12$D_IN;
  wire partial_product_12$EN;

  // register partial_product_13
  reg [31 : 0] partial_product_13;
  wire [31 : 0] partial_product_13$D_IN;
  wire partial_product_13$EN;

  // register partial_product_14
  reg [31 : 0] partial_product_14;
  wire [31 : 0] partial_product_14$D_IN;
  wire partial_product_14$EN;

  // register partial_product_15
  reg [31 : 0] partial_product_15;
  wire [31 : 0] partial_product_15$D_IN;
  wire partial_product_15$EN;

  // register partial_product_2
  reg [31 : 0] partial_product_2;
  wire [31 : 0] partial_product_2$D_IN;
  wire partial_product_2$EN;

  // register partial_product_3
  reg [31 : 0] partial_product_3;
  wire [31 : 0] partial_product_3$D_IN;
  wire partial_product_3$EN;

  // register partial_product_4
  reg [31 : 0] partial_product_4;
  wire [31 : 0] partial_product_4$D_IN;
  wire partial_product_4$EN;

  // register partial_product_5
  reg [31 : 0] partial_product_5;
  wire [31 : 0] partial_product_5$D_IN;
  wire partial_product_5$EN;

  // register partial_product_6
  reg [31 : 0] partial_product_6;
  wire [31 : 0] partial_product_6$D_IN;
  wire partial_product_6$EN;

  // register partial_product_7
  reg [31 : 0] partial_product_7;
  wire [31 : 0] partial_product_7$D_IN;
  wire partial_product_7$EN;

  // register partial_product_8
  reg [31 : 0] partial_product_8;
  wire [31 : 0] partial_product_8$D_IN;
  wire partial_product_8$EN;

  // register partial_product_9
  reg [31 : 0] partial_product_9;
  wire [31 : 0] partial_product_9$D_IN;
  wire partial_product_9$EN;

  // register partial_sum_0
  reg [127 : 0] partial_sum_0;
  wire [127 : 0] partial_sum_0$D_IN;
  wire partial_sum_0$EN;

  // register partial_sum_1
  reg [127 : 0] partial_sum_1;
  wire [127 : 0] partial_sum_1$D_IN;
  wire partial_sum_1$EN;

  // register partial_sum_2
  reg [127 : 0] partial_sum_2;
  wire [127 : 0] partial_sum_2$D_IN;
  wire partial_sum_2$EN;

  // register partial_sum_3
  reg [127 : 0] partial_sum_3;
  wire [127 : 0] partial_sum_3$D_IN;
  wire partial_sum_3$EN;

  // register partial_sum_4
  reg [127 : 0] partial_sum_4;
  wire [127 : 0] partial_sum_4$D_IN;
  wire partial_sum_4$EN;

  // register partial_sum_5
  reg [127 : 0] partial_sum_5;
  wire [127 : 0] partial_sum_5$D_IN;
  wire partial_sum_5$EN;

  // register partial_sum_6
  reg [127 : 0] partial_sum_6;
  wire [127 : 0] partial_sum_6$D_IN;
  wire partial_sum_6$EN;

  // register reg_mode
  reg [1 : 0] reg_mode;
  wire [1 : 0] reg_mode$D_IN;
  wire reg_mode$EN;

  // register x_0
  reg [15 : 0] x_0;
  wire [15 : 0] x_0$D_IN;
  wire x_0$EN;

  // register x_1
  reg [15 : 0] x_1;
  reg [15 : 0] x_1$D_IN;
  wire x_1$EN;

  // register x_10
  reg [15 : 0] x_10;
  reg [15 : 0] x_10$D_IN;
  wire x_10$EN;

  // register x_11
  reg [15 : 0] x_11;
  reg [15 : 0] x_11$D_IN;
  wire x_11$EN;

  // register x_12
  reg [15 : 0] x_12;
  reg [15 : 0] x_12$D_IN;
  wire x_12$EN;

  // register x_13
  reg [15 : 0] x_13;
  reg [15 : 0] x_13$D_IN;
  wire x_13$EN;

  // register x_14
  reg [15 : 0] x_14;
  reg [15 : 0] x_14$D_IN;
  wire x_14$EN;

  // register x_15
  reg [15 : 0] x_15;
  wire [15 : 0] x_15$D_IN;
  wire x_15$EN;

  // register x_2
  reg [15 : 0] x_2;
  reg [15 : 0] x_2$D_IN;
  wire x_2$EN;

  // register x_3
  reg [15 : 0] x_3;
  reg [15 : 0] x_3$D_IN;
  wire x_3$EN;

  // register x_4
  reg [15 : 0] x_4;
  reg [15 : 0] x_4$D_IN;
  wire x_4$EN;

  // register x_5
  reg [15 : 0] x_5;
  reg [15 : 0] x_5$D_IN;
  wire x_5$EN;

  // register x_6
  reg [15 : 0] x_6;
  reg [15 : 0] x_6$D_IN;
  wire x_6$EN;

  // register x_7
  reg [15 : 0] x_7;
  reg [15 : 0] x_7$D_IN;
  wire x_7$EN;

  // register x_8
  reg [15 : 0] x_8;
  reg [15 : 0] x_8$D_IN;
  wire x_8$EN;

  // register x_9
  reg [15 : 0] x_9;
  reg [15 : 0] x_9$D_IN;
  wire x_9$EN;

  // register y_0
  reg [15 : 0] y_0;
  wire [15 : 0] y_0$D_IN;
  wire y_0$EN;

  // register y_1
  reg [15 : 0] y_1;
  wire [15 : 0] y_1$D_IN;
  wire y_1$EN;

  // register y_10
  reg [15 : 0] y_10;
  reg [15 : 0] y_10$D_IN;
  wire y_10$EN;

  // register y_11
  reg [15 : 0] y_11;
  reg [15 : 0] y_11$D_IN;
  wire y_11$EN;

  // register y_12
  reg [15 : 0] y_12;
  reg [15 : 0] y_12$D_IN;
  wire y_12$EN;

  // register y_13
  reg [15 : 0] y_13;
  reg [15 : 0] y_13$D_IN;
  wire y_13$EN;

  // register y_14
  reg [15 : 0] y_14;
  wire [15 : 0] y_14$D_IN;
  wire y_14$EN;

  // register y_15
  reg [15 : 0] y_15;
  wire [15 : 0] y_15$D_IN;
  wire y_15$EN;

  // register y_2
  reg [15 : 0] y_2;
  reg [15 : 0] y_2$D_IN;
  wire y_2$EN;

  // register y_3
  reg [15 : 0] y_3;
  reg [15 : 0] y_3$D_IN;
  wire y_3$EN;

  // register y_4
  reg [15 : 0] y_4;
  reg [15 : 0] y_4$D_IN;
  wire y_4$EN;

  // register y_5
  reg [15 : 0] y_5;
  reg [15 : 0] y_5$D_IN;
  wire y_5$EN;

  // register y_6
  reg [15 : 0] y_6;
  reg [15 : 0] y_6$D_IN;
  wire y_6$EN;

  // register y_7
  reg [15 : 0] y_7;
  reg [15 : 0] y_7$D_IN;
  wire y_7$EN;

  // register y_8
  reg [15 : 0] y_8;
  reg [15 : 0] y_8$D_IN;
  wire y_8$EN;

  // register y_9
  reg [15 : 0] y_9;
  reg [15 : 0] y_9$D_IN;
  wire y_9$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_compute_MAC,
       CAN_FIRE_get_values,
       WILL_FIRE_RL_compute_MAC,
       WILL_FIRE_get_values;

  // remaining internal signals
  wire [127 : 0] x7330_PLUS_y7331__q1,
		 x7420_PLUS_y7421__q2,
		 x7600_PLUS_y7601__q3,
		 x7669_PLUS_y7670__q5,
		 x7736_PLUS_y7737__q4,
		 x__h17330,
		 x__h17420,
		 x__h17600,
		 x__h17669,
		 x__h17736,
		 x__h17738,
		 x__h17740,
		 x__h17956,
		 x__h18448,
		 x__h18637,
		 x__h18891,
		 x__h19100,
		 x__h19102,
		 x__h19104,
		 x__h19106,
		 x__h19108,
		 x__h19110,
		 x__h19112,
		 x__h19114,
		 x__h19116,
		 y__h17331,
		 y__h17421,
		 y__h17601,
		 y__h17670,
		 y__h17737,
		 y__h17739,
		 y__h17741,
		 y__h18926,
		 y__h19103,
		 y__h19105,
		 y__h19107,
		 y__h19109,
		 y__h19113;
  wire [95 : 0] partial_product_5_36_BITS_15_TO_0_73_PLUS_0_CO_ETC___d300;
  wire [63 : 0] _0_CONCAT_x_0_17_18_MUL_0_CONCAT_y_0_19_20___d121,
		_0_CONCAT_x_10_77_78_MUL_0_CONCAT_y_10_79_80___d181,
		_0_CONCAT_x_11_83_84_MUL_0_CONCAT_y_11_85_86___d187,
		_0_CONCAT_x_12_89_90_MUL_0_CONCAT_y_12_91_92___d193,
		_0_CONCAT_x_13_95_96_MUL_0_CONCAT_y_13_97_98___d199,
		_0_CONCAT_x_14_01_02_MUL_0_CONCAT_y_14_03_04___d205,
		_0_CONCAT_x_15_07_08_MUL_0_CONCAT_y_15_09_10___d211,
		_0_CONCAT_x_1_23_24_MUL_0_CONCAT_y_1_25_26___d127,
		_0_CONCAT_x_2_29_30_MUL_0_CONCAT_y_2_31_32___d133,
		_0_CONCAT_x_3_35_36_MUL_0_CONCAT_y_3_37_38___d139,
		_0_CONCAT_x_4_41_42_MUL_0_CONCAT_y_4_43_44___d145,
		_0_CONCAT_x_5_47_48_MUL_0_CONCAT_y_5_49_50___d151,
		_0_CONCAT_x_6_53_54_MUL_0_CONCAT_y_6_55_56___d157,
		_0_CONCAT_x_7_59_60_MUL_0_CONCAT_y_7_61_62___d163,
		_0_CONCAT_x_8_65_66_MUL_0_CONCAT_y_8_67_68___d169,
		_0_CONCAT_x_9_71_72_MUL_0_CONCAT_y_9_73_74___d175,
		partial_product_3_34_BITS_15_TO_0_81_PLUS_0_CO_ETC___d299,
		x__h18671,
		x__h18673,
		x__h18675,
		x__h18774,
		x__h18776,
		x__h18778,
		y__h18672,
		y__h18775;
  wire [31 : 0] x__h15865,
		x__h15952,
		x__h16017,
		x__h16082,
		x__h16147,
		x__h16212,
		x__h16277,
		x__h16342,
		x__h16407,
		x__h16472,
		x__h16537,
		x__h16602,
		x__h16667,
		x__h16732,
		x__h16797,
		x__h16862,
		y__h15866,
		y__h15953,
		y__h16018,
		y__h16083,
		y__h16148,
		y__h16213,
		y__h16278,
		y__h16343,
		y__h16408,
		y__h16473,
		y__h16538,
		y__h16603,
		y__h16668,
		y__h16733,
		y__h16798,
		y__h16863,
		y__h18483,
		y__h18520,
		y__h18552,
		y__h18584;
  wire [15 : 0] x__h5433,
		x__h5497,
		x__h5561,
		x__h5625,
		x__h5689,
		x__h5753,
		x__h5817,
		x__h5881,
		x__h6906,
		x__h6970,
		x__h7034,
		x__h7098,
		x__h7162,
		x__h7226,
		x__h7290,
		x__h7354,
		y__h17991,
		y__h18051,
		y__h18104,
		y__h18157,
		y__h18210,
		y__h18263,
		y__h18316,
		y__h18369;
  wire NOT_get_values_multiplicand1_EQ_m1_62_63_OR_NO_ETC___d369;

  // action method get_values
  assign RDY_get_values = 1'd1 ;
  assign CAN_FIRE_get_values = 1'd1 ;
  assign WILL_FIRE_get_values = EN_get_values ;

  // value method mac_result
  assign mac_result = { counter, mac_output } ;
  assign RDY_mac_result = mac_ready ;

  // rule RL_compute_MAC
  assign CAN_FIRE_RL_compute_MAC = 1'd1 ;
  assign WILL_FIRE_RL_compute_MAC = 1'd1 ;

  // register a
  assign a$D_IN = get_values_addend ;
  assign a$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_62_63_OR_NO_ETC___d369 ||
	      get_values_mode != reg_mode) ;

  // register counter
  assign counter$D_IN = counter + 4'd1 ;
  assign counter$EN = 1'd1 ;

  // register flag_0
  assign flag_0$D_IN = inp_ready ;
  assign flag_0$EN = 1'd1 ;

  // register flag_1
  assign flag_1$D_IN = flag_0 ;
  assign flag_1$EN = reg_mode != 2'd0 && reg_mode != 2'd1 || !flag_0 ;

  // register flag_2
  assign flag_2$D_IN = flag_1 ;
  assign flag_2$EN = 1'd1 ;

  // register flag_3
  assign flag_3$D_IN = flag_2 || flag_4 ;
  assign flag_3$EN = 1'd1 ;

  // register flag_4
  assign flag_4$D_IN = 1'd1 ;
  assign flag_4$EN = flag_0 && (reg_mode == 2'd0 || reg_mode == 2'd1) ;

  // register inp_ready
  assign inp_ready$D_IN =
	     NOT_get_values_multiplicand1_EQ_m1_62_63_OR_NO_ETC___d369 ||
	     get_values_mode != reg_mode ;
  assign inp_ready$EN = EN_get_values ;

  // register m1
  assign m1$D_IN = get_values_multiplicand1 ;
  assign m1$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_62_63_OR_NO_ETC___d369 ||
	      get_values_mode != reg_mode) ;

  // register m2
  assign m2$D_IN = get_values_multiplicand2 ;
  assign m2$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_62_63_OR_NO_ETC___d369 ||
	      get_values_mode != reg_mode) ;

  // register mac_output
  always@(reg_mode or x__h18891 or x__h17956 or x__h18448 or x__h18637)
  begin
    case (reg_mode)
      2'd0: mac_output$D_IN = x__h17956;
      2'd1: mac_output$D_IN = x__h18448;
      2'd2: mac_output$D_IN = x__h18637;
      2'd3: mac_output$D_IN = x__h18891;
    endcase
  end
  assign mac_output$EN = flag_3$D_IN ;

  // register mac_ready
  assign mac_ready$D_IN = 1'd1 ;
  assign mac_ready$EN = flag_3$D_IN ;

  // register partial_product_0
  assign partial_product_0$D_IN =
	     _0_CONCAT_x_0_17_18_MUL_0_CONCAT_y_0_19_20___d121[31:0] ;
  assign partial_product_0$EN = flag_0 ;

  // register partial_product_1
  assign partial_product_1$D_IN =
	     _0_CONCAT_x_1_23_24_MUL_0_CONCAT_y_1_25_26___d127[31:0] ;
  assign partial_product_1$EN = flag_0 ;

  // register partial_product_10
  assign partial_product_10$D_IN =
	     _0_CONCAT_x_10_77_78_MUL_0_CONCAT_y_10_79_80___d181[31:0] ;
  assign partial_product_10$EN = flag_0 ;

  // register partial_product_11
  assign partial_product_11$D_IN =
	     _0_CONCAT_x_11_83_84_MUL_0_CONCAT_y_11_85_86___d187[31:0] ;
  assign partial_product_11$EN = flag_0 ;

  // register partial_product_12
  assign partial_product_12$D_IN =
	     _0_CONCAT_x_12_89_90_MUL_0_CONCAT_y_12_91_92___d193[31:0] ;
  assign partial_product_12$EN = flag_0 ;

  // register partial_product_13
  assign partial_product_13$D_IN =
	     _0_CONCAT_x_13_95_96_MUL_0_CONCAT_y_13_97_98___d199[31:0] ;
  assign partial_product_13$EN = flag_0 ;

  // register partial_product_14
  assign partial_product_14$D_IN =
	     _0_CONCAT_x_14_01_02_MUL_0_CONCAT_y_14_03_04___d205[31:0] ;
  assign partial_product_14$EN = flag_0 ;

  // register partial_product_15
  assign partial_product_15$D_IN =
	     _0_CONCAT_x_15_07_08_MUL_0_CONCAT_y_15_09_10___d211[31:0] ;
  assign partial_product_15$EN = flag_0 ;

  // register partial_product_2
  assign partial_product_2$D_IN =
	     _0_CONCAT_x_2_29_30_MUL_0_CONCAT_y_2_31_32___d133[31:0] ;
  assign partial_product_2$EN = flag_0 ;

  // register partial_product_3
  assign partial_product_3$D_IN =
	     _0_CONCAT_x_3_35_36_MUL_0_CONCAT_y_3_37_38___d139[31:0] ;
  assign partial_product_3$EN = flag_0 ;

  // register partial_product_4
  assign partial_product_4$D_IN =
	     _0_CONCAT_x_4_41_42_MUL_0_CONCAT_y_4_43_44___d145[31:0] ;
  assign partial_product_4$EN = flag_0 ;

  // register partial_product_5
  assign partial_product_5$D_IN =
	     _0_CONCAT_x_5_47_48_MUL_0_CONCAT_y_5_49_50___d151[31:0] ;
  assign partial_product_5$EN = flag_0 ;

  // register partial_product_6
  assign partial_product_6$D_IN =
	     _0_CONCAT_x_6_53_54_MUL_0_CONCAT_y_6_55_56___d157[31:0] ;
  assign partial_product_6$EN = flag_0 ;

  // register partial_product_7
  assign partial_product_7$D_IN =
	     _0_CONCAT_x_7_59_60_MUL_0_CONCAT_y_7_61_62___d163[31:0] ;
  assign partial_product_7$EN = flag_0 ;

  // register partial_product_8
  assign partial_product_8$D_IN =
	     _0_CONCAT_x_8_65_66_MUL_0_CONCAT_y_8_67_68___d169[31:0] ;
  assign partial_product_8$EN = flag_0 ;

  // register partial_product_9
  assign partial_product_9$D_IN =
	     _0_CONCAT_x_9_71_72_MUL_0_CONCAT_y_9_73_74___d175[31:0] ;
  assign partial_product_9$EN = flag_0 ;

  // register partial_sum_0
  assign partial_sum_0$D_IN = { x7330_PLUS_y7331__q1[111:0], 16'd0 } ;
  assign partial_sum_0$EN = flag_1 ;

  // register partial_sum_1
  assign partial_sum_1$D_IN = { x7420_PLUS_y7421__q2[111:0], 16'd0 } ;
  assign partial_sum_1$EN = flag_1 ;

  // register partial_sum_2
  assign partial_sum_2$D_IN = { 64'd0, partial_product_4, 32'd0 } ;
  assign partial_sum_2$EN = flag_1 ;

  // register partial_sum_3
  assign partial_sum_3$D_IN = { 64'd0, partial_product_15, 32'd0 } ;
  assign partial_sum_3$EN = flag_1 ;

  // register partial_sum_4
  assign partial_sum_4$D_IN = { x7600_PLUS_y7601__q3[111:0], 16'd0 } ;
  assign partial_sum_4$EN = flag_1 ;

  // register partial_sum_5
  assign partial_sum_5$D_IN = { x7736_PLUS_y7737__q4[79:0], 48'd0 } ;
  assign partial_sum_5$EN = flag_1 ;

  // register partial_sum_6
  assign partial_sum_6$D_IN = { x7669_PLUS_y7670__q5[111:0], 16'd0 } ;
  assign partial_sum_6$EN = flag_1 ;

  // register reg_mode
  assign reg_mode$D_IN = get_values_mode ;
  assign reg_mode$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_62_63_OR_NO_ETC___d369 ||
	      get_values_mode != reg_mode) ;

  // register x_0
  assign x_0$D_IN = (reg_mode == 2'd0) ? x__h5433 : m1[15:0] ;
  assign x_0$EN = inp_ready ;

  // register x_1
  always@(reg_mode or m1 or x__h5497)
  begin
    case (reg_mode)
      2'd0: x_1$D_IN = x__h5497;
      2'd1: x_1$D_IN = m1[31:16];
      default: x_1$D_IN = m1[15:0];
    endcase
  end
  assign x_1$EN = inp_ready ;

  // register x_10
  always@(reg_mode or m1 or x__h5561)
  begin
    case (reg_mode)
      2'd0: x_10$D_IN = x__h5561;
      2'd1, 2'd2: x_10$D_IN = m1[47:32];
      2'd3: x_10$D_IN = m1[31:16];
    endcase
  end
  assign x_10$EN = inp_ready ;

  // register x_11
  always@(reg_mode or m1 or x__h5625)
  begin
    case (reg_mode)
      2'd0: x_11$D_IN = x__h5625;
      2'd1: x_11$D_IN = m1[63:48];
      default: x_11$D_IN = m1[47:32];
    endcase
  end
  assign x_11$EN = inp_ready ;

  // register x_12
  always@(reg_mode or m1 or x__h5689)
  begin
    case (reg_mode)
      2'd0: x_12$D_IN = x__h5689;
      2'd1: x_12$D_IN = m1[15:0];
      default: x_12$D_IN = m1[63:48];
    endcase
  end
  assign x_12$EN = inp_ready ;

  // register x_13
  always@(reg_mode or m1 or x__h5753)
  begin
    case (reg_mode)
      2'd0: x_13$D_IN = x__h5753;
      2'd1: x_13$D_IN = m1[31:16];
      default: x_13$D_IN = m1[47:32];
    endcase
  end
  assign x_13$EN = inp_ready ;

  // register x_14
  always@(reg_mode or m1 or x__h5817)
  begin
    case (reg_mode)
      2'd0: x_14$D_IN = x__h5817;
      2'd1: x_14$D_IN = m1[47:32];
      default: x_14$D_IN = m1[63:48];
    endcase
  end
  assign x_14$EN = inp_ready ;

  // register x_15
  assign x_15$D_IN = (reg_mode == 2'd0) ? x__h5881 : m1[63:48] ;
  assign x_15$EN = inp_ready ;

  // register x_2
  always@(reg_mode or m1 or x__h5561)
  begin
    case (reg_mode)
      2'd0: x_2$D_IN = x__h5561;
      2'd1: x_2$D_IN = m1[47:32];
      default: x_2$D_IN = m1[31:16];
    endcase
  end
  assign x_2$EN = inp_ready ;

  // register x_3
  always@(reg_mode or m1 or x__h5625)
  begin
    case (reg_mode)
      2'd0: x_3$D_IN = x__h5625;
      2'd1: x_3$D_IN = m1[63:48];
      default: x_3$D_IN = m1[15:0];
    endcase
  end
  assign x_3$EN = inp_ready ;

  // register x_4
  always@(reg_mode or m1 or x__h5689)
  begin
    case (reg_mode)
      2'd0: x_4$D_IN = x__h5689;
      2'd1: x_4$D_IN = m1[15:0];
      default: x_4$D_IN = m1[31:16];
    endcase
  end
  assign x_4$EN = inp_ready ;

  // register x_5
  always@(reg_mode or m1 or x__h5753)
  begin
    case (reg_mode)
      2'd0: x_5$D_IN = x__h5753;
      2'd1, 2'd2: x_5$D_IN = m1[31:16];
      2'd3: x_5$D_IN = m1[47:32];
    endcase
  end
  assign x_5$EN = inp_ready ;

  // register x_6
  always@(reg_mode or m1 or x__h5817)
  begin
    case (reg_mode)
      2'd0: x_6$D_IN = x__h5817;
      2'd1: x_6$D_IN = m1[47:32];
      default: x_6$D_IN = m1[15:0];
    endcase
  end
  assign x_6$EN = inp_ready ;

  // register x_7
  always@(reg_mode or m1 or x__h5881)
  begin
    case (reg_mode)
      2'd0: x_7$D_IN = x__h5881;
      2'd1: x_7$D_IN = m1[63:48];
      default: x_7$D_IN = m1[31:16];
    endcase
  end
  assign x_7$EN = inp_ready ;

  // register x_8
  always@(reg_mode or m1 or x__h5433)
  begin
    case (reg_mode)
      2'd0: x_8$D_IN = x__h5433;
      2'd1: x_8$D_IN = m1[15:0];
      default: x_8$D_IN = m1[47:32];
    endcase
  end
  assign x_8$EN = inp_ready ;

  // register x_9
  always@(reg_mode or m1 or x__h5497)
  begin
    case (reg_mode)
      2'd0: x_9$D_IN = x__h5497;
      2'd1: x_9$D_IN = m1[31:16];
      default: x_9$D_IN = m1[63:48];
    endcase
  end
  assign x_9$EN = inp_ready ;

  // register y_0
  assign y_0$D_IN = (reg_mode == 2'd0) ? x__h6906 : m2[15:0] ;
  assign y_0$EN = inp_ready ;

  // register y_1
  assign y_1$D_IN = (reg_mode == 2'd0) ? x__h6970 : m2[31:16] ;
  assign y_1$EN = inp_ready ;

  // register y_10
  always@(reg_mode or m2 or x__h7034)
  begin
    case (reg_mode)
      2'd0: y_10$D_IN = x__h7034;
      2'd1: y_10$D_IN = m2[47:32];
      default: y_10$D_IN = m2[63:48];
    endcase
  end
  assign y_10$EN = inp_ready ;

  // register y_11
  always@(reg_mode or m2 or x__h7098)
  begin
    case (reg_mode)
      2'd0: y_11$D_IN = x__h7098;
      2'd1: y_11$D_IN = m2[63:48];
      default: y_11$D_IN = m2[47:32];
    endcase
  end
  assign y_11$EN = inp_ready ;

  // register y_12
  always@(reg_mode or m2 or x__h7162)
  begin
    case (reg_mode)
      2'd0: y_12$D_IN = x__h7162;
      2'd1: y_12$D_IN = m2[15:0];
      2'd2: y_12$D_IN = m2[47:32];
      2'd3: y_12$D_IN = m2[31:16];
    endcase
  end
  assign y_12$EN = inp_ready ;

  // register y_13
  always@(reg_mode or m2 or x__h7226)
  begin
    case (reg_mode)
      2'd0: y_13$D_IN = x__h7226;
      2'd1: y_13$D_IN = m2[31:16];
      default: y_13$D_IN = m2[63:48];
    endcase
  end
  assign y_13$EN = inp_ready ;

  // register y_14
  assign y_14$D_IN = (reg_mode == 2'd0) ? x__h7290 : m2[47:32] ;
  assign y_14$EN = inp_ready ;

  // register y_15
  assign y_15$D_IN = (reg_mode == 2'd0) ? x__h7354 : m2[63:48] ;
  assign y_15$EN = inp_ready ;

  // register y_2
  always@(reg_mode or m2 or x__h7034)
  begin
    case (reg_mode)
      2'd0: y_2$D_IN = x__h7034;
      2'd1: y_2$D_IN = m2[47:32];
      default: y_2$D_IN = m2[15:0];
    endcase
  end
  assign y_2$EN = inp_ready ;

  // register y_3
  always@(reg_mode or m2 or x__h7098)
  begin
    case (reg_mode)
      2'd0: y_3$D_IN = x__h7098;
      2'd1: y_3$D_IN = m2[63:48];
      2'd2: y_3$D_IN = m2[31:16];
      2'd3: y_3$D_IN = m2[47:32];
    endcase
  end
  assign y_3$EN = inp_ready ;

  // register y_4
  always@(reg_mode or m2 or x__h7162)
  begin
    case (reg_mode)
      2'd0: y_4$D_IN = x__h7162;
      2'd1: y_4$D_IN = m2[15:0];
      default: y_4$D_IN = m2[31:16];
    endcase
  end
  assign y_4$EN = inp_ready ;

  // register y_5
  always@(reg_mode or m2 or x__h7226)
  begin
    case (reg_mode)
      2'd0: y_5$D_IN = x__h7226;
      2'd1: y_5$D_IN = m2[31:16];
      default: y_5$D_IN = m2[15:0];
    endcase
  end
  assign y_5$EN = inp_ready ;

  // register y_6
  always@(reg_mode or m2 or x__h7290)
  begin
    case (reg_mode)
      2'd0: y_6$D_IN = x__h7290;
      2'd1: y_6$D_IN = m2[47:32];
      2'd2: y_6$D_IN = m2[15:0];
      2'd3: y_6$D_IN = m2[63:48];
    endcase
  end
  assign y_6$EN = inp_ready ;

  // register y_7
  always@(reg_mode or m2 or x__h7354)
  begin
    case (reg_mode)
      2'd0: y_7$D_IN = x__h7354;
      2'd1: y_7$D_IN = m2[63:48];
      2'd2: y_7$D_IN = m2[31:16];
      2'd3: y_7$D_IN = m2[47:32];
    endcase
  end
  assign y_7$EN = inp_ready ;

  // register y_8
  always@(reg_mode or m2 or x__h6906)
  begin
    case (reg_mode)
      2'd0: y_8$D_IN = x__h6906;
      2'd1: y_8$D_IN = m2[15:0];
      2'd2: y_8$D_IN = m2[47:32];
      2'd3: y_8$D_IN = m2[31:16];
    endcase
  end
  assign y_8$EN = inp_ready ;

  // register y_9
  always@(reg_mode or m2 or x__h6970)
  begin
    case (reg_mode)
      2'd0: y_9$D_IN = x__h6970;
      2'd1: y_9$D_IN = m2[31:16];
      2'd2: y_9$D_IN = m2[63:48];
      2'd3: y_9$D_IN = m2[15:0];
    endcase
  end
  assign y_9$EN = inp_ready ;

  // remaining internal signals
  assign NOT_get_values_multiplicand1_EQ_m1_62_63_OR_NO_ETC___d369 =
	     get_values_multiplicand1 != m1 ||
	     get_values_multiplicand2 != m2 ||
	     get_values_addend != a ;
  assign _0_CONCAT_x_0_17_18_MUL_0_CONCAT_y_0_19_20___d121 =
	     x__h15865 * y__h15866 ;
  assign _0_CONCAT_x_10_77_78_MUL_0_CONCAT_y_10_79_80___d181 =
	     x__h16537 * y__h16538 ;
  assign _0_CONCAT_x_11_83_84_MUL_0_CONCAT_y_11_85_86___d187 =
	     x__h16602 * y__h16603 ;
  assign _0_CONCAT_x_12_89_90_MUL_0_CONCAT_y_12_91_92___d193 =
	     x__h16667 * y__h16668 ;
  assign _0_CONCAT_x_13_95_96_MUL_0_CONCAT_y_13_97_98___d199 =
	     x__h16732 * y__h16733 ;
  assign _0_CONCAT_x_14_01_02_MUL_0_CONCAT_y_14_03_04___d205 =
	     x__h16797 * y__h16798 ;
  assign _0_CONCAT_x_15_07_08_MUL_0_CONCAT_y_15_09_10___d211 =
	     x__h16862 * y__h16863 ;
  assign _0_CONCAT_x_1_23_24_MUL_0_CONCAT_y_1_25_26___d127 =
	     x__h15952 * y__h15953 ;
  assign _0_CONCAT_x_2_29_30_MUL_0_CONCAT_y_2_31_32___d133 =
	     x__h16017 * y__h16018 ;
  assign _0_CONCAT_x_3_35_36_MUL_0_CONCAT_y_3_37_38___d139 =
	     x__h16082 * y__h16083 ;
  assign _0_CONCAT_x_4_41_42_MUL_0_CONCAT_y_4_43_44___d145 =
	     x__h16147 * y__h16148 ;
  assign _0_CONCAT_x_5_47_48_MUL_0_CONCAT_y_5_49_50___d151 =
	     x__h16212 * y__h16213 ;
  assign _0_CONCAT_x_6_53_54_MUL_0_CONCAT_y_6_55_56___d157 =
	     x__h16277 * y__h16278 ;
  assign _0_CONCAT_x_7_59_60_MUL_0_CONCAT_y_7_61_62___d163 =
	     x__h16342 * y__h16343 ;
  assign _0_CONCAT_x_8_65_66_MUL_0_CONCAT_y_8_67_68___d169 =
	     x__h16407 * y__h16408 ;
  assign _0_CONCAT_x_9_71_72_MUL_0_CONCAT_y_9_73_74___d175 =
	     x__h16472 * y__h16473 ;
  assign partial_product_3_34_BITS_15_TO_0_81_PLUS_0_CO_ETC___d299 =
	     { partial_product_3[15:0] + y__h18210,
	       partial_product_2[15:0] + y__h18263,
	       partial_product_1[15:0] + y__h18316,
	       partial_product_0[15:0] + y__h18369 } ;
  assign partial_product_5_36_BITS_15_TO_0_73_PLUS_0_CO_ETC___d300 =
	     { partial_product_5[15:0] + y__h18104,
	       partial_product_4[15:0] + y__h18157,
	       partial_product_3_34_BITS_15_TO_0_81_PLUS_0_CO_ETC___d299 } ;
  assign x7330_PLUS_y7331__q1 = x__h17330 + y__h17331 ;
  assign x7420_PLUS_y7421__q2 = x__h17420 + y__h17421 ;
  assign x7600_PLUS_y7601__q3 = x__h17600 + y__h17601 ;
  assign x7669_PLUS_y7670__q5 = x__h17669 + y__h17670 ;
  assign x7736_PLUS_y7737__q4 = x__h17736 + y__h17737 ;
  assign x__h15865 = { 16'd0, x_0 } ;
  assign x__h15952 = { 16'd0, x_1 } ;
  assign x__h16017 = { 16'd0, x_2 } ;
  assign x__h16082 = { 16'd0, x_3 } ;
  assign x__h16147 = { 16'd0, x_4 } ;
  assign x__h16212 = { 16'd0, x_5 } ;
  assign x__h16277 = { 16'd0, x_6 } ;
  assign x__h16342 = { 16'd0, x_7 } ;
  assign x__h16407 = { 16'd0, x_8 } ;
  assign x__h16472 = { 16'd0, x_9 } ;
  assign x__h16537 = { 16'd0, x_10 } ;
  assign x__h16602 = { 16'd0, x_11 } ;
  assign x__h16667 = { 16'd0, x_12 } ;
  assign x__h16732 = { 16'd0, x_13 } ;
  assign x__h16797 = { 16'd0, x_14 } ;
  assign x__h16862 = { 16'd0, x_15 } ;
  assign x__h17330 = { 96'd0, partial_product_1 } ;
  assign x__h17420 = { 96'd0, partial_product_13 } ;
  assign x__h17600 = { 96'd0, partial_product_3 } ;
  assign x__h17669 = { 96'd0, partial_product_10 } ;
  assign x__h17736 = x__h17738 + y__h17739 ;
  assign x__h17738 = x__h17740 + y__h17741 ;
  assign x__h17740 = { 96'd0, partial_product_6 } ;
  assign x__h17956 =
	     { partial_product_7[15:0] + y__h17991,
	       partial_product_6[15:0] + y__h18051,
	       partial_product_5_36_BITS_15_TO_0_73_PLUS_0_CO_ETC___d300 } ;
  assign x__h18448 =
	     { partial_product_3 + y__h18483,
	       partial_product_2 + y__h18520,
	       partial_product_1 + y__h18552,
	       partial_product_0 + y__h18584 } ;
  assign x__h18637 = { x__h18671 + y__h18672, x__h18774 + y__h18775 } ;
  assign x__h18671 = x__h18673 + partial_sum_3[63:0] ;
  assign x__h18673 = x__h18675 + partial_sum_1[63:0] ;
  assign x__h18675 = { 32'd0, partial_product_8 } ;
  assign x__h18774 = x__h18776 + partial_sum_2[63:0] ;
  assign x__h18776 = x__h18778 + partial_sum_0[63:0] ;
  assign x__h18778 = { 32'd0, partial_product_0 } ;
  assign x__h18891 = x__h19100 + y__h18926 ;
  assign x__h19100 = x__h19102 + y__h19103 ;
  assign x__h19102 = x__h19104 + y__h19105 ;
  assign x__h19104 = x__h19106 + y__h19107 ;
  assign x__h19106 = x__h19108 + y__h19109 ;
  assign x__h19108 = x__h19110 + partial_sum_5 ;
  assign x__h19110 = x__h19112 + y__h19113 ;
  assign x__h19112 = x__h19114 + partial_sum_2 ;
  assign x__h19114 = x__h19116 + partial_sum_0 ;
  assign x__h19116 = { 96'd0, partial_product_0 } ;
  assign x__h5433 = { 8'd0, m1[7:0] } ;
  assign x__h5497 = { 8'd0, m1[15:8] } ;
  assign x__h5561 = { 8'd0, m1[23:16] } ;
  assign x__h5625 = { 8'd0, m1[31:24] } ;
  assign x__h5689 = { 8'd0, m1[39:32] } ;
  assign x__h5753 = { 8'd0, m1[47:40] } ;
  assign x__h5817 = { 8'd0, m1[55:48] } ;
  assign x__h5881 = { 8'd0, m1[63:56] } ;
  assign x__h6906 = { 8'd0, m2[7:0] } ;
  assign x__h6970 = { 8'd0, m2[15:8] } ;
  assign x__h7034 = { 8'd0, m2[23:16] } ;
  assign x__h7098 = { 8'd0, m2[31:24] } ;
  assign x__h7162 = { 8'd0, m2[39:32] } ;
  assign x__h7226 = { 8'd0, m2[47:40] } ;
  assign x__h7290 = { 8'd0, m2[55:48] } ;
  assign x__h7354 = { 8'd0, m2[63:56] } ;
  assign y__h15866 = { 16'd0, y_0 } ;
  assign y__h15953 = { 16'd0, y_1 } ;
  assign y__h16018 = { 16'd0, y_2 } ;
  assign y__h16083 = { 16'd0, y_3 } ;
  assign y__h16148 = { 16'd0, y_4 } ;
  assign y__h16213 = { 16'd0, y_5 } ;
  assign y__h16278 = { 16'd0, y_6 } ;
  assign y__h16343 = { 16'd0, y_7 } ;
  assign y__h16408 = { 16'd0, y_8 } ;
  assign y__h16473 = { 16'd0, y_9 } ;
  assign y__h16538 = { 16'd0, y_10 } ;
  assign y__h16603 = { 16'd0, y_11 } ;
  assign y__h16668 = { 16'd0, y_12 } ;
  assign y__h16733 = { 16'd0, y_13 } ;
  assign y__h16798 = { 16'd0, y_14 } ;
  assign y__h16863 = { 16'd0, y_15 } ;
  assign y__h17331 = { 96'd0, partial_product_2 } ;
  assign y__h17421 = { 96'd0, partial_product_14 } ;
  assign y__h17601 = { 96'd0, partial_product_5 } ;
  assign y__h17670 = { 96'd0, partial_product_12 } ;
  assign y__h17737 = { 96'd0, partial_product_9 } ;
  assign y__h17739 = { 96'd0, partial_product_8 } ;
  assign y__h17741 = { 96'd0, partial_product_7 } ;
  assign y__h17991 = { 8'd0, a[63:56] } ;
  assign y__h18051 = { 8'd0, a[55:48] } ;
  assign y__h18104 = { 8'd0, a[47:40] } ;
  assign y__h18157 = { 8'd0, a[39:32] } ;
  assign y__h18210 = { 8'd0, a[31:24] } ;
  assign y__h18263 = { 8'd0, a[23:16] } ;
  assign y__h18316 = { 8'd0, a[15:8] } ;
  assign y__h18369 = { 8'd0, a[7:0] } ;
  assign y__h18483 = { 16'd0, a[63:48] } ;
  assign y__h18520 = { 16'd0, a[47:32] } ;
  assign y__h18552 = { 16'd0, a[31:16] } ;
  assign y__h18584 = { 16'd0, a[15:0] } ;
  assign y__h18672 = { 32'd0, a[63:32] } ;
  assign y__h18775 = { 32'd0, a[31:0] } ;
  assign y__h18926 = { 64'd0, a } ;
  assign y__h19103 = { partial_sum_3[63:0], 64'd0 } ;
  assign y__h19105 = { partial_sum_1[63:0], 64'd0 } ;
  assign y__h19107 = { partial_sum_6[79:0], 48'd0 } ;
  assign y__h19109 = { 32'd0, partial_product_11, 64'd0 } ;
  assign y__h19113 = { partial_sum_4[111:0], 16'd0 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 64'd0;
	counter <= `BSV_ASSIGNMENT_DELAY 4'd0;
	flag_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inp_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	m2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mac_output <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mac_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	partial_product_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_product_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	partial_sum_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_4 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_5 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_6 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	reg_mode <= `BSV_ASSIGNMENT_DELAY 2'd0;
	x_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_10 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_11 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_12 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_13 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_14 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_15 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	x_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_10 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_11 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_12 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_13 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_14 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_15 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	y_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (a$EN) a <= `BSV_ASSIGNMENT_DELAY a$D_IN;
	if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
	if (flag_0$EN) flag_0 <= `BSV_ASSIGNMENT_DELAY flag_0$D_IN;
	if (flag_1$EN) flag_1 <= `BSV_ASSIGNMENT_DELAY flag_1$D_IN;
	if (flag_2$EN) flag_2 <= `BSV_ASSIGNMENT_DELAY flag_2$D_IN;
	if (flag_3$EN) flag_3 <= `BSV_ASSIGNMENT_DELAY flag_3$D_IN;
	if (flag_4$EN) flag_4 <= `BSV_ASSIGNMENT_DELAY flag_4$D_IN;
	if (inp_ready$EN) inp_ready <= `BSV_ASSIGNMENT_DELAY inp_ready$D_IN;
	if (m1$EN) m1 <= `BSV_ASSIGNMENT_DELAY m1$D_IN;
	if (m2$EN) m2 <= `BSV_ASSIGNMENT_DELAY m2$D_IN;
	if (mac_output$EN)
	  mac_output <= `BSV_ASSIGNMENT_DELAY mac_output$D_IN;
	if (mac_ready$EN) mac_ready <= `BSV_ASSIGNMENT_DELAY mac_ready$D_IN;
	if (partial_product_0$EN)
	  partial_product_0 <= `BSV_ASSIGNMENT_DELAY partial_product_0$D_IN;
	if (partial_product_1$EN)
	  partial_product_1 <= `BSV_ASSIGNMENT_DELAY partial_product_1$D_IN;
	if (partial_product_10$EN)
	  partial_product_10 <= `BSV_ASSIGNMENT_DELAY partial_product_10$D_IN;
	if (partial_product_11$EN)
	  partial_product_11 <= `BSV_ASSIGNMENT_DELAY partial_product_11$D_IN;
	if (partial_product_12$EN)
	  partial_product_12 <= `BSV_ASSIGNMENT_DELAY partial_product_12$D_IN;
	if (partial_product_13$EN)
	  partial_product_13 <= `BSV_ASSIGNMENT_DELAY partial_product_13$D_IN;
	if (partial_product_14$EN)
	  partial_product_14 <= `BSV_ASSIGNMENT_DELAY partial_product_14$D_IN;
	if (partial_product_15$EN)
	  partial_product_15 <= `BSV_ASSIGNMENT_DELAY partial_product_15$D_IN;
	if (partial_product_2$EN)
	  partial_product_2 <= `BSV_ASSIGNMENT_DELAY partial_product_2$D_IN;
	if (partial_product_3$EN)
	  partial_product_3 <= `BSV_ASSIGNMENT_DELAY partial_product_3$D_IN;
	if (partial_product_4$EN)
	  partial_product_4 <= `BSV_ASSIGNMENT_DELAY partial_product_4$D_IN;
	if (partial_product_5$EN)
	  partial_product_5 <= `BSV_ASSIGNMENT_DELAY partial_product_5$D_IN;
	if (partial_product_6$EN)
	  partial_product_6 <= `BSV_ASSIGNMENT_DELAY partial_product_6$D_IN;
	if (partial_product_7$EN)
	  partial_product_7 <= `BSV_ASSIGNMENT_DELAY partial_product_7$D_IN;
	if (partial_product_8$EN)
	  partial_product_8 <= `BSV_ASSIGNMENT_DELAY partial_product_8$D_IN;
	if (partial_product_9$EN)
	  partial_product_9 <= `BSV_ASSIGNMENT_DELAY partial_product_9$D_IN;
	if (partial_sum_0$EN)
	  partial_sum_0 <= `BSV_ASSIGNMENT_DELAY partial_sum_0$D_IN;
	if (partial_sum_1$EN)
	  partial_sum_1 <= `BSV_ASSIGNMENT_DELAY partial_sum_1$D_IN;
	if (partial_sum_2$EN)
	  partial_sum_2 <= `BSV_ASSIGNMENT_DELAY partial_sum_2$D_IN;
	if (partial_sum_3$EN)
	  partial_sum_3 <= `BSV_ASSIGNMENT_DELAY partial_sum_3$D_IN;
	if (partial_sum_4$EN)
	  partial_sum_4 <= `BSV_ASSIGNMENT_DELAY partial_sum_4$D_IN;
	if (partial_sum_5$EN)
	  partial_sum_5 <= `BSV_ASSIGNMENT_DELAY partial_sum_5$D_IN;
	if (partial_sum_6$EN)
	  partial_sum_6 <= `BSV_ASSIGNMENT_DELAY partial_sum_6$D_IN;
	if (reg_mode$EN) reg_mode <= `BSV_ASSIGNMENT_DELAY reg_mode$D_IN;
	if (x_0$EN) x_0 <= `BSV_ASSIGNMENT_DELAY x_0$D_IN;
	if (x_1$EN) x_1 <= `BSV_ASSIGNMENT_DELAY x_1$D_IN;
	if (x_10$EN) x_10 <= `BSV_ASSIGNMENT_DELAY x_10$D_IN;
	if (x_11$EN) x_11 <= `BSV_ASSIGNMENT_DELAY x_11$D_IN;
	if (x_12$EN) x_12 <= `BSV_ASSIGNMENT_DELAY x_12$D_IN;
	if (x_13$EN) x_13 <= `BSV_ASSIGNMENT_DELAY x_13$D_IN;
	if (x_14$EN) x_14 <= `BSV_ASSIGNMENT_DELAY x_14$D_IN;
	if (x_15$EN) x_15 <= `BSV_ASSIGNMENT_DELAY x_15$D_IN;
	if (x_2$EN) x_2 <= `BSV_ASSIGNMENT_DELAY x_2$D_IN;
	if (x_3$EN) x_3 <= `BSV_ASSIGNMENT_DELAY x_3$D_IN;
	if (x_4$EN) x_4 <= `BSV_ASSIGNMENT_DELAY x_4$D_IN;
	if (x_5$EN) x_5 <= `BSV_ASSIGNMENT_DELAY x_5$D_IN;
	if (x_6$EN) x_6 <= `BSV_ASSIGNMENT_DELAY x_6$D_IN;
	if (x_7$EN) x_7 <= `BSV_ASSIGNMENT_DELAY x_7$D_IN;
	if (x_8$EN) x_8 <= `BSV_ASSIGNMENT_DELAY x_8$D_IN;
	if (x_9$EN) x_9 <= `BSV_ASSIGNMENT_DELAY x_9$D_IN;
	if (y_0$EN) y_0 <= `BSV_ASSIGNMENT_DELAY y_0$D_IN;
	if (y_1$EN) y_1 <= `BSV_ASSIGNMENT_DELAY y_1$D_IN;
	if (y_10$EN) y_10 <= `BSV_ASSIGNMENT_DELAY y_10$D_IN;
	if (y_11$EN) y_11 <= `BSV_ASSIGNMENT_DELAY y_11$D_IN;
	if (y_12$EN) y_12 <= `BSV_ASSIGNMENT_DELAY y_12$D_IN;
	if (y_13$EN) y_13 <= `BSV_ASSIGNMENT_DELAY y_13$D_IN;
	if (y_14$EN) y_14 <= `BSV_ASSIGNMENT_DELAY y_14$D_IN;
	if (y_15$EN) y_15 <= `BSV_ASSIGNMENT_DELAY y_15$D_IN;
	if (y_2$EN) y_2 <= `BSV_ASSIGNMENT_DELAY y_2$D_IN;
	if (y_3$EN) y_3 <= `BSV_ASSIGNMENT_DELAY y_3$D_IN;
	if (y_4$EN) y_4 <= `BSV_ASSIGNMENT_DELAY y_4$D_IN;
	if (y_5$EN) y_5 <= `BSV_ASSIGNMENT_DELAY y_5$D_IN;
	if (y_6$EN) y_6 <= `BSV_ASSIGNMENT_DELAY y_6$D_IN;
	if (y_7$EN) y_7 <= `BSV_ASSIGNMENT_DELAY y_7$D_IN;
	if (y_8$EN) y_8 <= `BSV_ASSIGNMENT_DELAY y_8$D_IN;
	if (y_9$EN) y_9 <= `BSV_ASSIGNMENT_DELAY y_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 64'hAAAAAAAAAAAAAAAA;
    counter = 4'hA;
    flag_0 = 1'h0;
    flag_1 = 1'h0;
    flag_2 = 1'h0;
    flag_3 = 1'h0;
    flag_4 = 1'h0;
    inp_ready = 1'h0;
    m1 = 64'hAAAAAAAAAAAAAAAA;
    m2 = 64'hAAAAAAAAAAAAAAAA;
    mac_output = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_ready = 1'h0;
    partial_product_0 = 32'hAAAAAAAA;
    partial_product_1 = 32'hAAAAAAAA;
    partial_product_10 = 32'hAAAAAAAA;
    partial_product_11 = 32'hAAAAAAAA;
    partial_product_12 = 32'hAAAAAAAA;
    partial_product_13 = 32'hAAAAAAAA;
    partial_product_14 = 32'hAAAAAAAA;
    partial_product_15 = 32'hAAAAAAAA;
    partial_product_2 = 32'hAAAAAAAA;
    partial_product_3 = 32'hAAAAAAAA;
    partial_product_4 = 32'hAAAAAAAA;
    partial_product_5 = 32'hAAAAAAAA;
    partial_product_6 = 32'hAAAAAAAA;
    partial_product_7 = 32'hAAAAAAAA;
    partial_product_8 = 32'hAAAAAAAA;
    partial_product_9 = 32'hAAAAAAAA;
    partial_sum_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_4 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_5 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_6 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    reg_mode = 2'h2;
    x_0 = 16'hAAAA;
    x_1 = 16'hAAAA;
    x_10 = 16'hAAAA;
    x_11 = 16'hAAAA;
    x_12 = 16'hAAAA;
    x_13 = 16'hAAAA;
    x_14 = 16'hAAAA;
    x_15 = 16'hAAAA;
    x_2 = 16'hAAAA;
    x_3 = 16'hAAAA;
    x_4 = 16'hAAAA;
    x_5 = 16'hAAAA;
    x_6 = 16'hAAAA;
    x_7 = 16'hAAAA;
    x_8 = 16'hAAAA;
    x_9 = 16'hAAAA;
    y_0 = 16'hAAAA;
    y_1 = 16'hAAAA;
    y_10 = 16'hAAAA;
    y_11 = 16'hAAAA;
    y_12 = 16'hAAAA;
    y_13 = 16'hAAAA;
    y_14 = 16'hAAAA;
    y_15 = 16'hAAAA;
    y_2 = 16'hAAAA;
    y_3 = 16'hAAAA;
    y_4 = 16'hAAAA;
    y_5 = 16'hAAAA;
    y_6 = 16'hAAAA;
    y_7 = 16'hAAAA;
    y_8 = 16'hAAAA;
    y_9 = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC

