/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Thu May  4 22:04:10 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTestbench.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTestbench::MODEL_mkTestbench()
{
  mkTestbench_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTestbench()
{
  MODEL_mkTestbench *model = new MODEL_mkTestbench();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTestbench &INST_top = *((MOD_mkTestbench *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_pipe2_rv_port0__read__2_BIT_32___d23;
	 INST_top.DEF_CAN_FIRE_RL_cycle_count = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_cycle_count = INST_top.DEF_CAN_FIRE_RL_cycle_count;
	 INST_top.DEF_pipe2_rv_port0__read____d22 = INST_top.INST_pipe2_rv.METH_port0__read();
	 DEF_INST_top_DEF_pipe2_rv_port0__read__2_BIT_32___d23 = (tUInt8)((INST_top.DEF_pipe2_rv_port0__read____d22) >> 32u);
	 INST_top.DEF_CAN_FIRE_RL_rl_dummy_print2 = !DEF_INST_top_DEF_pipe2_rv_port0__read__2_BIT_32___d23;
	 INST_top.DEF_WILL_FIRE_RL_rl_dummy_print2 = INST_top.DEF_CAN_FIRE_RL_rl_dummy_print2;
	 INST_top.DEF_x__h683 = INST_top.INST_rg_cnt.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_finish = (INST_top.DEF_x__h683) == (tUInt8)6u;
	 INST_top.DEF_WILL_FIRE_RL_rl_finish = INST_top.DEF_CAN_FIRE_RL_rl_finish;
	 INST_top.DEF_CAN_FIRE_RL_rl_stage2 = DEF_INST_top_DEF_pipe2_rv_port0__read__2_BIT_32___d23;
	 INST_top.DEF_WILL_FIRE_RL_rl_stage2 = INST_top.DEF_CAN_FIRE_RL_rl_stage2;
	 if (INST_top.DEF_WILL_FIRE_RL_rl_dummy_print2)
	   INST_top.RL_rl_dummy_print2();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_stage2)
	   INST_top.RL_rl_stage2();
	 INST_top.DEF_pipe1_rv_port0__read____d11 = INST_top.INST_pipe1_rv.METH_port0__read();
	 INST_top.DEF_CAN_FIRE_RL_rl_stage1 = (tUInt8)((INST_top.DEF_pipe1_rv_port0__read____d11) >> 32u) && !((tUInt8)(INST_top.INST_pipe2_rv.METH_port1__read() >> 32u));
	 INST_top.DEF_WILL_FIRE_RL_rl_stage1 = INST_top.DEF_CAN_FIRE_RL_rl_stage1;
	 if (INST_top.DEF_WILL_FIRE_RL_rl_stage1)
	   INST_top.RL_rl_stage1();
	 INST_top.DEF_CAN_FIRE_RL_rl_give_inputs = !((tUInt8)(INST_top.INST_pipe1_rv.METH_port1__read() >> 32u)) && (INST_top.DEF_x__h683) < (tUInt8)6u;
	 INST_top.DEF_WILL_FIRE_RL_rl_give_inputs = INST_top.DEF_CAN_FIRE_RL_rl_give_inputs;
	 if (INST_top.DEF_WILL_FIRE_RL_rl_finish)
	   INST_top.RL_rl_finish();
	 if (INST_top.DEF_WILL_FIRE_RL_cycle_count)
	   INST_top.RL_cycle_count();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_give_inputs)
	   INST_top.RL_rl_give_inputs();
	 INST_top.INST_pipe2_rv.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_pipe1_rv.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_pipe1_rv.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_pipe2_rv.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_rg_cnt.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_counter.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTestbench::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTestbench_instance = new MOD_mkTestbench(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTestbench_instance->INST_pipe1_rv.set_clk_0)("CLK");
  (mkTestbench_instance->INST_pipe2_rv.set_clk_0)("CLK");
  (mkTestbench_instance->set_clk_0)("CLK");
}
void MODEL_mkTestbench::destroy_model()
{
  delete mkTestbench_instance;
  mkTestbench_instance = NULL;
}
void MODEL_mkTestbench::reset_model(bool asserted)
{
  (mkTestbench_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTestbench::get_instance()
{
  return mkTestbench_instance;
}

/* Fill in version numbers */
void MODEL_mkTestbench::get_version(char const **name, char const **build)
{
  *name = "2021.12.1";
  *build = "fd501401";
}

/* Get the model creation time */
time_t MODEL_mkTestbench::get_creation_time()
{
  
  /* Thu May  4 16:34:10 UTC 2023 */
  return 1683218050llu;
}

/* State dumping function */
void MODEL_mkTestbench::dump_state()
{
  (mkTestbench_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTestbench & mkTestbench_backing(tSimStateHdl simHdl)
{
  static MOD_mkTestbench *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTestbench(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTestbench::dump_VCD_defs()
{
  (mkTestbench_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTestbench::dump_VCD(tVCDDumpType dt)
{
  (mkTestbench_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTestbench_backing(sim_hdl));
}
