//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Tue May  9 19:38:16 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_inputs                 O     1
// mac_result                     O   128
// RDY_mac_result                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_inputs_multiplicand1       I    64
// get_inputs_multiplicand2       I    64
// get_inputs_addend              I    64
// EN_get_inputs                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC64(CLK,
	       RST_N,

	       get_inputs_multiplicand1,
	       get_inputs_multiplicand2,
	       get_inputs_addend,
	       EN_get_inputs,
	       RDY_get_inputs,

	       mac_result,
	       RDY_mac_result);
  input  CLK;
  input  RST_N;

  // action method get_inputs
  input  [63 : 0] get_inputs_multiplicand1;
  input  [63 : 0] get_inputs_multiplicand2;
  input  [63 : 0] get_inputs_addend;
  input  EN_get_inputs;
  output RDY_get_inputs;

  // value method mac_result
  output [127 : 0] mac_result;
  output RDY_mac_result;

  // signals for module outputs
  wire [127 : 0] mac_result;
  wire RDY_get_inputs, RDY_mac_result;

  // inlined wires
  wire [704 : 0] partial_sum_rv$port1__read,
		 partial_sum_rv$port1__write_1,
		 partial_sum_rv$port2__read;
  wire [576 : 0] partial_product_rv$port1__read,
		 partial_product_rv$port1__write_1,
		 partial_product_rv$port2__read;
  wire [192 : 0] mac_inputs_rv$port1__read,
		 mac_inputs_rv$port1__write_1,
		 mac_inputs_rv$port2__read;
  wire [128 : 0] mac_output_rv$port1__write_1, mac_output_rv$port2__read;

  // register mac_inputs_rv
  reg [192 : 0] mac_inputs_rv;
  wire [192 : 0] mac_inputs_rv$D_IN;
  wire mac_inputs_rv$EN;

  // register mac_output_rv
  reg [128 : 0] mac_output_rv;
  wire [128 : 0] mac_output_rv$D_IN;
  wire mac_output_rv$EN;

  // register partial_product_rv
  reg [576 : 0] partial_product_rv;
  wire [576 : 0] partial_product_rv$D_IN;
  wire partial_product_rv$EN;

  // register partial_sum_rv
  reg [704 : 0] partial_sum_rv;
  wire [704 : 0] partial_sum_rv$D_IN;
  wire partial_sum_rv$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_generate_partials,
       CAN_FIRE_RL_rl_mac_64_1,
       CAN_FIRE_RL_rl_mac_64_2,
       CAN_FIRE_get_inputs,
       WILL_FIRE_RL_rl_generate_partials,
       WILL_FIRE_RL_rl_mac_64_1,
       WILL_FIRE_RL_rl_mac_64_2,
       WILL_FIRE_get_inputs;

  // remaining internal signals
  wire [127 : 0] x292_PLUS_y293__q1,
		 x374_PLUS_y375__q2,
		 x387_PLUS_y388__q4,
		 x496_PLUS_y497__q3,
		 x922_PLUS_y923__q5,
		 x__h3804,
		 x__h3830,
		 x__h3832,
		 x__h3834,
		 x__h4292,
		 x__h4374,
		 x__h4376,
		 x__h4496,
		 x__h4498,
		 x__h4500,
		 x__h6369,
		 x__h6370,
		 x__h6372,
		 x__h6374,
		 x__h6387,
		 x__h6389,
		 x__h6922,
		 y__h3831,
		 y__h3833,
		 y__h3835,
		 y__h4293,
		 y__h4375,
		 y__h4377,
		 y__h4497,
		 y__h4499,
		 y__h4501,
		 y__h6371,
		 y__h6373,
		 y__h6375,
		 y__h6388,
		 y__h6390,
		 y__h6923;
  wire [63 : 0] _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d45,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d53,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d58,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d60,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d31,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d41,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d50,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d55,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d20,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d27,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d38,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d48,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d11,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d15,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d24,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d36;

  // action method get_inputs
  assign RDY_get_inputs = !mac_inputs_rv$port1__read[192] ;
  assign CAN_FIRE_get_inputs = !mac_inputs_rv$port1__read[192] ;
  assign WILL_FIRE_get_inputs = EN_get_inputs ;

  // value method mac_result
  assign mac_result = mac_output_rv[127:0] ;
  assign RDY_mac_result = mac_output_rv[128] ;

  // rule RL_rl_mac_64_2
  assign CAN_FIRE_RL_rl_mac_64_2 =
	     partial_sum_rv[704] && !mac_output_rv[128] ;
  assign WILL_FIRE_RL_rl_mac_64_2 = CAN_FIRE_RL_rl_mac_64_2 ;

  // rule RL_rl_mac_64_1
  assign CAN_FIRE_RL_rl_mac_64_1 =
	     partial_product_rv[576] && !partial_sum_rv$port1__read[704] ;
  assign WILL_FIRE_RL_rl_mac_64_1 = CAN_FIRE_RL_rl_mac_64_1 ;

  // rule RL_rl_generate_partials
  assign CAN_FIRE_RL_rl_generate_partials =
	     mac_inputs_rv[192] && !partial_product_rv$port1__read[576] ;
  assign WILL_FIRE_RL_rl_generate_partials =
	     CAN_FIRE_RL_rl_generate_partials ;

  // inlined wires
  assign mac_inputs_rv$port1__read =
	     CAN_FIRE_RL_rl_generate_partials ?
	       193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       mac_inputs_rv ;
  assign mac_inputs_rv$port1__write_1 =
	     { 1'd1,
	       get_inputs_multiplicand1,
	       get_inputs_multiplicand2,
	       get_inputs_addend } ;
  assign mac_inputs_rv$port2__read =
	     EN_get_inputs ?
	       mac_inputs_rv$port1__write_1 :
	       mac_inputs_rv$port1__read ;
  assign partial_product_rv$port1__read =
	     CAN_FIRE_RL_rl_mac_64_1 ?
	       577'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       partial_product_rv ;
  assign partial_product_rv$port1__write_1 =
	     { 1'd1,
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d11[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d15[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d20[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d24[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d27[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d31[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d36[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d38[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d41[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d45[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d48[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d50[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d53[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d55[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d58[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d60[31:0],
	       mac_inputs_rv[63:0] } ;
  assign partial_product_rv$port2__read =
	     CAN_FIRE_RL_rl_generate_partials ?
	       partial_product_rv$port1__write_1 :
	       partial_product_rv$port1__read ;
  assign partial_sum_rv$port1__read =
	     CAN_FIRE_RL_rl_mac_64_2 ?
	       705'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       partial_sum_rv ;
  assign partial_sum_rv$port1__write_1 =
	     { 1'd1, x__h3804, partial_product_rv[575:0] } ;
  assign partial_sum_rv$port2__read =
	     CAN_FIRE_RL_rl_mac_64_1 ?
	       partial_sum_rv$port1__write_1 :
	       partial_sum_rv$port1__read ;
  assign mac_output_rv$port1__write_1 =
	     { 1'd1, x__h6369 + partial_sum_rv[703:576] } ;
  assign mac_output_rv$port2__read =
	     CAN_FIRE_RL_rl_mac_64_2 ?
	       mac_output_rv$port1__write_1 :
	       mac_output_rv ;

  // register mac_inputs_rv
  assign mac_inputs_rv$D_IN = mac_inputs_rv$port2__read ;
  assign mac_inputs_rv$EN = 1'b1 ;

  // register mac_output_rv
  assign mac_output_rv$D_IN = mac_output_rv$port2__read ;
  assign mac_output_rv$EN = 1'b1 ;

  // register partial_product_rv
  assign partial_product_rv$D_IN = partial_product_rv$port2__read ;
  assign partial_product_rv$EN = 1'b1 ;

  // register partial_sum_rv
  assign partial_sum_rv$D_IN = partial_sum_rv$port2__read ;
  assign partial_sum_rv$EN = 1'b1 ;

  // remaining internal signals
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d45 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d53 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d58 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d60 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d31 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d41 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d50 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d55 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d20 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d27 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d38 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d48 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d11 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d15 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d24 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d36 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign x292_PLUS_y293__q1 = x__h4292 + y__h4293 ;
  assign x374_PLUS_y375__q2 = x__h4374 + y__h4375 ;
  assign x387_PLUS_y388__q4 = x__h6387 + y__h6388 ;
  assign x496_PLUS_y497__q3 = x__h4496 + y__h4497 ;
  assign x922_PLUS_y923__q5 = x__h6922 + y__h6923 ;
  assign x__h3804 = x__h3830 + y__h3831 ;
  assign x__h3830 = x__h3832 + y__h3833 ;
  assign x__h3832 = x__h3834 + y__h3835 ;
  assign x__h3834 = { 96'd0, partial_product_rv[95:64] } ;
  assign x__h4292 = { 96'd0, partial_product_rv[127:96] } ;
  assign x__h4374 = x__h4376 + y__h4377 ;
  assign x__h4376 = { 96'd0, partial_product_rv[191:160] } ;
  assign x__h4496 = x__h4498 + y__h4499 ;
  assign x__h4498 = x__h4500 + y__h4501 ;
  assign x__h4500 = { 96'd0, partial_product_rv[287:256] } ;
  assign x__h6369 = x__h6370 + y__h6371 ;
  assign x__h6370 = x__h6372 + y__h6373 ;
  assign x__h6372 = x__h6374 + y__h6375 ;
  assign x__h6374 = { x387_PLUS_y388__q4[63:0], 64'd0 } ;
  assign x__h6387 = x__h6389 + y__h6390 ;
  assign x__h6389 = { 96'd0, partial_sum_rv[415:384] } ;
  assign x__h6922 = { 96'd0, partial_sum_rv[511:480] } ;
  assign y__h3831 = { x496_PLUS_y497__q3[79:0], 48'd0 } ;
  assign y__h3833 = { x374_PLUS_y375__q2[95:0], 32'd0 } ;
  assign y__h3835 = { x292_PLUS_y293__q1[111:0], 16'd0 } ;
  assign y__h4293 = { 96'd0, partial_product_rv[159:128] } ;
  assign y__h4375 = { 96'd0, partial_product_rv[255:224] } ;
  assign y__h4377 = { 96'd0, partial_product_rv[223:192] } ;
  assign y__h4497 = { 96'd0, partial_product_rv[383:352] } ;
  assign y__h4499 = { 96'd0, partial_product_rv[351:320] } ;
  assign y__h4501 = { 96'd0, partial_product_rv[319:288] } ;
  assign y__h6371 = { 64'd0, partial_sum_rv[63:0] } ;
  assign y__h6373 = { partial_sum_rv[575:544], 96'd0 } ;
  assign y__h6375 = { x922_PLUS_y923__q5[47:0], 80'd0 } ;
  assign y__h6388 = { 96'd0, partial_sum_rv[479:448] } ;
  assign y__h6390 = { 96'd0, partial_sum_rv[447:416] } ;
  assign y__h6923 = { 96'd0, partial_sum_rv[543:512] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        mac_inputs_rv <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	mac_output_rv <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	partial_product_rv <= `BSV_ASSIGNMENT_DELAY
	    577'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	partial_sum_rv <= `BSV_ASSIGNMENT_DELAY
	    705'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (mac_inputs_rv$EN)
	  mac_inputs_rv <= `BSV_ASSIGNMENT_DELAY mac_inputs_rv$D_IN;
	if (mac_output_rv$EN)
	  mac_output_rv <= `BSV_ASSIGNMENT_DELAY mac_output_rv$D_IN;
	if (partial_product_rv$EN)
	  partial_product_rv <= `BSV_ASSIGNMENT_DELAY partial_product_rv$D_IN;
	if (partial_sum_rv$EN)
	  partial_sum_rv <= `BSV_ASSIGNMENT_DELAY partial_sum_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    mac_inputs_rv = 193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_rv = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_rv =
	577'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_rv =
	705'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC64

