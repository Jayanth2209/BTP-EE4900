//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Tue Apr  4 14:55:46 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_values                 O     1 const
// mac_result                     O   128
// RDY_mac_result                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_values_multiplicand1       I    64
// get_values_multiplicand2       I    64
// get_values_addend              I    64
// get_values_mode                I     2
// EN_get_values                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC(CLK,
	     RST_N,

	     get_values_multiplicand1,
	     get_values_multiplicand2,
	     get_values_addend,
	     get_values_mode,
	     EN_get_values,
	     RDY_get_values,

	     mac_result,
	     RDY_mac_result);
  input  CLK;
  input  RST_N;

  // action method get_values
  input  [63 : 0] get_values_multiplicand1;
  input  [63 : 0] get_values_multiplicand2;
  input  [63 : 0] get_values_addend;
  input  [1 : 0] get_values_mode;
  input  EN_get_values;
  output RDY_get_values;

  // value method mac_result
  output [127 : 0] mac_result;
  output RDY_mac_result;

  // signals for module outputs
  reg [127 : 0] mac_result;
  wire RDY_get_values, RDY_mac_result;

  // register a
  reg [63 : 0] a;
  wire [63 : 0] a$D_IN;
  wire a$EN;

  // register flag_0
  reg flag_0;
  wire flag_0$D_IN, flag_0$EN;

  // register flag_1
  reg flag_1;
  wire flag_1$D_IN, flag_1$EN;

  // register flag_2
  reg flag_2;
  wire flag_2$D_IN, flag_2$EN;

  // register flag_3
  reg flag_3;
  wire flag_3$D_IN, flag_3$EN;

  // register inp_ready
  reg inp_ready;
  wire inp_ready$D_IN, inp_ready$EN;

  // register m1
  reg [63 : 0] m1;
  wire [63 : 0] m1$D_IN;
  wire m1$EN;

  // register m2
  reg [63 : 0] m2;
  wire [63 : 0] m2$D_IN;
  wire m2$EN;

  // register mac_output_0
  reg [127 : 0] mac_output_0;
  wire [127 : 0] mac_output_0$D_IN;
  wire mac_output_0$EN;

  // register mac_output_1
  reg [127 : 0] mac_output_1;
  wire [127 : 0] mac_output_1$D_IN;
  wire mac_output_1$EN;

  // register mac_output_2
  reg [127 : 0] mac_output_2;
  wire [127 : 0] mac_output_2$D_IN;
  wire mac_output_2$EN;

  // register mac_output_3
  reg [127 : 0] mac_output_3;
  wire [127 : 0] mac_output_3$D_IN;
  wire mac_output_3$EN;

  // register mac_ready
  reg mac_ready;
  wire mac_ready$D_IN, mac_ready$EN;

  // register p_20_1_0
  reg [15 : 0] p_20_1_0;
  wire [15 : 0] p_20_1_0$D_IN;
  wire p_20_1_0$EN;

  // register p_20_1_1
  reg [15 : 0] p_20_1_1;
  wire [15 : 0] p_20_1_1$D_IN;
  wire p_20_1_1$EN;

  // register p_20_1_2
  reg [15 : 0] p_20_1_2;
  wire [15 : 0] p_20_1_2$D_IN;
  wire p_20_1_2$EN;

  // register p_20_1_3
  reg [15 : 0] p_20_1_3;
  wire [15 : 0] p_20_1_3$D_IN;
  wire p_20_1_3$EN;

  // register p_20_1_4
  reg [15 : 0] p_20_1_4;
  wire [15 : 0] p_20_1_4$D_IN;
  wire p_20_1_4$EN;

  // register p_20_1_5
  reg [15 : 0] p_20_1_5;
  wire [15 : 0] p_20_1_5$D_IN;
  wire p_20_1_5$EN;

  // register p_20_1_6
  reg [15 : 0] p_20_1_6;
  wire [15 : 0] p_20_1_6$D_IN;
  wire p_20_1_6$EN;

  // register p_20_1_7
  reg [15 : 0] p_20_1_7;
  wire [15 : 0] p_20_1_7$D_IN;
  wire p_20_1_7$EN;

  // register p_21_1_0
  reg [15 : 0] p_21_1_0;
  wire [15 : 0] p_21_1_0$D_IN;
  wire p_21_1_0$EN;

  // register p_21_1_1
  reg [15 : 0] p_21_1_1;
  wire [15 : 0] p_21_1_1$D_IN;
  wire p_21_1_1$EN;

  // register p_21_1_2
  reg [15 : 0] p_21_1_2;
  wire [15 : 0] p_21_1_2$D_IN;
  wire p_21_1_2$EN;

  // register p_21_1_3
  reg [15 : 0] p_21_1_3;
  wire [15 : 0] p_21_1_3$D_IN;
  wire p_21_1_3$EN;

  // register p_21_1_4
  reg [15 : 0] p_21_1_4;
  wire [15 : 0] p_21_1_4$D_IN;
  wire p_21_1_4$EN;

  // register p_21_1_5
  reg [15 : 0] p_21_1_5;
  wire [15 : 0] p_21_1_5$D_IN;
  wire p_21_1_5$EN;

  // register p_21_1_6
  reg [15 : 0] p_21_1_6;
  wire [15 : 0] p_21_1_6$D_IN;
  wire p_21_1_6$EN;

  // register p_21_1_7
  reg [15 : 0] p_21_1_7;
  wire [15 : 0] p_21_1_7$D_IN;
  wire p_21_1_7$EN;

  // register p_22_1_0
  reg [15 : 0] p_22_1_0;
  wire [15 : 0] p_22_1_0$D_IN;
  wire p_22_1_0$EN;

  // register p_22_1_1
  reg [15 : 0] p_22_1_1;
  wire [15 : 0] p_22_1_1$D_IN;
  wire p_22_1_1$EN;

  // register p_22_1_2
  reg [15 : 0] p_22_1_2;
  wire [15 : 0] p_22_1_2$D_IN;
  wire p_22_1_2$EN;

  // register p_22_1_3
  reg [15 : 0] p_22_1_3;
  wire [15 : 0] p_22_1_3$D_IN;
  wire p_22_1_3$EN;

  // register p_22_1_4
  reg [15 : 0] p_22_1_4;
  wire [15 : 0] p_22_1_4$D_IN;
  wire p_22_1_4$EN;

  // register p_22_1_5
  reg [15 : 0] p_22_1_5;
  wire [15 : 0] p_22_1_5$D_IN;
  wire p_22_1_5$EN;

  // register p_22_1_6
  reg [15 : 0] p_22_1_6;
  wire [15 : 0] p_22_1_6$D_IN;
  wire p_22_1_6$EN;

  // register p_22_1_7
  reg [15 : 0] p_22_1_7;
  wire [15 : 0] p_22_1_7$D_IN;
  wire p_22_1_7$EN;

  // register p_23_1_0
  reg [15 : 0] p_23_1_0;
  wire [15 : 0] p_23_1_0$D_IN;
  wire p_23_1_0$EN;

  // register p_23_1_1
  reg [15 : 0] p_23_1_1;
  wire [15 : 0] p_23_1_1$D_IN;
  wire p_23_1_1$EN;

  // register p_23_1_2
  reg [15 : 0] p_23_1_2;
  wire [15 : 0] p_23_1_2$D_IN;
  wire p_23_1_2$EN;

  // register p_23_1_3
  reg [15 : 0] p_23_1_3;
  wire [15 : 0] p_23_1_3$D_IN;
  wire p_23_1_3$EN;

  // register p_23_1_4
  reg [15 : 0] p_23_1_4;
  wire [15 : 0] p_23_1_4$D_IN;
  wire p_23_1_4$EN;

  // register p_23_1_5
  reg [15 : 0] p_23_1_5;
  wire [15 : 0] p_23_1_5$D_IN;
  wire p_23_1_5$EN;

  // register p_23_1_6
  reg [15 : 0] p_23_1_6;
  wire [15 : 0] p_23_1_6$D_IN;
  wire p_23_1_6$EN;

  // register p_23_1_7
  reg [15 : 0] p_23_1_7;
  wire [15 : 0] p_23_1_7$D_IN;
  wire p_23_1_7$EN;

  // register p_24_1_0
  reg [15 : 0] p_24_1_0;
  wire [15 : 0] p_24_1_0$D_IN;
  wire p_24_1_0$EN;

  // register p_24_1_1
  reg [15 : 0] p_24_1_1;
  wire [15 : 0] p_24_1_1$D_IN;
  wire p_24_1_1$EN;

  // register p_24_1_2
  reg [15 : 0] p_24_1_2;
  wire [15 : 0] p_24_1_2$D_IN;
  wire p_24_1_2$EN;

  // register p_24_1_3
  reg [15 : 0] p_24_1_3;
  wire [15 : 0] p_24_1_3$D_IN;
  wire p_24_1_3$EN;

  // register p_24_1_4
  reg [15 : 0] p_24_1_4;
  wire [15 : 0] p_24_1_4$D_IN;
  wire p_24_1_4$EN;

  // register p_24_1_5
  reg [15 : 0] p_24_1_5;
  wire [15 : 0] p_24_1_5$D_IN;
  wire p_24_1_5$EN;

  // register p_24_1_6
  reg [15 : 0] p_24_1_6;
  wire [15 : 0] p_24_1_6$D_IN;
  wire p_24_1_6$EN;

  // register p_24_1_7
  reg [15 : 0] p_24_1_7;
  wire [15 : 0] p_24_1_7$D_IN;
  wire p_24_1_7$EN;

  // register p_25_1_0
  reg [15 : 0] p_25_1_0;
  wire [15 : 0] p_25_1_0$D_IN;
  wire p_25_1_0$EN;

  // register p_25_1_1
  reg [15 : 0] p_25_1_1;
  wire [15 : 0] p_25_1_1$D_IN;
  wire p_25_1_1$EN;

  // register p_25_1_2
  reg [15 : 0] p_25_1_2;
  wire [15 : 0] p_25_1_2$D_IN;
  wire p_25_1_2$EN;

  // register p_25_1_3
  reg [15 : 0] p_25_1_3;
  wire [15 : 0] p_25_1_3$D_IN;
  wire p_25_1_3$EN;

  // register p_25_1_4
  reg [15 : 0] p_25_1_4;
  wire [15 : 0] p_25_1_4$D_IN;
  wire p_25_1_4$EN;

  // register p_25_1_5
  reg [15 : 0] p_25_1_5;
  wire [15 : 0] p_25_1_5$D_IN;
  wire p_25_1_5$EN;

  // register p_25_1_6
  reg [15 : 0] p_25_1_6;
  wire [15 : 0] p_25_1_6$D_IN;
  wire p_25_1_6$EN;

  // register p_25_1_7
  reg [15 : 0] p_25_1_7;
  wire [15 : 0] p_25_1_7$D_IN;
  wire p_25_1_7$EN;

  // register p_26_1_0
  reg [15 : 0] p_26_1_0;
  wire [15 : 0] p_26_1_0$D_IN;
  wire p_26_1_0$EN;

  // register p_26_1_1
  reg [15 : 0] p_26_1_1;
  wire [15 : 0] p_26_1_1$D_IN;
  wire p_26_1_1$EN;

  // register p_26_1_2
  reg [15 : 0] p_26_1_2;
  wire [15 : 0] p_26_1_2$D_IN;
  wire p_26_1_2$EN;

  // register p_26_1_3
  reg [15 : 0] p_26_1_3;
  wire [15 : 0] p_26_1_3$D_IN;
  wire p_26_1_3$EN;

  // register p_26_1_4
  reg [15 : 0] p_26_1_4;
  wire [15 : 0] p_26_1_4$D_IN;
  wire p_26_1_4$EN;

  // register p_26_1_5
  reg [15 : 0] p_26_1_5;
  wire [15 : 0] p_26_1_5$D_IN;
  wire p_26_1_5$EN;

  // register p_26_1_6
  reg [15 : 0] p_26_1_6;
  wire [15 : 0] p_26_1_6$D_IN;
  wire p_26_1_6$EN;

  // register p_26_1_7
  reg [15 : 0] p_26_1_7;
  wire [15 : 0] p_26_1_7$D_IN;
  wire p_26_1_7$EN;

  // register p_27_1_0
  reg [15 : 0] p_27_1_0;
  wire [15 : 0] p_27_1_0$D_IN;
  wire p_27_1_0$EN;

  // register p_27_1_1
  reg [15 : 0] p_27_1_1;
  wire [15 : 0] p_27_1_1$D_IN;
  wire p_27_1_1$EN;

  // register p_27_1_2
  reg [15 : 0] p_27_1_2;
  wire [15 : 0] p_27_1_2$D_IN;
  wire p_27_1_2$EN;

  // register p_27_1_3
  reg [15 : 0] p_27_1_3;
  wire [15 : 0] p_27_1_3$D_IN;
  wire p_27_1_3$EN;

  // register p_27_1_4
  reg [15 : 0] p_27_1_4;
  wire [15 : 0] p_27_1_4$D_IN;
  wire p_27_1_4$EN;

  // register p_27_1_5
  reg [15 : 0] p_27_1_5;
  wire [15 : 0] p_27_1_5$D_IN;
  wire p_27_1_5$EN;

  // register p_27_1_6
  reg [15 : 0] p_27_1_6;
  wire [15 : 0] p_27_1_6$D_IN;
  wire p_27_1_6$EN;

  // register p_27_1_7
  reg [15 : 0] p_27_1_7;
  wire [15 : 0] p_27_1_7$D_IN;
  wire p_27_1_7$EN;

  // register partial_product_0
  reg [127 : 0] partial_product_0;
  wire [127 : 0] partial_product_0$D_IN;
  wire partial_product_0$EN;

  // register partial_product_1
  reg [127 : 0] partial_product_1;
  wire [127 : 0] partial_product_1$D_IN;
  wire partial_product_1$EN;

  // register partial_product_10
  reg [127 : 0] partial_product_10;
  wire [127 : 0] partial_product_10$D_IN;
  wire partial_product_10$EN;

  // register partial_product_11
  reg [127 : 0] partial_product_11;
  wire [127 : 0] partial_product_11$D_IN;
  wire partial_product_11$EN;

  // register partial_product_12
  reg [127 : 0] partial_product_12;
  wire [127 : 0] partial_product_12$D_IN;
  wire partial_product_12$EN;

  // register partial_product_13
  reg [127 : 0] partial_product_13;
  wire [127 : 0] partial_product_13$D_IN;
  wire partial_product_13$EN;

  // register partial_product_14
  reg [127 : 0] partial_product_14;
  wire [127 : 0] partial_product_14$D_IN;
  wire partial_product_14$EN;

  // register partial_product_15
  reg [127 : 0] partial_product_15;
  wire [127 : 0] partial_product_15$D_IN;
  wire partial_product_15$EN;

  // register partial_product_16
  reg [127 : 0] partial_product_16;
  wire [127 : 0] partial_product_16$D_IN;
  wire partial_product_16$EN;

  // register partial_product_17
  reg [127 : 0] partial_product_17;
  wire [127 : 0] partial_product_17$D_IN;
  wire partial_product_17$EN;

  // register partial_product_18
  reg [127 : 0] partial_product_18;
  wire [127 : 0] partial_product_18$D_IN;
  wire partial_product_18$EN;

  // register partial_product_19
  reg [127 : 0] partial_product_19;
  wire [127 : 0] partial_product_19$D_IN;
  wire partial_product_19$EN;

  // register partial_product_2
  reg [127 : 0] partial_product_2;
  wire [127 : 0] partial_product_2$D_IN;
  wire partial_product_2$EN;

  // register partial_product_20
  reg [127 : 0] partial_product_20;
  wire [127 : 0] partial_product_20$D_IN;
  wire partial_product_20$EN;

  // register partial_product_21
  reg [127 : 0] partial_product_21;
  wire [127 : 0] partial_product_21$D_IN;
  wire partial_product_21$EN;

  // register partial_product_22
  reg [127 : 0] partial_product_22;
  wire [127 : 0] partial_product_22$D_IN;
  wire partial_product_22$EN;

  // register partial_product_23
  reg [127 : 0] partial_product_23;
  wire [127 : 0] partial_product_23$D_IN;
  wire partial_product_23$EN;

  // register partial_product_24
  reg [127 : 0] partial_product_24;
  wire [127 : 0] partial_product_24$D_IN;
  wire partial_product_24$EN;

  // register partial_product_25
  reg [127 : 0] partial_product_25;
  wire [127 : 0] partial_product_25$D_IN;
  wire partial_product_25$EN;

  // register partial_product_26
  reg [127 : 0] partial_product_26;
  wire [127 : 0] partial_product_26$D_IN;
  wire partial_product_26$EN;

  // register partial_product_27
  reg [127 : 0] partial_product_27;
  wire [127 : 0] partial_product_27$D_IN;
  wire partial_product_27$EN;

  // register partial_product_28
  reg [127 : 0] partial_product_28;
  wire [127 : 0] partial_product_28$D_IN;
  wire partial_product_28$EN;

  // register partial_product_29
  reg [127 : 0] partial_product_29;
  wire [127 : 0] partial_product_29$D_IN;
  wire partial_product_29$EN;

  // register partial_product_3
  reg [127 : 0] partial_product_3;
  wire [127 : 0] partial_product_3$D_IN;
  wire partial_product_3$EN;

  // register partial_product_30
  reg [127 : 0] partial_product_30;
  wire [127 : 0] partial_product_30$D_IN;
  wire partial_product_30$EN;

  // register partial_product_31
  reg [127 : 0] partial_product_31;
  wire [127 : 0] partial_product_31$D_IN;
  wire partial_product_31$EN;

  // register partial_product_32
  reg [127 : 0] partial_product_32;
  wire [127 : 0] partial_product_32$D_IN;
  wire partial_product_32$EN;

  // register partial_product_33
  reg [127 : 0] partial_product_33;
  wire [127 : 0] partial_product_33$D_IN;
  wire partial_product_33$EN;

  // register partial_product_34
  reg [127 : 0] partial_product_34;
  wire [127 : 0] partial_product_34$D_IN;
  wire partial_product_34$EN;

  // register partial_product_35
  reg [127 : 0] partial_product_35;
  wire [127 : 0] partial_product_35$D_IN;
  wire partial_product_35$EN;

  // register partial_product_36
  reg [127 : 0] partial_product_36;
  wire [127 : 0] partial_product_36$D_IN;
  wire partial_product_36$EN;

  // register partial_product_37
  reg [127 : 0] partial_product_37;
  wire [127 : 0] partial_product_37$D_IN;
  wire partial_product_37$EN;

  // register partial_product_38
  reg [127 : 0] partial_product_38;
  wire [127 : 0] partial_product_38$D_IN;
  wire partial_product_38$EN;

  // register partial_product_39
  reg [127 : 0] partial_product_39;
  wire [127 : 0] partial_product_39$D_IN;
  wire partial_product_39$EN;

  // register partial_product_4
  reg [127 : 0] partial_product_4;
  wire [127 : 0] partial_product_4$D_IN;
  wire partial_product_4$EN;

  // register partial_product_40
  reg [127 : 0] partial_product_40;
  wire [127 : 0] partial_product_40$D_IN;
  wire partial_product_40$EN;

  // register partial_product_41
  reg [127 : 0] partial_product_41;
  wire [127 : 0] partial_product_41$D_IN;
  wire partial_product_41$EN;

  // register partial_product_42
  reg [127 : 0] partial_product_42;
  wire [127 : 0] partial_product_42$D_IN;
  wire partial_product_42$EN;

  // register partial_product_43
  reg [127 : 0] partial_product_43;
  wire [127 : 0] partial_product_43$D_IN;
  wire partial_product_43$EN;

  // register partial_product_44
  reg [127 : 0] partial_product_44;
  wire [127 : 0] partial_product_44$D_IN;
  wire partial_product_44$EN;

  // register partial_product_45
  reg [127 : 0] partial_product_45;
  wire [127 : 0] partial_product_45$D_IN;
  wire partial_product_45$EN;

  // register partial_product_46
  reg [127 : 0] partial_product_46;
  wire [127 : 0] partial_product_46$D_IN;
  wire partial_product_46$EN;

  // register partial_product_47
  reg [127 : 0] partial_product_47;
  wire [127 : 0] partial_product_47$D_IN;
  wire partial_product_47$EN;

  // register partial_product_48
  reg [127 : 0] partial_product_48;
  wire [127 : 0] partial_product_48$D_IN;
  wire partial_product_48$EN;

  // register partial_product_49
  reg [127 : 0] partial_product_49;
  wire [127 : 0] partial_product_49$D_IN;
  wire partial_product_49$EN;

  // register partial_product_5
  reg [127 : 0] partial_product_5;
  wire [127 : 0] partial_product_5$D_IN;
  wire partial_product_5$EN;

  // register partial_product_50
  reg [127 : 0] partial_product_50;
  wire [127 : 0] partial_product_50$D_IN;
  wire partial_product_50$EN;

  // register partial_product_51
  reg [127 : 0] partial_product_51;
  wire [127 : 0] partial_product_51$D_IN;
  wire partial_product_51$EN;

  // register partial_product_52
  reg [127 : 0] partial_product_52;
  wire [127 : 0] partial_product_52$D_IN;
  wire partial_product_52$EN;

  // register partial_product_53
  reg [127 : 0] partial_product_53;
  wire [127 : 0] partial_product_53$D_IN;
  wire partial_product_53$EN;

  // register partial_product_54
  reg [127 : 0] partial_product_54;
  wire [127 : 0] partial_product_54$D_IN;
  wire partial_product_54$EN;

  // register partial_product_55
  reg [127 : 0] partial_product_55;
  wire [127 : 0] partial_product_55$D_IN;
  wire partial_product_55$EN;

  // register partial_product_56
  reg [127 : 0] partial_product_56;
  wire [127 : 0] partial_product_56$D_IN;
  wire partial_product_56$EN;

  // register partial_product_57
  reg [127 : 0] partial_product_57;
  wire [127 : 0] partial_product_57$D_IN;
  wire partial_product_57$EN;

  // register partial_product_58
  reg [127 : 0] partial_product_58;
  wire [127 : 0] partial_product_58$D_IN;
  wire partial_product_58$EN;

  // register partial_product_59
  reg [127 : 0] partial_product_59;
  wire [127 : 0] partial_product_59$D_IN;
  wire partial_product_59$EN;

  // register partial_product_6
  reg [127 : 0] partial_product_6;
  wire [127 : 0] partial_product_6$D_IN;
  wire partial_product_6$EN;

  // register partial_product_60
  reg [127 : 0] partial_product_60;
  wire [127 : 0] partial_product_60$D_IN;
  wire partial_product_60$EN;

  // register partial_product_61
  reg [127 : 0] partial_product_61;
  wire [127 : 0] partial_product_61$D_IN;
  wire partial_product_61$EN;

  // register partial_product_62
  reg [127 : 0] partial_product_62;
  wire [127 : 0] partial_product_62$D_IN;
  wire partial_product_62$EN;

  // register partial_product_63
  reg [127 : 0] partial_product_63;
  wire [127 : 0] partial_product_63$D_IN;
  wire partial_product_63$EN;

  // register partial_product_7
  reg [127 : 0] partial_product_7;
  wire [127 : 0] partial_product_7$D_IN;
  wire partial_product_7$EN;

  // register partial_product_8
  reg [127 : 0] partial_product_8;
  wire [127 : 0] partial_product_8$D_IN;
  wire partial_product_8$EN;

  // register partial_product_9
  reg [127 : 0] partial_product_9;
  wire [127 : 0] partial_product_9$D_IN;
  wire partial_product_9$EN;

  // register partials_sum_0
  reg [127 : 0] partials_sum_0;
  wire [127 : 0] partials_sum_0$D_IN;
  wire partials_sum_0$EN;

  // register partials_sum_1
  reg [127 : 0] partials_sum_1;
  wire [127 : 0] partials_sum_1$D_IN;
  wire partials_sum_1$EN;

  // register partials_sum_2
  reg [127 : 0] partials_sum_2;
  wire [127 : 0] partials_sum_2$D_IN;
  wire partials_sum_2$EN;

  // register partials_sum_3
  reg [127 : 0] partials_sum_3;
  wire [127 : 0] partials_sum_3$D_IN;
  wire partials_sum_3$EN;

  // register reg_mode
  reg [1 : 0] reg_mode;
  wire [1 : 0] reg_mode$D_IN;
  wire reg_mode$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_compute_MAC,
       CAN_FIRE_get_values,
       WILL_FIRE_RL_compute_MAC,
       WILL_FIRE_get_values;

  // remaining internal signals
  wire [127 : 0] final_mac_result__h24118,
		 final_mac_result__h24365,
		 final_mac_result__h24492,
		 x__h22604,
		 x__h22677,
		 x__h22679,
		 x__h22681,
		 x__h22683,
		 x__h22685,
		 x__h22687,
		 x__h22689,
		 x__h22691,
		 x__h22693,
		 x__h22695,
		 x__h22849,
		 x__h22851,
		 x__h22853,
		 x__h22855,
		 x__h22857,
		 x__h22859,
		 x__h22861,
		 x__h22863,
		 x__h22865,
		 x__h22867,
		 x__h22869,
		 x__h22871,
		 x__h22873,
		 x__h22875,
		 x__h22877,
		 x__h22879,
		 x__h22881,
		 x__h22883,
		 x__h22885,
		 x__h22887,
		 x__h22889,
		 x__h22891,
		 x__h22893,
		 x__h22895,
		 x__h22897,
		 x__h22899,
		 x__h22901,
		 x__h22903,
		 x__h22905,
		 x__h22907,
		 x__h22909,
		 x__h22911,
		 x__h22913,
		 x__h22915,
		 x__h22917,
		 x__h22919,
		 x__h22921,
		 x__h22923,
		 x__h22925,
		 x__h22927,
		 x__h22929,
		 x__h22931,
		 x__h22933,
		 x__h22935,
		 x__h22937,
		 x__h22939,
		 x__h23822,
		 x__h23824,
		 x__h23826,
		 y__h23627;
  wire [31 : 0] _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d102,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d12,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d120,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d22,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d34,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d48,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d64,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d82,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d100,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d118,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d132,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d20,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d32,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d46,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d62,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d80,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d116,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d130,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d142,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d30,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d44,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d60,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d78,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d98,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d114,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d128,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d140,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d150,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d42,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d58,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d76,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d96,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d112,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d126,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d138,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d148,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d156,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d56,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d74,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d94,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d110,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d124,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d136,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d146,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d154,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d160,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d72,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d92,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d108,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d122,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d134,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d144,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d152,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d158,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d162,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d90,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_1_ETC___d16,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_2_ETC___d26,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d38,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d52,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_4_ETC___d68,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_5_ETC___d86,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_6_ETC___d106,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_7_ETC___d8;
  wire [15 : 0] x__h14360,
		x__h14969,
		x__h15491,
		x__h15926,
		x__h16274,
		x__h16535,
		x__h16709,
		x__h16796,
		y__h13520,
		y__h14448,
		y__h15057,
		y__h15579,
		y__h16014,
		y__h16362,
		y__h16623,
		y__h16797;
  wire NOT_get_values_multiplicand1_EQ_m1_32_33_OR_NO_ETC___d439;

  // action method get_values
  assign RDY_get_values = 1'd1 ;
  assign CAN_FIRE_get_values = 1'd1 ;
  assign WILL_FIRE_get_values = EN_get_values ;

  // value method mac_result
  always@(reg_mode or
	  mac_output_3 or
	  final_mac_result__h24118 or
	  final_mac_result__h24365 or final_mac_result__h24492)
  begin
    case (reg_mode)
      2'd0: mac_result = final_mac_result__h24118;
      2'd1: mac_result = final_mac_result__h24365;
      2'd2: mac_result = final_mac_result__h24492;
      2'd3: mac_result = mac_output_3;
    endcase
  end
  assign RDY_mac_result = mac_ready ;

  // rule RL_compute_MAC
  assign CAN_FIRE_RL_compute_MAC = 1'd1 ;
  assign WILL_FIRE_RL_compute_MAC = 1'd1 ;

  // register a
  assign a$D_IN = get_values_addend ;
  assign a$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_32_33_OR_NO_ETC___d439 ||
	      get_values_mode != reg_mode) ;

  // register flag_0
  assign flag_0$D_IN = inp_ready ;
  assign flag_0$EN = 1'd1 ;

  // register flag_1
  assign flag_1$D_IN = flag_0 ;
  assign flag_1$EN = 1'd1 ;

  // register flag_2
  assign flag_2$D_IN = flag_1 ;
  assign flag_2$EN = 1'd1 ;

  // register flag_3
  assign flag_3$D_IN = flag_2 ;
  assign flag_3$EN = 1'd1 ;

  // register inp_ready
  assign inp_ready$D_IN =
	     NOT_get_values_multiplicand1_EQ_m1_32_33_OR_NO_ETC___d439 ||
	     get_values_mode != reg_mode ;
  assign inp_ready$EN = EN_get_values ;

  // register m1
  assign m1$D_IN = get_values_multiplicand1 ;
  assign m1$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_32_33_OR_NO_ETC___d439 ||
	      get_values_mode != reg_mode) ;

  // register m2
  assign m2$D_IN = get_values_multiplicand2 ;
  assign m2$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_32_33_OR_NO_ETC___d439 ||
	      get_values_mode != reg_mode) ;

  // register mac_output_0
  assign mac_output_0$D_IN = partials_sum_0 + y__h23627 ;
  assign mac_output_0$EN = flag_2 ;

  // register mac_output_1
  assign mac_output_1$D_IN = x__h23826 + y__h23627 ;
  assign mac_output_1$EN = flag_2 ;

  // register mac_output_2
  assign mac_output_2$D_IN = x__h23824 + y__h23627 ;
  assign mac_output_2$EN = flag_2 ;

  // register mac_output_3
  assign mac_output_3$D_IN = x__h23822 + y__h23627 ;
  assign mac_output_3$EN = flag_2 ;

  // register mac_ready
  assign mac_ready$D_IN = 1'd1 ;
  assign mac_ready$EN = flag_2 ;

  // register p_20_1_0
  assign p_20_1_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_7_ETC___d8[15:0] ;
  assign p_20_1_0$EN = inp_ready ;

  // register p_20_1_1
  assign p_20_1_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d12[15:0] ;
  assign p_20_1_1$EN = inp_ready ;

  // register p_20_1_2
  assign p_20_1_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d20[15:0] ;
  assign p_20_1_2$EN = inp_ready ;

  // register p_20_1_3
  assign p_20_1_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d30[15:0] ;
  assign p_20_1_3$EN = inp_ready ;

  // register p_20_1_4
  assign p_20_1_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d42[15:0] ;
  assign p_20_1_4$EN = inp_ready ;

  // register p_20_1_5
  assign p_20_1_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d56[15:0] ;
  assign p_20_1_5$EN = inp_ready ;

  // register p_20_1_6
  assign p_20_1_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d72[15:0] ;
  assign p_20_1_6$EN = inp_ready ;

  // register p_20_1_7
  assign p_20_1_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d90[15:0] ;
  assign p_20_1_7$EN = inp_ready ;

  // register p_21_1_0
  assign p_21_1_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_1_ETC___d16[15:0] ;
  assign p_21_1_0$EN = inp_ready ;

  // register p_21_1_1
  assign p_21_1_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d22[15:0] ;
  assign p_21_1_1$EN = inp_ready ;

  // register p_21_1_2
  assign p_21_1_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d32[15:0] ;
  assign p_21_1_2$EN = inp_ready ;

  // register p_21_1_3
  assign p_21_1_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d44[15:0] ;
  assign p_21_1_3$EN = inp_ready ;

  // register p_21_1_4
  assign p_21_1_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d58[15:0] ;
  assign p_21_1_4$EN = inp_ready ;

  // register p_21_1_5
  assign p_21_1_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d74[15:0] ;
  assign p_21_1_5$EN = inp_ready ;

  // register p_21_1_6
  assign p_21_1_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d92[15:0] ;
  assign p_21_1_6$EN = inp_ready ;

  // register p_21_1_7
  assign p_21_1_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d108[15:0] ;
  assign p_21_1_7$EN = inp_ready ;

  // register p_22_1_0
  assign p_22_1_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_2_ETC___d26[15:0] ;
  assign p_22_1_0$EN = inp_ready ;

  // register p_22_1_1
  assign p_22_1_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d34[15:0] ;
  assign p_22_1_1$EN = inp_ready ;

  // register p_22_1_2
  assign p_22_1_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d46[15:0] ;
  assign p_22_1_2$EN = inp_ready ;

  // register p_22_1_3
  assign p_22_1_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d60[15:0] ;
  assign p_22_1_3$EN = inp_ready ;

  // register p_22_1_4
  assign p_22_1_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d76[15:0] ;
  assign p_22_1_4$EN = inp_ready ;

  // register p_22_1_5
  assign p_22_1_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d94[15:0] ;
  assign p_22_1_5$EN = inp_ready ;

  // register p_22_1_6
  assign p_22_1_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d110[15:0] ;
  assign p_22_1_6$EN = inp_ready ;

  // register p_22_1_7
  assign p_22_1_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d122[15:0] ;
  assign p_22_1_7$EN = inp_ready ;

  // register p_23_1_0
  assign p_23_1_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d38[15:0] ;
  assign p_23_1_0$EN = inp_ready ;

  // register p_23_1_1
  assign p_23_1_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d48[15:0] ;
  assign p_23_1_1$EN = inp_ready ;

  // register p_23_1_2
  assign p_23_1_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d62[15:0] ;
  assign p_23_1_2$EN = inp_ready ;

  // register p_23_1_3
  assign p_23_1_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d78[15:0] ;
  assign p_23_1_3$EN = inp_ready ;

  // register p_23_1_4
  assign p_23_1_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d96[15:0] ;
  assign p_23_1_4$EN = inp_ready ;

  // register p_23_1_5
  assign p_23_1_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d112[15:0] ;
  assign p_23_1_5$EN = inp_ready ;

  // register p_23_1_6
  assign p_23_1_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d124[15:0] ;
  assign p_23_1_6$EN = inp_ready ;

  // register p_23_1_7
  assign p_23_1_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d134[15:0] ;
  assign p_23_1_7$EN = inp_ready ;

  // register p_24_1_0
  assign p_24_1_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d52[15:0] ;
  assign p_24_1_0$EN = inp_ready ;

  // register p_24_1_1
  assign p_24_1_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d64[15:0] ;
  assign p_24_1_1$EN = inp_ready ;

  // register p_24_1_2
  assign p_24_1_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d80[15:0] ;
  assign p_24_1_2$EN = inp_ready ;

  // register p_24_1_3
  assign p_24_1_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d98[15:0] ;
  assign p_24_1_3$EN = inp_ready ;

  // register p_24_1_4
  assign p_24_1_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d114[15:0] ;
  assign p_24_1_4$EN = inp_ready ;

  // register p_24_1_5
  assign p_24_1_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d126[15:0] ;
  assign p_24_1_5$EN = inp_ready ;

  // register p_24_1_6
  assign p_24_1_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d136[15:0] ;
  assign p_24_1_6$EN = inp_ready ;

  // register p_24_1_7
  assign p_24_1_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d144[15:0] ;
  assign p_24_1_7$EN = inp_ready ;

  // register p_25_1_0
  assign p_25_1_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_4_ETC___d68[15:0] ;
  assign p_25_1_0$EN = inp_ready ;

  // register p_25_1_1
  assign p_25_1_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d82[15:0] ;
  assign p_25_1_1$EN = inp_ready ;

  // register p_25_1_2
  assign p_25_1_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d100[15:0] ;
  assign p_25_1_2$EN = inp_ready ;

  // register p_25_1_3
  assign p_25_1_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d116[15:0] ;
  assign p_25_1_3$EN = inp_ready ;

  // register p_25_1_4
  assign p_25_1_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d128[15:0] ;
  assign p_25_1_4$EN = inp_ready ;

  // register p_25_1_5
  assign p_25_1_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d138[15:0] ;
  assign p_25_1_5$EN = inp_ready ;

  // register p_25_1_6
  assign p_25_1_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d146[15:0] ;
  assign p_25_1_6$EN = inp_ready ;

  // register p_25_1_7
  assign p_25_1_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d152[15:0] ;
  assign p_25_1_7$EN = inp_ready ;

  // register p_26_1_0
  assign p_26_1_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_5_ETC___d86[15:0] ;
  assign p_26_1_0$EN = inp_ready ;

  // register p_26_1_1
  assign p_26_1_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d102[15:0] ;
  assign p_26_1_1$EN = inp_ready ;

  // register p_26_1_2
  assign p_26_1_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d118[15:0] ;
  assign p_26_1_2$EN = inp_ready ;

  // register p_26_1_3
  assign p_26_1_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d130[15:0] ;
  assign p_26_1_3$EN = inp_ready ;

  // register p_26_1_4
  assign p_26_1_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d140[15:0] ;
  assign p_26_1_4$EN = inp_ready ;

  // register p_26_1_5
  assign p_26_1_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d148[15:0] ;
  assign p_26_1_5$EN = inp_ready ;

  // register p_26_1_6
  assign p_26_1_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d154[15:0] ;
  assign p_26_1_6$EN = inp_ready ;

  // register p_26_1_7
  assign p_26_1_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d158[15:0] ;
  assign p_26_1_7$EN = inp_ready ;

  // register p_27_1_0
  assign p_27_1_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_6_ETC___d106[15:0] ;
  assign p_27_1_0$EN = inp_ready ;

  // register p_27_1_1
  assign p_27_1_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d120[15:0] ;
  assign p_27_1_1$EN = inp_ready ;

  // register p_27_1_2
  assign p_27_1_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d132[15:0] ;
  assign p_27_1_2$EN = inp_ready ;

  // register p_27_1_3
  assign p_27_1_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d142[15:0] ;
  assign p_27_1_3$EN = inp_ready ;

  // register p_27_1_4
  assign p_27_1_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d150[15:0] ;
  assign p_27_1_4$EN = inp_ready ;

  // register p_27_1_5
  assign p_27_1_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d156[15:0] ;
  assign p_27_1_5$EN = inp_ready ;

  // register p_27_1_6
  assign p_27_1_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d160[15:0] ;
  assign p_27_1_6$EN = inp_ready ;

  // register p_27_1_7
  assign p_27_1_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d162[15:0] ;
  assign p_27_1_7$EN = inp_ready ;

  // register partial_product_0
  assign partial_product_0$D_IN = { 112'd0, p_20_1_0 } ;
  assign partial_product_0$EN = flag_0 ;

  // register partial_product_1
  assign partial_product_1$D_IN = { 104'd0, p_21_1_0, 8'd0 } ;
  assign partial_product_1$EN = flag_0 ;

  // register partial_product_10
  assign partial_product_10$D_IN = { 80'd0, p_22_1_2, 32'd0 } ;
  assign partial_product_10$EN = flag_0 ;

  // register partial_product_11
  assign partial_product_11$D_IN = { 80'd0, p_23_1_1, 32'd0 } ;
  assign partial_product_11$EN = flag_0 ;

  // register partial_product_12
  assign partial_product_12$D_IN = { 80'd0, p_21_1_3, 32'd0 } ;
  assign partial_product_12$EN = flag_0 ;

  // register partial_product_13
  assign partial_product_13$D_IN = { 80'd0, p_24_1_0, 32'd0 } ;
  assign partial_product_13$EN = flag_0 ;

  // register partial_product_14
  assign partial_product_14$D_IN = { 80'd0, p_20_1_4, 32'd0 } ;
  assign partial_product_14$EN = flag_0 ;

  // register partial_product_15
  assign partial_product_15$D_IN = { 72'd0, p_23_1_2, 40'd0 } ;
  assign partial_product_15$EN = flag_0 ;

  // register partial_product_16
  assign partial_product_16$D_IN = { 72'd0, p_22_1_3, 40'd0 } ;
  assign partial_product_16$EN = flag_0 ;

  // register partial_product_17
  assign partial_product_17$D_IN = { 72'd0, p_24_1_1, 40'd0 } ;
  assign partial_product_17$EN = flag_0 ;

  // register partial_product_18
  assign partial_product_18$D_IN = { 72'd0, p_21_1_4, 40'd0 } ;
  assign partial_product_18$EN = flag_0 ;

  // register partial_product_19
  assign partial_product_19$D_IN = { 72'd0, p_25_1_0, 40'd0 } ;
  assign partial_product_19$EN = flag_0 ;

  // register partial_product_2
  assign partial_product_2$D_IN = { 104'd0, p_20_1_1, 8'd0 } ;
  assign partial_product_2$EN = flag_0 ;

  // register partial_product_20
  assign partial_product_20$D_IN = { 72'd0, p_20_1_5, 40'd0 } ;
  assign partial_product_20$EN = flag_0 ;

  // register partial_product_21
  assign partial_product_21$D_IN = { 64'd0, p_23_1_3, 48'd0 } ;
  assign partial_product_21$EN = flag_0 ;

  // register partial_product_22
  assign partial_product_22$D_IN = { 64'd0, p_24_1_2, 48'd0 } ;
  assign partial_product_22$EN = flag_0 ;

  // register partial_product_23
  assign partial_product_23$D_IN = { 64'd0, p_22_1_4, 48'd0 } ;
  assign partial_product_23$EN = flag_0 ;

  // register partial_product_24
  assign partial_product_24$D_IN = { 64'd0, p_25_1_1, 48'd0 } ;
  assign partial_product_24$EN = flag_0 ;

  // register partial_product_25
  assign partial_product_25$D_IN = { 64'd0, p_21_1_5, 48'd0 } ;
  assign partial_product_25$EN = flag_0 ;

  // register partial_product_26
  assign partial_product_26$D_IN = { 64'd0, p_26_1_0, 48'd0 } ;
  assign partial_product_26$EN = flag_0 ;

  // register partial_product_27
  assign partial_product_27$D_IN = { 64'd0, p_20_1_6, 48'd0 } ;
  assign partial_product_27$EN = flag_0 ;

  // register partial_product_28
  assign partial_product_28$D_IN = { 56'd0, p_24_1_3, 56'd0 } ;
  assign partial_product_28$EN = flag_0 ;

  // register partial_product_29
  assign partial_product_29$D_IN = { 56'd0, p_23_1_4, 56'd0 } ;
  assign partial_product_29$EN = flag_0 ;

  // register partial_product_3
  assign partial_product_3$D_IN = { 96'd0, p_21_1_1, 16'd0 } ;
  assign partial_product_3$EN = flag_0 ;

  // register partial_product_30
  assign partial_product_30$D_IN = { 56'd0, p_25_1_2, 56'd0 } ;
  assign partial_product_30$EN = flag_0 ;

  // register partial_product_31
  assign partial_product_31$D_IN = { 56'd0, p_22_1_5, 56'd0 } ;
  assign partial_product_31$EN = flag_0 ;

  // register partial_product_32
  assign partial_product_32$D_IN = { 56'd0, p_26_1_1, 56'd0 } ;
  assign partial_product_32$EN = flag_0 ;

  // register partial_product_33
  assign partial_product_33$D_IN = { 56'd0, p_21_1_6, 56'd0 } ;
  assign partial_product_33$EN = flag_0 ;

  // register partial_product_34
  assign partial_product_34$D_IN = { 56'd0, p_27_1_0, 56'd0 } ;
  assign partial_product_34$EN = flag_0 ;

  // register partial_product_35
  assign partial_product_35$D_IN = { 56'd0, p_20_1_7, 56'd0 } ;
  assign partial_product_35$EN = flag_0 ;

  // register partial_product_36
  assign partial_product_36$D_IN = { 48'd0, p_24_1_4, 64'd0 } ;
  assign partial_product_36$EN = flag_0 ;

  // register partial_product_37
  assign partial_product_37$D_IN = { 48'd0, p_25_1_3, 64'd0 } ;
  assign partial_product_37$EN = flag_0 ;

  // register partial_product_38
  assign partial_product_38$D_IN = { 48'd0, p_23_1_5, 64'd0 } ;
  assign partial_product_38$EN = flag_0 ;

  // register partial_product_39
  assign partial_product_39$D_IN = { 48'd0, p_26_1_2, 64'd0 } ;
  assign partial_product_39$EN = flag_0 ;

  // register partial_product_4
  assign partial_product_4$D_IN = { 96'd0, p_22_1_0, 16'd0 } ;
  assign partial_product_4$EN = flag_0 ;

  // register partial_product_40
  assign partial_product_40$D_IN = { 48'd0, p_22_1_6, 64'd0 } ;
  assign partial_product_40$EN = flag_0 ;

  // register partial_product_41
  assign partial_product_41$D_IN = { 48'd0, p_27_1_1, 64'd0 } ;
  assign partial_product_41$EN = flag_0 ;

  // register partial_product_42
  assign partial_product_42$D_IN = { 48'd0, p_21_1_7, 64'd0 } ;
  assign partial_product_42$EN = flag_0 ;

  // register partial_product_43
  assign partial_product_43$D_IN = { 40'd0, p_25_1_4, 72'd0 } ;
  assign partial_product_43$EN = flag_0 ;

  // register partial_product_44
  assign partial_product_44$D_IN = { 40'd0, p_24_1_5, 72'd0 } ;
  assign partial_product_44$EN = flag_0 ;

  // register partial_product_45
  assign partial_product_45$D_IN = { 40'd0, p_26_1_3, 72'd0 } ;
  assign partial_product_45$EN = flag_0 ;

  // register partial_product_46
  assign partial_product_46$D_IN = { 40'd0, p_23_1_6, 72'd0 } ;
  assign partial_product_46$EN = flag_0 ;

  // register partial_product_47
  assign partial_product_47$D_IN = { 40'd0, p_27_1_2, 72'd0 } ;
  assign partial_product_47$EN = flag_0 ;

  // register partial_product_48
  assign partial_product_48$D_IN = { 40'd0, p_22_1_7, 72'd0 } ;
  assign partial_product_48$EN = flag_0 ;

  // register partial_product_49
  assign partial_product_49$D_IN = { 32'd0, p_25_1_5, 80'd0 } ;
  assign partial_product_49$EN = flag_0 ;

  // register partial_product_5
  assign partial_product_5$D_IN = { 96'd0, p_20_1_2, 16'd0 } ;
  assign partial_product_5$EN = flag_0 ;

  // register partial_product_50
  assign partial_product_50$D_IN = { 32'd0, p_26_1_4, 80'd0 } ;
  assign partial_product_50$EN = flag_0 ;

  // register partial_product_51
  assign partial_product_51$D_IN = { 32'd0, p_24_1_6, 80'd0 } ;
  assign partial_product_51$EN = flag_0 ;

  // register partial_product_52
  assign partial_product_52$D_IN = { 32'd0, p_27_1_3, 80'd0 } ;
  assign partial_product_52$EN = flag_0 ;

  // register partial_product_53
  assign partial_product_53$D_IN = { 32'd0, p_23_1_7, 80'd0 } ;
  assign partial_product_53$EN = flag_0 ;

  // register partial_product_54
  assign partial_product_54$D_IN = { 24'd0, p_26_1_5, 88'd0 } ;
  assign partial_product_54$EN = flag_0 ;

  // register partial_product_55
  assign partial_product_55$D_IN = { 24'd0, p_25_1_6, 88'd0 } ;
  assign partial_product_55$EN = flag_0 ;

  // register partial_product_56
  assign partial_product_56$D_IN = { 24'd0, p_27_1_4, 88'd0 } ;
  assign partial_product_56$EN = flag_0 ;

  // register partial_product_57
  assign partial_product_57$D_IN = { 24'd0, p_24_1_7, 88'd0 } ;
  assign partial_product_57$EN = flag_0 ;

  // register partial_product_58
  assign partial_product_58$D_IN = { 16'd0, p_26_1_6, 96'd0 } ;
  assign partial_product_58$EN = flag_0 ;

  // register partial_product_59
  assign partial_product_59$D_IN = { 16'd0, p_27_1_5, 96'd0 } ;
  assign partial_product_59$EN = flag_0 ;

  // register partial_product_6
  assign partial_product_6$D_IN = { 88'd0, p_22_1_1, 24'd0 } ;
  assign partial_product_6$EN = flag_0 ;

  // register partial_product_60
  assign partial_product_60$D_IN = { 16'd0, p_25_1_7, 96'd0 } ;
  assign partial_product_60$EN = flag_0 ;

  // register partial_product_61
  assign partial_product_61$D_IN = { 8'd0, p_27_1_6, 104'd0 } ;
  assign partial_product_61$EN = flag_0 ;

  // register partial_product_62
  assign partial_product_62$D_IN = { 8'd0, p_26_1_7, 104'd0 } ;
  assign partial_product_62$EN = flag_0 ;

  // register partial_product_63
  assign partial_product_63$D_IN = { p_27_1_7, 112'd0 } ;
  assign partial_product_63$EN = flag_0 ;

  // register partial_product_7
  assign partial_product_7$D_IN = { 88'd0, p_21_1_2, 24'd0 } ;
  assign partial_product_7$EN = flag_0 ;

  // register partial_product_8
  assign partial_product_8$D_IN = { 88'd0, p_23_1_0, 24'd0 } ;
  assign partial_product_8$EN = flag_0 ;

  // register partial_product_9
  assign partial_product_9$D_IN = { 88'd0, p_20_1_3, 24'd0 } ;
  assign partial_product_9$EN = flag_0 ;

  // register partials_sum_0
  assign partials_sum_0$D_IN = partial_product_0 ;
  assign partials_sum_0$EN = flag_1 ;

  // register partials_sum_1
  assign partials_sum_1$D_IN = x__h22604 + partial_product_3 ;
  assign partials_sum_1$EN = flag_1 ;

  // register partials_sum_2
  assign partials_sum_2$D_IN = x__h22677 + partial_product_21 ;
  assign partials_sum_2$EN = flag_1 ;

  // register partials_sum_3
  assign partials_sum_3$D_IN = x__h22849 + partial_product_63 ;
  assign partials_sum_3$EN = flag_1 ;

  // register reg_mode
  assign reg_mode$D_IN = get_values_mode ;
  assign reg_mode$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_32_33_OR_NO_ETC___d439 ||
	      get_values_mode != reg_mode) ;

  // remaining internal signals
  assign NOT_get_values_multiplicand1_EQ_m1_32_33_OR_NO_ETC___d439 =
	     get_values_multiplicand1 != m1 ||
	     get_values_multiplicand2 != m2 ||
	     get_values_addend != a ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d102 =
	     x__h14969 * y__h16623 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d12 =
	     x__h14969 * y__h13520 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d120 =
	     x__h14969 * y__h16797 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d22 =
	     x__h14969 * y__h14448 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d34 =
	     x__h14969 * y__h15057 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d48 =
	     x__h14969 * y__h15579 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d64 =
	     x__h14969 * y__h16014 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d82 =
	     x__h14969 * y__h16362 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d100 =
	     x__h15491 * y__h16362 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d118 =
	     x__h15491 * y__h16623 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d132 =
	     x__h15491 * y__h16797 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d20 =
	     x__h15491 * y__h13520 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d32 =
	     x__h15491 * y__h14448 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d46 =
	     x__h15491 * y__h15057 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d62 =
	     x__h15491 * y__h15579 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d80 =
	     x__h15491 * y__h16014 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d116 =
	     x__h15926 * y__h16362 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d130 =
	     x__h15926 * y__h16623 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d142 =
	     x__h15926 * y__h16797 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d30 =
	     x__h15926 * y__h13520 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d44 =
	     x__h15926 * y__h14448 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d60 =
	     x__h15926 * y__h15057 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d78 =
	     x__h15926 * y__h15579 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d98 =
	     x__h15926 * y__h16014 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d114 =
	     x__h16274 * y__h16014 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d128 =
	     x__h16274 * y__h16362 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d140 =
	     x__h16274 * y__h16623 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d150 =
	     x__h16274 * y__h16797 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d42 =
	     x__h16274 * y__h13520 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d58 =
	     x__h16274 * y__h14448 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d76 =
	     x__h16274 * y__h15057 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d96 =
	     x__h16274 * y__h15579 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d112 =
	     x__h16535 * y__h15579 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d126 =
	     x__h16535 * y__h16014 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d138 =
	     x__h16535 * y__h16362 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d148 =
	     x__h16535 * y__h16623 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d156 =
	     x__h16535 * y__h16797 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d56 =
	     x__h16535 * y__h13520 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d74 =
	     x__h16535 * y__h14448 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d94 =
	     x__h16535 * y__h15057 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d110 =
	     x__h16709 * y__h15057 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d124 =
	     x__h16709 * y__h15579 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d136 =
	     x__h16709 * y__h16014 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d146 =
	     x__h16709 * y__h16362 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d154 =
	     x__h16709 * y__h16623 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d160 =
	     x__h16709 * y__h16797 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d72 =
	     x__h16709 * y__h13520 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d92 =
	     x__h16709 * y__h14448 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d108 =
	     x__h16796 * y__h14448 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d122 =
	     x__h16796 * y__h15057 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d134 =
	     x__h16796 * y__h15579 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d144 =
	     x__h16796 * y__h16014 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d152 =
	     x__h16796 * y__h16362 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d158 =
	     x__h16796 * y__h16623 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d162 =
	     x__h16796 * y__h16797 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d90 =
	     x__h16796 * y__h13520 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_1_ETC___d16 =
	     x__h14360 * y__h14448 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_2_ETC___d26 =
	     x__h14360 * y__h15057 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d38 =
	     x__h14360 * y__h15579 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d52 =
	     x__h14360 * y__h16014 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_4_ETC___d68 =
	     x__h14360 * y__h16362 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_5_ETC___d86 =
	     x__h14360 * y__h16623 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_6_ETC___d106 =
	     x__h14360 * y__h16797 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_7_ETC___d8 =
	     x__h14360 * y__h13520 ;
  assign final_mac_result__h24118 = {8{mac_output_0[15:0]}} ;
  assign final_mac_result__h24365 = {4{mac_output_1[31:0]}} ;
  assign final_mac_result__h24492 = {2{mac_output_2[63:0]}} ;
  assign x__h14360 = { 8'd0, m1[7:0] } ;
  assign x__h14969 = { 8'd0, m1[15:8] } ;
  assign x__h15491 = { 8'd0, m1[23:16] } ;
  assign x__h15926 = { 8'd0, m1[31:24] } ;
  assign x__h16274 = { 8'd0, m1[39:32] } ;
  assign x__h16535 = { 8'd0, m1[47:40] } ;
  assign x__h16709 = { 8'd0, m1[55:48] } ;
  assign x__h16796 = { 8'd0, m1[63:56] } ;
  assign x__h22604 = partial_product_1 + partial_product_2 ;
  assign x__h22677 = x__h22679 + partial_product_16 ;
  assign x__h22679 = x__h22681 + partial_product_15 ;
  assign x__h22681 = x__h22683 + partial_product_12 ;
  assign x__h22683 = x__h22685 + partial_product_11 ;
  assign x__h22685 = x__h22687 + partial_product_10 ;
  assign x__h22687 = x__h22689 + partial_product_9 ;
  assign x__h22689 = x__h22691 + partial_product_8 ;
  assign x__h22691 = x__h22693 + partial_product_7 ;
  assign x__h22693 = x__h22695 + partial_product_6 ;
  assign x__h22695 = partial_product_4 + partial_product_5 ;
  assign x__h22849 = x__h22851 + partial_product_62 ;
  assign x__h22851 = x__h22853 + partial_product_61 ;
  assign x__h22853 = x__h22855 + partial_product_60 ;
  assign x__h22855 = x__h22857 + partial_product_59 ;
  assign x__h22857 = x__h22859 + partial_product_58 ;
  assign x__h22859 = x__h22861 + partial_product_57 ;
  assign x__h22861 = x__h22863 + partial_product_56 ;
  assign x__h22863 = x__h22865 + partial_product_55 ;
  assign x__h22865 = x__h22867 + partial_product_54 ;
  assign x__h22867 = x__h22869 + partial_product_53 ;
  assign x__h22869 = x__h22871 + partial_product_52 ;
  assign x__h22871 = x__h22873 + partial_product_51 ;
  assign x__h22873 = x__h22875 + partial_product_50 ;
  assign x__h22875 = x__h22877 + partial_product_49 ;
  assign x__h22877 = x__h22879 + partial_product_48 ;
  assign x__h22879 = x__h22881 + partial_product_47 ;
  assign x__h22881 = x__h22883 + partial_product_46 ;
  assign x__h22883 = x__h22885 + partial_product_45 ;
  assign x__h22885 = x__h22887 + partial_product_44 ;
  assign x__h22887 = x__h22889 + partial_product_43 ;
  assign x__h22889 = x__h22891 + partial_product_42 ;
  assign x__h22891 = x__h22893 + partial_product_41 ;
  assign x__h22893 = x__h22895 + partial_product_40 ;
  assign x__h22895 = x__h22897 + partial_product_39 ;
  assign x__h22897 = x__h22899 + partial_product_38 ;
  assign x__h22899 = x__h22901 + partial_product_37 ;
  assign x__h22901 = x__h22903 + partial_product_36 ;
  assign x__h22903 = x__h22905 + partial_product_35 ;
  assign x__h22905 = x__h22907 + partial_product_34 ;
  assign x__h22907 = x__h22909 + partial_product_33 ;
  assign x__h22909 = x__h22911 + partial_product_32 ;
  assign x__h22911 = x__h22913 + partial_product_31 ;
  assign x__h22913 = x__h22915 + partial_product_30 ;
  assign x__h22915 = x__h22917 + partial_product_29 ;
  assign x__h22917 = x__h22919 + partial_product_28 ;
  assign x__h22919 = x__h22921 + partial_product_27 ;
  assign x__h22921 = x__h22923 + partial_product_26 ;
  assign x__h22923 = x__h22925 + partial_product_25 ;
  assign x__h22925 = x__h22927 + partial_product_24 ;
  assign x__h22927 = x__h22929 + partial_product_23 ;
  assign x__h22929 = x__h22931 + partial_product_22 ;
  assign x__h22931 = x__h22933 + partial_product_20 ;
  assign x__h22933 = x__h22935 + partial_product_19 ;
  assign x__h22935 = x__h22937 + partial_product_18 ;
  assign x__h22937 = x__h22939 + partial_product_17 ;
  assign x__h22939 = partial_product_13 + partial_product_14 ;
  assign x__h23822 = x__h23824 + partials_sum_3 ;
  assign x__h23824 = x__h23826 + partials_sum_2 ;
  assign x__h23826 = partials_sum_0 + partials_sum_1 ;
  assign y__h13520 = { 8'd0, m2[7:0] } ;
  assign y__h14448 = { 8'd0, m2[15:8] } ;
  assign y__h15057 = { 8'd0, m2[23:16] } ;
  assign y__h15579 = { 8'd0, m2[31:24] } ;
  assign y__h16014 = { 8'd0, m2[39:32] } ;
  assign y__h16362 = { 8'd0, m2[47:40] } ;
  assign y__h16623 = { 8'd0, m2[55:48] } ;
  assign y__h16797 = { 8'd0, m2[63:56] } ;
  assign y__h23627 = { 64'd0, a } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 64'd0;
	flag_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inp_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	m2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mac_output_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mac_output_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mac_output_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mac_output_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mac_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	p_20_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_20_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_20_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_20_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_20_1_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_20_1_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_20_1_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_20_1_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_21_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_21_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_21_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_21_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_21_1_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_21_1_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_21_1_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_21_1_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_22_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_22_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_22_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_22_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_22_1_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_22_1_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_22_1_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_22_1_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_23_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_23_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_23_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_23_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_23_1_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_23_1_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_23_1_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_23_1_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_24_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_24_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_24_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_24_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_24_1_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_24_1_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_24_1_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_24_1_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_25_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_25_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_25_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_25_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_25_1_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_25_1_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_25_1_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_25_1_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_26_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_26_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_26_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_26_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_26_1_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_26_1_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_26_1_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_26_1_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_27_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_27_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_27_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_27_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_27_1_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_27_1_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_27_1_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	p_27_1_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	partial_product_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_10 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_11 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_12 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_13 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_14 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_15 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_16 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_17 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_18 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_19 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_20 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_21 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_22 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_23 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_24 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_25 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_26 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_27 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_28 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_29 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_30 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_31 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_32 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_33 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_34 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_35 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_36 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_37 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_38 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_39 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_4 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_40 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_41 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_42 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_43 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_44 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_45 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_46 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_47 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_48 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_49 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_5 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_50 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_51 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_52 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_53 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_54 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_55 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_56 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_57 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_58 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_59 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_6 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_60 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_61 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_62 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_63 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_7 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_8 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_product_9 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partials_sum_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partials_sum_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partials_sum_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partials_sum_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	reg_mode <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (a$EN) a <= `BSV_ASSIGNMENT_DELAY a$D_IN;
	if (flag_0$EN) flag_0 <= `BSV_ASSIGNMENT_DELAY flag_0$D_IN;
	if (flag_1$EN) flag_1 <= `BSV_ASSIGNMENT_DELAY flag_1$D_IN;
	if (flag_2$EN) flag_2 <= `BSV_ASSIGNMENT_DELAY flag_2$D_IN;
	if (flag_3$EN) flag_3 <= `BSV_ASSIGNMENT_DELAY flag_3$D_IN;
	if (inp_ready$EN) inp_ready <= `BSV_ASSIGNMENT_DELAY inp_ready$D_IN;
	if (m1$EN) m1 <= `BSV_ASSIGNMENT_DELAY m1$D_IN;
	if (m2$EN) m2 <= `BSV_ASSIGNMENT_DELAY m2$D_IN;
	if (mac_output_0$EN)
	  mac_output_0 <= `BSV_ASSIGNMENT_DELAY mac_output_0$D_IN;
	if (mac_output_1$EN)
	  mac_output_1 <= `BSV_ASSIGNMENT_DELAY mac_output_1$D_IN;
	if (mac_output_2$EN)
	  mac_output_2 <= `BSV_ASSIGNMENT_DELAY mac_output_2$D_IN;
	if (mac_output_3$EN)
	  mac_output_3 <= `BSV_ASSIGNMENT_DELAY mac_output_3$D_IN;
	if (mac_ready$EN) mac_ready <= `BSV_ASSIGNMENT_DELAY mac_ready$D_IN;
	if (p_20_1_0$EN) p_20_1_0 <= `BSV_ASSIGNMENT_DELAY p_20_1_0$D_IN;
	if (p_20_1_1$EN) p_20_1_1 <= `BSV_ASSIGNMENT_DELAY p_20_1_1$D_IN;
	if (p_20_1_2$EN) p_20_1_2 <= `BSV_ASSIGNMENT_DELAY p_20_1_2$D_IN;
	if (p_20_1_3$EN) p_20_1_3 <= `BSV_ASSIGNMENT_DELAY p_20_1_3$D_IN;
	if (p_20_1_4$EN) p_20_1_4 <= `BSV_ASSIGNMENT_DELAY p_20_1_4$D_IN;
	if (p_20_1_5$EN) p_20_1_5 <= `BSV_ASSIGNMENT_DELAY p_20_1_5$D_IN;
	if (p_20_1_6$EN) p_20_1_6 <= `BSV_ASSIGNMENT_DELAY p_20_1_6$D_IN;
	if (p_20_1_7$EN) p_20_1_7 <= `BSV_ASSIGNMENT_DELAY p_20_1_7$D_IN;
	if (p_21_1_0$EN) p_21_1_0 <= `BSV_ASSIGNMENT_DELAY p_21_1_0$D_IN;
	if (p_21_1_1$EN) p_21_1_1 <= `BSV_ASSIGNMENT_DELAY p_21_1_1$D_IN;
	if (p_21_1_2$EN) p_21_1_2 <= `BSV_ASSIGNMENT_DELAY p_21_1_2$D_IN;
	if (p_21_1_3$EN) p_21_1_3 <= `BSV_ASSIGNMENT_DELAY p_21_1_3$D_IN;
	if (p_21_1_4$EN) p_21_1_4 <= `BSV_ASSIGNMENT_DELAY p_21_1_4$D_IN;
	if (p_21_1_5$EN) p_21_1_5 <= `BSV_ASSIGNMENT_DELAY p_21_1_5$D_IN;
	if (p_21_1_6$EN) p_21_1_6 <= `BSV_ASSIGNMENT_DELAY p_21_1_6$D_IN;
	if (p_21_1_7$EN) p_21_1_7 <= `BSV_ASSIGNMENT_DELAY p_21_1_7$D_IN;
	if (p_22_1_0$EN) p_22_1_0 <= `BSV_ASSIGNMENT_DELAY p_22_1_0$D_IN;
	if (p_22_1_1$EN) p_22_1_1 <= `BSV_ASSIGNMENT_DELAY p_22_1_1$D_IN;
	if (p_22_1_2$EN) p_22_1_2 <= `BSV_ASSIGNMENT_DELAY p_22_1_2$D_IN;
	if (p_22_1_3$EN) p_22_1_3 <= `BSV_ASSIGNMENT_DELAY p_22_1_3$D_IN;
	if (p_22_1_4$EN) p_22_1_4 <= `BSV_ASSIGNMENT_DELAY p_22_1_4$D_IN;
	if (p_22_1_5$EN) p_22_1_5 <= `BSV_ASSIGNMENT_DELAY p_22_1_5$D_IN;
	if (p_22_1_6$EN) p_22_1_6 <= `BSV_ASSIGNMENT_DELAY p_22_1_6$D_IN;
	if (p_22_1_7$EN) p_22_1_7 <= `BSV_ASSIGNMENT_DELAY p_22_1_7$D_IN;
	if (p_23_1_0$EN) p_23_1_0 <= `BSV_ASSIGNMENT_DELAY p_23_1_0$D_IN;
	if (p_23_1_1$EN) p_23_1_1 <= `BSV_ASSIGNMENT_DELAY p_23_1_1$D_IN;
	if (p_23_1_2$EN) p_23_1_2 <= `BSV_ASSIGNMENT_DELAY p_23_1_2$D_IN;
	if (p_23_1_3$EN) p_23_1_3 <= `BSV_ASSIGNMENT_DELAY p_23_1_3$D_IN;
	if (p_23_1_4$EN) p_23_1_4 <= `BSV_ASSIGNMENT_DELAY p_23_1_4$D_IN;
	if (p_23_1_5$EN) p_23_1_5 <= `BSV_ASSIGNMENT_DELAY p_23_1_5$D_IN;
	if (p_23_1_6$EN) p_23_1_6 <= `BSV_ASSIGNMENT_DELAY p_23_1_6$D_IN;
	if (p_23_1_7$EN) p_23_1_7 <= `BSV_ASSIGNMENT_DELAY p_23_1_7$D_IN;
	if (p_24_1_0$EN) p_24_1_0 <= `BSV_ASSIGNMENT_DELAY p_24_1_0$D_IN;
	if (p_24_1_1$EN) p_24_1_1 <= `BSV_ASSIGNMENT_DELAY p_24_1_1$D_IN;
	if (p_24_1_2$EN) p_24_1_2 <= `BSV_ASSIGNMENT_DELAY p_24_1_2$D_IN;
	if (p_24_1_3$EN) p_24_1_3 <= `BSV_ASSIGNMENT_DELAY p_24_1_3$D_IN;
	if (p_24_1_4$EN) p_24_1_4 <= `BSV_ASSIGNMENT_DELAY p_24_1_4$D_IN;
	if (p_24_1_5$EN) p_24_1_5 <= `BSV_ASSIGNMENT_DELAY p_24_1_5$D_IN;
	if (p_24_1_6$EN) p_24_1_6 <= `BSV_ASSIGNMENT_DELAY p_24_1_6$D_IN;
	if (p_24_1_7$EN) p_24_1_7 <= `BSV_ASSIGNMENT_DELAY p_24_1_7$D_IN;
	if (p_25_1_0$EN) p_25_1_0 <= `BSV_ASSIGNMENT_DELAY p_25_1_0$D_IN;
	if (p_25_1_1$EN) p_25_1_1 <= `BSV_ASSIGNMENT_DELAY p_25_1_1$D_IN;
	if (p_25_1_2$EN) p_25_1_2 <= `BSV_ASSIGNMENT_DELAY p_25_1_2$D_IN;
	if (p_25_1_3$EN) p_25_1_3 <= `BSV_ASSIGNMENT_DELAY p_25_1_3$D_IN;
	if (p_25_1_4$EN) p_25_1_4 <= `BSV_ASSIGNMENT_DELAY p_25_1_4$D_IN;
	if (p_25_1_5$EN) p_25_1_5 <= `BSV_ASSIGNMENT_DELAY p_25_1_5$D_IN;
	if (p_25_1_6$EN) p_25_1_6 <= `BSV_ASSIGNMENT_DELAY p_25_1_6$D_IN;
	if (p_25_1_7$EN) p_25_1_7 <= `BSV_ASSIGNMENT_DELAY p_25_1_7$D_IN;
	if (p_26_1_0$EN) p_26_1_0 <= `BSV_ASSIGNMENT_DELAY p_26_1_0$D_IN;
	if (p_26_1_1$EN) p_26_1_1 <= `BSV_ASSIGNMENT_DELAY p_26_1_1$D_IN;
	if (p_26_1_2$EN) p_26_1_2 <= `BSV_ASSIGNMENT_DELAY p_26_1_2$D_IN;
	if (p_26_1_3$EN) p_26_1_3 <= `BSV_ASSIGNMENT_DELAY p_26_1_3$D_IN;
	if (p_26_1_4$EN) p_26_1_4 <= `BSV_ASSIGNMENT_DELAY p_26_1_4$D_IN;
	if (p_26_1_5$EN) p_26_1_5 <= `BSV_ASSIGNMENT_DELAY p_26_1_5$D_IN;
	if (p_26_1_6$EN) p_26_1_6 <= `BSV_ASSIGNMENT_DELAY p_26_1_6$D_IN;
	if (p_26_1_7$EN) p_26_1_7 <= `BSV_ASSIGNMENT_DELAY p_26_1_7$D_IN;
	if (p_27_1_0$EN) p_27_1_0 <= `BSV_ASSIGNMENT_DELAY p_27_1_0$D_IN;
	if (p_27_1_1$EN) p_27_1_1 <= `BSV_ASSIGNMENT_DELAY p_27_1_1$D_IN;
	if (p_27_1_2$EN) p_27_1_2 <= `BSV_ASSIGNMENT_DELAY p_27_1_2$D_IN;
	if (p_27_1_3$EN) p_27_1_3 <= `BSV_ASSIGNMENT_DELAY p_27_1_3$D_IN;
	if (p_27_1_4$EN) p_27_1_4 <= `BSV_ASSIGNMENT_DELAY p_27_1_4$D_IN;
	if (p_27_1_5$EN) p_27_1_5 <= `BSV_ASSIGNMENT_DELAY p_27_1_5$D_IN;
	if (p_27_1_6$EN) p_27_1_6 <= `BSV_ASSIGNMENT_DELAY p_27_1_6$D_IN;
	if (p_27_1_7$EN) p_27_1_7 <= `BSV_ASSIGNMENT_DELAY p_27_1_7$D_IN;
	if (partial_product_0$EN)
	  partial_product_0 <= `BSV_ASSIGNMENT_DELAY partial_product_0$D_IN;
	if (partial_product_1$EN)
	  partial_product_1 <= `BSV_ASSIGNMENT_DELAY partial_product_1$D_IN;
	if (partial_product_10$EN)
	  partial_product_10 <= `BSV_ASSIGNMENT_DELAY partial_product_10$D_IN;
	if (partial_product_11$EN)
	  partial_product_11 <= `BSV_ASSIGNMENT_DELAY partial_product_11$D_IN;
	if (partial_product_12$EN)
	  partial_product_12 <= `BSV_ASSIGNMENT_DELAY partial_product_12$D_IN;
	if (partial_product_13$EN)
	  partial_product_13 <= `BSV_ASSIGNMENT_DELAY partial_product_13$D_IN;
	if (partial_product_14$EN)
	  partial_product_14 <= `BSV_ASSIGNMENT_DELAY partial_product_14$D_IN;
	if (partial_product_15$EN)
	  partial_product_15 <= `BSV_ASSIGNMENT_DELAY partial_product_15$D_IN;
	if (partial_product_16$EN)
	  partial_product_16 <= `BSV_ASSIGNMENT_DELAY partial_product_16$D_IN;
	if (partial_product_17$EN)
	  partial_product_17 <= `BSV_ASSIGNMENT_DELAY partial_product_17$D_IN;
	if (partial_product_18$EN)
	  partial_product_18 <= `BSV_ASSIGNMENT_DELAY partial_product_18$D_IN;
	if (partial_product_19$EN)
	  partial_product_19 <= `BSV_ASSIGNMENT_DELAY partial_product_19$D_IN;
	if (partial_product_2$EN)
	  partial_product_2 <= `BSV_ASSIGNMENT_DELAY partial_product_2$D_IN;
	if (partial_product_20$EN)
	  partial_product_20 <= `BSV_ASSIGNMENT_DELAY partial_product_20$D_IN;
	if (partial_product_21$EN)
	  partial_product_21 <= `BSV_ASSIGNMENT_DELAY partial_product_21$D_IN;
	if (partial_product_22$EN)
	  partial_product_22 <= `BSV_ASSIGNMENT_DELAY partial_product_22$D_IN;
	if (partial_product_23$EN)
	  partial_product_23 <= `BSV_ASSIGNMENT_DELAY partial_product_23$D_IN;
	if (partial_product_24$EN)
	  partial_product_24 <= `BSV_ASSIGNMENT_DELAY partial_product_24$D_IN;
	if (partial_product_25$EN)
	  partial_product_25 <= `BSV_ASSIGNMENT_DELAY partial_product_25$D_IN;
	if (partial_product_26$EN)
	  partial_product_26 <= `BSV_ASSIGNMENT_DELAY partial_product_26$D_IN;
	if (partial_product_27$EN)
	  partial_product_27 <= `BSV_ASSIGNMENT_DELAY partial_product_27$D_IN;
	if (partial_product_28$EN)
	  partial_product_28 <= `BSV_ASSIGNMENT_DELAY partial_product_28$D_IN;
	if (partial_product_29$EN)
	  partial_product_29 <= `BSV_ASSIGNMENT_DELAY partial_product_29$D_IN;
	if (partial_product_3$EN)
	  partial_product_3 <= `BSV_ASSIGNMENT_DELAY partial_product_3$D_IN;
	if (partial_product_30$EN)
	  partial_product_30 <= `BSV_ASSIGNMENT_DELAY partial_product_30$D_IN;
	if (partial_product_31$EN)
	  partial_product_31 <= `BSV_ASSIGNMENT_DELAY partial_product_31$D_IN;
	if (partial_product_32$EN)
	  partial_product_32 <= `BSV_ASSIGNMENT_DELAY partial_product_32$D_IN;
	if (partial_product_33$EN)
	  partial_product_33 <= `BSV_ASSIGNMENT_DELAY partial_product_33$D_IN;
	if (partial_product_34$EN)
	  partial_product_34 <= `BSV_ASSIGNMENT_DELAY partial_product_34$D_IN;
	if (partial_product_35$EN)
	  partial_product_35 <= `BSV_ASSIGNMENT_DELAY partial_product_35$D_IN;
	if (partial_product_36$EN)
	  partial_product_36 <= `BSV_ASSIGNMENT_DELAY partial_product_36$D_IN;
	if (partial_product_37$EN)
	  partial_product_37 <= `BSV_ASSIGNMENT_DELAY partial_product_37$D_IN;
	if (partial_product_38$EN)
	  partial_product_38 <= `BSV_ASSIGNMENT_DELAY partial_product_38$D_IN;
	if (partial_product_39$EN)
	  partial_product_39 <= `BSV_ASSIGNMENT_DELAY partial_product_39$D_IN;
	if (partial_product_4$EN)
	  partial_product_4 <= `BSV_ASSIGNMENT_DELAY partial_product_4$D_IN;
	if (partial_product_40$EN)
	  partial_product_40 <= `BSV_ASSIGNMENT_DELAY partial_product_40$D_IN;
	if (partial_product_41$EN)
	  partial_product_41 <= `BSV_ASSIGNMENT_DELAY partial_product_41$D_IN;
	if (partial_product_42$EN)
	  partial_product_42 <= `BSV_ASSIGNMENT_DELAY partial_product_42$D_IN;
	if (partial_product_43$EN)
	  partial_product_43 <= `BSV_ASSIGNMENT_DELAY partial_product_43$D_IN;
	if (partial_product_44$EN)
	  partial_product_44 <= `BSV_ASSIGNMENT_DELAY partial_product_44$D_IN;
	if (partial_product_45$EN)
	  partial_product_45 <= `BSV_ASSIGNMENT_DELAY partial_product_45$D_IN;
	if (partial_product_46$EN)
	  partial_product_46 <= `BSV_ASSIGNMENT_DELAY partial_product_46$D_IN;
	if (partial_product_47$EN)
	  partial_product_47 <= `BSV_ASSIGNMENT_DELAY partial_product_47$D_IN;
	if (partial_product_48$EN)
	  partial_product_48 <= `BSV_ASSIGNMENT_DELAY partial_product_48$D_IN;
	if (partial_product_49$EN)
	  partial_product_49 <= `BSV_ASSIGNMENT_DELAY partial_product_49$D_IN;
	if (partial_product_5$EN)
	  partial_product_5 <= `BSV_ASSIGNMENT_DELAY partial_product_5$D_IN;
	if (partial_product_50$EN)
	  partial_product_50 <= `BSV_ASSIGNMENT_DELAY partial_product_50$D_IN;
	if (partial_product_51$EN)
	  partial_product_51 <= `BSV_ASSIGNMENT_DELAY partial_product_51$D_IN;
	if (partial_product_52$EN)
	  partial_product_52 <= `BSV_ASSIGNMENT_DELAY partial_product_52$D_IN;
	if (partial_product_53$EN)
	  partial_product_53 <= `BSV_ASSIGNMENT_DELAY partial_product_53$D_IN;
	if (partial_product_54$EN)
	  partial_product_54 <= `BSV_ASSIGNMENT_DELAY partial_product_54$D_IN;
	if (partial_product_55$EN)
	  partial_product_55 <= `BSV_ASSIGNMENT_DELAY partial_product_55$D_IN;
	if (partial_product_56$EN)
	  partial_product_56 <= `BSV_ASSIGNMENT_DELAY partial_product_56$D_IN;
	if (partial_product_57$EN)
	  partial_product_57 <= `BSV_ASSIGNMENT_DELAY partial_product_57$D_IN;
	if (partial_product_58$EN)
	  partial_product_58 <= `BSV_ASSIGNMENT_DELAY partial_product_58$D_IN;
	if (partial_product_59$EN)
	  partial_product_59 <= `BSV_ASSIGNMENT_DELAY partial_product_59$D_IN;
	if (partial_product_6$EN)
	  partial_product_6 <= `BSV_ASSIGNMENT_DELAY partial_product_6$D_IN;
	if (partial_product_60$EN)
	  partial_product_60 <= `BSV_ASSIGNMENT_DELAY partial_product_60$D_IN;
	if (partial_product_61$EN)
	  partial_product_61 <= `BSV_ASSIGNMENT_DELAY partial_product_61$D_IN;
	if (partial_product_62$EN)
	  partial_product_62 <= `BSV_ASSIGNMENT_DELAY partial_product_62$D_IN;
	if (partial_product_63$EN)
	  partial_product_63 <= `BSV_ASSIGNMENT_DELAY partial_product_63$D_IN;
	if (partial_product_7$EN)
	  partial_product_7 <= `BSV_ASSIGNMENT_DELAY partial_product_7$D_IN;
	if (partial_product_8$EN)
	  partial_product_8 <= `BSV_ASSIGNMENT_DELAY partial_product_8$D_IN;
	if (partial_product_9$EN)
	  partial_product_9 <= `BSV_ASSIGNMENT_DELAY partial_product_9$D_IN;
	if (partials_sum_0$EN)
	  partials_sum_0 <= `BSV_ASSIGNMENT_DELAY partials_sum_0$D_IN;
	if (partials_sum_1$EN)
	  partials_sum_1 <= `BSV_ASSIGNMENT_DELAY partials_sum_1$D_IN;
	if (partials_sum_2$EN)
	  partials_sum_2 <= `BSV_ASSIGNMENT_DELAY partials_sum_2$D_IN;
	if (partials_sum_3$EN)
	  partials_sum_3 <= `BSV_ASSIGNMENT_DELAY partials_sum_3$D_IN;
	if (reg_mode$EN) reg_mode <= `BSV_ASSIGNMENT_DELAY reg_mode$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 64'hAAAAAAAAAAAAAAAA;
    flag_0 = 1'h0;
    flag_1 = 1'h0;
    flag_2 = 1'h0;
    flag_3 = 1'h0;
    inp_ready = 1'h0;
    m1 = 64'hAAAAAAAAAAAAAAAA;
    m2 = 64'hAAAAAAAAAAAAAAAA;
    mac_output_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_ready = 1'h0;
    p_20_1_0 = 16'hAAAA;
    p_20_1_1 = 16'hAAAA;
    p_20_1_2 = 16'hAAAA;
    p_20_1_3 = 16'hAAAA;
    p_20_1_4 = 16'hAAAA;
    p_20_1_5 = 16'hAAAA;
    p_20_1_6 = 16'hAAAA;
    p_20_1_7 = 16'hAAAA;
    p_21_1_0 = 16'hAAAA;
    p_21_1_1 = 16'hAAAA;
    p_21_1_2 = 16'hAAAA;
    p_21_1_3 = 16'hAAAA;
    p_21_1_4 = 16'hAAAA;
    p_21_1_5 = 16'hAAAA;
    p_21_1_6 = 16'hAAAA;
    p_21_1_7 = 16'hAAAA;
    p_22_1_0 = 16'hAAAA;
    p_22_1_1 = 16'hAAAA;
    p_22_1_2 = 16'hAAAA;
    p_22_1_3 = 16'hAAAA;
    p_22_1_4 = 16'hAAAA;
    p_22_1_5 = 16'hAAAA;
    p_22_1_6 = 16'hAAAA;
    p_22_1_7 = 16'hAAAA;
    p_23_1_0 = 16'hAAAA;
    p_23_1_1 = 16'hAAAA;
    p_23_1_2 = 16'hAAAA;
    p_23_1_3 = 16'hAAAA;
    p_23_1_4 = 16'hAAAA;
    p_23_1_5 = 16'hAAAA;
    p_23_1_6 = 16'hAAAA;
    p_23_1_7 = 16'hAAAA;
    p_24_1_0 = 16'hAAAA;
    p_24_1_1 = 16'hAAAA;
    p_24_1_2 = 16'hAAAA;
    p_24_1_3 = 16'hAAAA;
    p_24_1_4 = 16'hAAAA;
    p_24_1_5 = 16'hAAAA;
    p_24_1_6 = 16'hAAAA;
    p_24_1_7 = 16'hAAAA;
    p_25_1_0 = 16'hAAAA;
    p_25_1_1 = 16'hAAAA;
    p_25_1_2 = 16'hAAAA;
    p_25_1_3 = 16'hAAAA;
    p_25_1_4 = 16'hAAAA;
    p_25_1_5 = 16'hAAAA;
    p_25_1_6 = 16'hAAAA;
    p_25_1_7 = 16'hAAAA;
    p_26_1_0 = 16'hAAAA;
    p_26_1_1 = 16'hAAAA;
    p_26_1_2 = 16'hAAAA;
    p_26_1_3 = 16'hAAAA;
    p_26_1_4 = 16'hAAAA;
    p_26_1_5 = 16'hAAAA;
    p_26_1_6 = 16'hAAAA;
    p_26_1_7 = 16'hAAAA;
    p_27_1_0 = 16'hAAAA;
    p_27_1_1 = 16'hAAAA;
    p_27_1_2 = 16'hAAAA;
    p_27_1_3 = 16'hAAAA;
    p_27_1_4 = 16'hAAAA;
    p_27_1_5 = 16'hAAAA;
    p_27_1_6 = 16'hAAAA;
    p_27_1_7 = 16'hAAAA;
    partial_product_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_10 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_11 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_12 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_13 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_14 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_15 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_16 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_17 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_18 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_19 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_20 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_21 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_22 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_23 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_24 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_25 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_26 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_27 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_28 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_29 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_30 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_31 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_32 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_33 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_34 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_35 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_36 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_37 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_38 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_39 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_4 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_40 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_41 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_42 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_43 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_44 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_45 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_46 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_47 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_48 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_49 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_5 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_50 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_51 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_52 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_53 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_54 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_55 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_56 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_57 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_58 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_59 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_6 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_60 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_61 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_62 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_63 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_7 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_8 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_9 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partials_sum_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partials_sum_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partials_sum_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partials_sum_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    reg_mode = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC

