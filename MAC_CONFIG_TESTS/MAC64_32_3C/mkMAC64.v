//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Tue May  9 01:26:55 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_inputs                 O     1
// mac_result                     O   128
// RDY_mac_result                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_inputs_multiplicand1       I    64
// get_inputs_multiplicand2       I    64
// get_inputs_addend              I    64
// get_inputs_mode                I     1 reg
// EN_get_inputs                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC64(CLK,
	       RST_N,

	       get_inputs_multiplicand1,
	       get_inputs_multiplicand2,
	       get_inputs_addend,
	       get_inputs_mode,
	       EN_get_inputs,
	       RDY_get_inputs,

	       mac_result,
	       RDY_mac_result);
  input  CLK;
  input  RST_N;

  // action method get_inputs
  input  [63 : 0] get_inputs_multiplicand1;
  input  [63 : 0] get_inputs_multiplicand2;
  input  [63 : 0] get_inputs_addend;
  input  get_inputs_mode;
  input  EN_get_inputs;
  output RDY_get_inputs;

  // value method mac_result
  output [127 : 0] mac_result;
  output RDY_mac_result;

  // signals for module outputs
  wire [127 : 0] mac_result;
  wire RDY_get_inputs, RDY_mac_result;

  // inlined wires
  wire [320 : 0] partial_product_1_rv$port1__read,
		 partial_product_1_rv$port1__write_1,
		 partial_product_1_rv$port2__read,
		 partial_product_2_rv$port1__read,
		 partial_product_2_rv$port1__write_1,
		 partial_product_2_rv$port2__read;
  wire [192 : 0] mac_inputs_1_rv$port1__read,
		 mac_inputs_1_rv$port1__write_1,
		 mac_inputs_1_rv$port2__read,
		 mac_inputs_2_rv$port1__read,
		 mac_inputs_2_rv$port1__write_1,
		 mac_inputs_2_rv$port2__read;
  wire [128 : 0] mac_output_rv$port1__write_1, mac_output_rv$port2__read;
  wire mac_output_rv$EN_port1__write, partial_product_1_rv$EN_port0__write;

  // register mac_inputs_1_rv
  reg [192 : 0] mac_inputs_1_rv;
  wire [192 : 0] mac_inputs_1_rv$D_IN;
  wire mac_inputs_1_rv$EN;

  // register mac_inputs_2_rv
  reg [192 : 0] mac_inputs_2_rv;
  wire [192 : 0] mac_inputs_2_rv$D_IN;
  wire mac_inputs_2_rv$EN;

  // register mac_output_rv
  reg [128 : 0] mac_output_rv;
  wire [128 : 0] mac_output_rv$D_IN;
  wire mac_output_rv$EN;

  // register mode_r
  reg mode_r;
  wire mode_r$D_IN, mode_r$EN;

  // register partial_product_1_rv
  reg [320 : 0] partial_product_1_rv;
  wire [320 : 0] partial_product_1_rv$D_IN;
  wire partial_product_1_rv$EN;

  // register partial_product_2_rv
  reg [320 : 0] partial_product_2_rv;
  wire [320 : 0] partial_product_2_rv$D_IN;
  wire partial_product_2_rv$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_generate_partials_1,
       CAN_FIRE_RL_rl_generate_partials_2,
       CAN_FIRE_RL_rl_mac_32,
       CAN_FIRE_RL_rl_mac_64,
       CAN_FIRE_get_inputs,
       WILL_FIRE_RL_rl_generate_partials_1,
       WILL_FIRE_RL_rl_generate_partials_2,
       WILL_FIRE_RL_rl_mac_32,
       WILL_FIRE_RL_rl_mac_64,
       WILL_FIRE_get_inputs;

  // inputs to muxes for submodule ports
  wire [128 : 0] MUX_mac_output_rv$port1__write_1__VAL_1,
		 MUX_mac_output_rv$port1__write_1__VAL_2;

  // remaining internal signals
  wire [127 : 0] x166_PLUS_y167__q3,
		 x328_PLUS_y329__q4,
		 x450_PLUS_y451__q5,
		 x730_PLUS_y731__q1,
		 x812_PLUS_y813__q2,
		 x__h4428,
		 x__h4430,
		 x__h4432,
		 x__h4434,
		 x__h4436,
		 x__h4438,
		 x__h4440,
		 x__h4730,
		 x__h4812,
		 x__h4814,
		 x__h5166,
		 x__h5168,
		 x__h5170,
		 x__h5328,
		 x__h5330,
		 x__h5450,
		 y__h4429,
		 y__h4431,
		 y__h4433,
		 y__h4435,
		 y__h4437,
		 y__h4439,
		 y__h4441,
		 y__h4731,
		 y__h4813,
		 y__h4815,
		 y__h5167,
		 y__h5169,
		 y__h5171,
		 y__h5329,
		 y__h5331,
		 y__h5451;
  wire [63 : 0] _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_143__ETC___d42,
		_0_CONCAT_mac_inputs_1_rv_port0__read_BITS_143__ETC___d44,
		_0_CONCAT_mac_inputs_1_rv_port0__read_BITS_159__ETC___d33,
		_0_CONCAT_mac_inputs_1_rv_port0__read_BITS_159__ETC___d37,
		_0_CONCAT_mac_inputs_1_rv_port0__read_BITS_175__ETC___d24,
		_0_CONCAT_mac_inputs_1_rv_port0__read_BITS_175__ETC___d26,
		_0_CONCAT_mac_inputs_1_rv_port0__read_BITS_191__ETC___d15,
		_0_CONCAT_mac_inputs_1_rv_port0__read_BITS_191__ETC___d19,
		_0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d64,
		_0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d70,
		_0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d75,
		_0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d79,
		_0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d84,
		_0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d88,
		_0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d91,
		_0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d93,
		mac_32_1__h5732,
		mac_32_2__h5733,
		x793_PLUS_y794__q6,
		x932_PLUS_y933__q7,
		x__h5753,
		x__h5755,
		x__h5757,
		x__h5793,
		x__h5892,
		x__h5894,
		x__h5896,
		x__h5932,
		y__h5754,
		y__h5756,
		y__h5758,
		y__h5794,
		y__h5893,
		y__h5895,
		y__h5897,
		y__h5933;

  // action method get_inputs
  assign RDY_get_inputs = !mac_inputs_1_rv$port1__read[192] ;
  assign CAN_FIRE_get_inputs = !mac_inputs_1_rv$port1__read[192] ;
  assign WILL_FIRE_get_inputs = EN_get_inputs ;

  // value method mac_result
  assign mac_result = mac_output_rv[127:0] ;
  assign RDY_mac_result = mac_output_rv[128] ;

  // rule RL_rl_mac_64
  assign CAN_FIRE_RL_rl_mac_64 =
	     partial_product_1_rv[320] && partial_product_2_rv[320] &&
	     !mac_output_rv[128] &&
	     mode_r ;
  assign WILL_FIRE_RL_rl_mac_64 = CAN_FIRE_RL_rl_mac_64 ;

  // rule RL_rl_generate_partials_2
  assign CAN_FIRE_RL_rl_generate_partials_2 =
	     mac_inputs_2_rv[192] && !partial_product_2_rv$port1__read[320] &&
	     mode_r ;
  assign WILL_FIRE_RL_rl_generate_partials_2 =
	     CAN_FIRE_RL_rl_generate_partials_2 ;

  // rule RL_rl_mac_32
  assign CAN_FIRE_RL_rl_mac_32 =
	     partial_product_1_rv[320] && !mac_output_rv[128] && !mode_r ;
  assign WILL_FIRE_RL_rl_mac_32 = CAN_FIRE_RL_rl_mac_32 ;

  // rule RL_rl_generate_partials_1
  assign CAN_FIRE_RL_rl_generate_partials_1 =
	     mac_inputs_1_rv[192] && !partial_product_1_rv$port1__read[320] &&
	     !mac_inputs_2_rv$port1__read[192] ;
  assign WILL_FIRE_RL_rl_generate_partials_1 =
	     CAN_FIRE_RL_rl_generate_partials_1 ;

  // inputs to muxes for submodule ports
  assign MUX_mac_output_rv$port1__write_1__VAL_1 =
	     { 1'd1, x__h4428 + y__h4429 } ;
  assign MUX_mac_output_rv$port1__write_1__VAL_2 =
	     { 1'd1, mac_32_2__h5733, mac_32_1__h5732 } ;

  // inlined wires
  assign mac_inputs_1_rv$port1__read =
	     CAN_FIRE_RL_rl_generate_partials_1 ?
	       193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       mac_inputs_1_rv ;
  assign mac_inputs_1_rv$port1__write_1 =
	     { 1'd1,
	       get_inputs_multiplicand1,
	       get_inputs_multiplicand2,
	       get_inputs_addend } ;
  assign mac_inputs_1_rv$port2__read =
	     EN_get_inputs ?
	       mac_inputs_1_rv$port1__write_1 :
	       mac_inputs_1_rv$port1__read ;
  assign partial_product_1_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_mac_32 || WILL_FIRE_RL_rl_mac_64 ;
  assign partial_product_1_rv$port1__read =
	     partial_product_1_rv$EN_port0__write ?
	       321'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       partial_product_1_rv ;
  assign partial_product_1_rv$port1__write_1 =
	     { 1'd1,
	       _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_191__ETC___d15[31:0],
	       _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_191__ETC___d19[31:0],
	       _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_175__ETC___d24[31:0],
	       _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_175__ETC___d26[31:0],
	       _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_159__ETC___d33[31:0],
	       _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_159__ETC___d37[31:0],
	       _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_143__ETC___d42[31:0],
	       _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_143__ETC___d44[31:0],
	       mac_inputs_1_rv[63:0] } ;
  assign partial_product_1_rv$port2__read =
	     CAN_FIRE_RL_rl_generate_partials_1 ?
	       partial_product_1_rv$port1__write_1 :
	       partial_product_1_rv$port1__read ;
  assign mac_inputs_2_rv$port1__read =
	     CAN_FIRE_RL_rl_generate_partials_2 ?
	       193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       mac_inputs_2_rv ;
  assign mac_inputs_2_rv$port1__write_1 = { 1'd1, mac_inputs_1_rv[191:0] } ;
  assign mac_inputs_2_rv$port2__read =
	     CAN_FIRE_RL_rl_generate_partials_1 ?
	       mac_inputs_2_rv$port1__write_1 :
	       mac_inputs_2_rv$port1__read ;
  assign partial_product_2_rv$port1__read =
	     CAN_FIRE_RL_rl_mac_64 ?
	       321'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       partial_product_2_rv ;
  assign partial_product_2_rv$port1__write_1 =
	     { 1'd1,
	       _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d64[31:0],
	       _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d70[31:0],
	       _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d75[31:0],
	       _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d79[31:0],
	       _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d84[31:0],
	       _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d88[31:0],
	       _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d91[31:0],
	       _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d93[31:0],
	       mac_inputs_2_rv[63:0] } ;
  assign partial_product_2_rv$port2__read =
	     CAN_FIRE_RL_rl_generate_partials_2 ?
	       partial_product_2_rv$port1__write_1 :
	       partial_product_2_rv$port1__read ;
  assign mac_output_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_mac_64 || WILL_FIRE_RL_rl_mac_32 ;
  assign mac_output_rv$port1__write_1 =
	     WILL_FIRE_RL_rl_mac_64 ?
	       MUX_mac_output_rv$port1__write_1__VAL_1 :
	       MUX_mac_output_rv$port1__write_1__VAL_2 ;
  assign mac_output_rv$port2__read =
	     mac_output_rv$EN_port1__write ?
	       mac_output_rv$port1__write_1 :
	       mac_output_rv ;

  // register mac_inputs_1_rv
  assign mac_inputs_1_rv$D_IN = mac_inputs_1_rv$port2__read ;
  assign mac_inputs_1_rv$EN = 1'b1 ;

  // register mac_inputs_2_rv
  assign mac_inputs_2_rv$D_IN = mac_inputs_2_rv$port2__read ;
  assign mac_inputs_2_rv$EN = 1'b1 ;

  // register mac_output_rv
  assign mac_output_rv$D_IN = mac_output_rv$port2__read ;
  assign mac_output_rv$EN = 1'b1 ;

  // register mode_r
  assign mode_r$D_IN = get_inputs_mode ;
  assign mode_r$EN = EN_get_inputs ;

  // register partial_product_1_rv
  assign partial_product_1_rv$D_IN = partial_product_1_rv$port2__read ;
  assign partial_product_1_rv$EN = 1'b1 ;

  // register partial_product_2_rv
  assign partial_product_2_rv$D_IN = partial_product_2_rv$port2__read ;
  assign partial_product_2_rv$EN = 1'b1 ;

  // remaining internal signals
  assign _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_143__ETC___d42 =
	     { 16'd0, mac_inputs_1_rv[143:128] } *
	     { 16'd0, mac_inputs_1_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_143__ETC___d44 =
	     { 16'd0, mac_inputs_1_rv[143:128] } *
	     { 16'd0, mac_inputs_1_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_159__ETC___d33 =
	     { 16'd0, mac_inputs_1_rv[159:144] } *
	     { 16'd0, mac_inputs_1_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_159__ETC___d37 =
	     { 16'd0, mac_inputs_1_rv[159:144] } *
	     { 16'd0, mac_inputs_1_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_175__ETC___d24 =
	     { 16'd0, mac_inputs_1_rv[175:160] } *
	     { 16'd0, mac_inputs_1_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_175__ETC___d26 =
	     { 16'd0, mac_inputs_1_rv[175:160] } *
	     { 16'd0, mac_inputs_1_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_191__ETC___d15 =
	     { 16'd0, mac_inputs_1_rv[191:176] } *
	     { 16'd0, mac_inputs_1_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_1_rv_port0__read_BITS_191__ETC___d19 =
	     { 16'd0, mac_inputs_1_rv[191:176] } *
	     { 16'd0, mac_inputs_1_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d64 =
	     { 16'd0, mac_inputs_2_rv[191:176] } *
	     { 16'd0, mac_inputs_2_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d70 =
	     { 16'd0, mac_inputs_2_rv[159:144] } *
	     { 16'd0, mac_inputs_2_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d75 =
	     { 16'd0, mac_inputs_2_rv[191:176] } *
	     { 16'd0, mac_inputs_2_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d79 =
	     { 16'd0, mac_inputs_2_rv[175:160] } *
	     { 16'd0, mac_inputs_2_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d84 =
	     { 16'd0, mac_inputs_2_rv[159:144] } *
	     { 16'd0, mac_inputs_2_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d88 =
	     { 16'd0, mac_inputs_2_rv[143:128] } *
	     { 16'd0, mac_inputs_2_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d91 =
	     { 16'd0, mac_inputs_2_rv[175:160] } *
	     { 16'd0, mac_inputs_2_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_2_rv_port0__read__2_BITS_1_ETC___d93 =
	     { 16'd0, mac_inputs_2_rv[143:128] } *
	     { 16'd0, mac_inputs_2_rv[111:96] } ;
  assign mac_32_1__h5732 = x__h5892 + y__h5893 ;
  assign mac_32_2__h5733 = x__h5753 + y__h5754 ;
  assign x166_PLUS_y167__q3 = x__h5166 + y__h5167 ;
  assign x328_PLUS_y329__q4 = x__h5328 + y__h5329 ;
  assign x450_PLUS_y451__q5 = x__h5450 + y__h5451 ;
  assign x730_PLUS_y731__q1 = x__h4730 + y__h4731 ;
  assign x793_PLUS_y794__q6 = x__h5793 + y__h5794 ;
  assign x812_PLUS_y813__q2 = x__h4812 + y__h4813 ;
  assign x932_PLUS_y933__q7 = x__h5932 + y__h5933 ;
  assign x__h4428 = x__h4430 + y__h4431 ;
  assign x__h4430 = x__h4432 + y__h4433 ;
  assign x__h4432 = x__h4434 + y__h4435 ;
  assign x__h4434 = x__h4436 + y__h4437 ;
  assign x__h4436 = x__h4438 + y__h4439 ;
  assign x__h4438 = x__h4440 + y__h4441 ;
  assign x__h4440 = { 96'd0, partial_product_1_rv[95:64] } ;
  assign x__h4730 = { 96'd0, partial_product_1_rv[127:96] } ;
  assign x__h4812 = x__h4814 + y__h4815 ;
  assign x__h4814 = { 96'd0, partial_product_2_rv[95:64] } ;
  assign x__h5166 = x__h5168 + y__h5169 ;
  assign x__h5168 = x__h5170 + y__h5171 ;
  assign x__h5170 = { 96'd0, partial_product_2_rv[159:128] } ;
  assign x__h5328 = x__h5330 + y__h5331 ;
  assign x__h5330 = { 96'd0, partial_product_2_rv[287:256] } ;
  assign x__h5450 = { 96'd0, partial_product_1_rv[255:224] } ;
  assign x__h5753 = x__h5755 + y__h5756 ;
  assign x__h5755 = x__h5757 + y__h5758 ;
  assign x__h5757 = { 32'd0, partial_product_1_rv[223:192] } ;
  assign x__h5793 = { 32'd0, partial_product_1_rv[255:224] } ;
  assign x__h5892 = x__h5894 + y__h5895 ;
  assign x__h5894 = x__h5896 + y__h5897 ;
  assign x__h5896 = { 32'd0, partial_product_1_rv[95:64] } ;
  assign x__h5932 = { 32'd0, partial_product_1_rv[127:96] } ;
  assign y__h4429 = { 64'd0, partial_product_2_rv[63:0] } ;
  assign y__h4431 = { partial_product_1_rv[319:288], 96'd0 } ;
  assign y__h4433 = { x450_PLUS_y451__q5[47:0], 80'd0 } ;
  assign y__h4435 = { x328_PLUS_y329__q4[63:0], 64'd0 } ;
  assign y__h4437 = { x166_PLUS_y167__q3[79:0], 48'd0 } ;
  assign y__h4439 = { x812_PLUS_y813__q2[95:0], 32'd0 } ;
  assign y__h4441 = { x730_PLUS_y731__q1[111:0], 16'd0 } ;
  assign y__h4731 = { 96'd0, partial_product_1_rv[159:128] } ;
  assign y__h4813 = { 96'd0, partial_product_2_rv[127:96] } ;
  assign y__h4815 = { 96'd0, partial_product_1_rv[191:160] } ;
  assign y__h5167 = { 96'd0, partial_product_2_rv[255:224] } ;
  assign y__h5169 = { 96'd0, partial_product_2_rv[223:192] } ;
  assign y__h5171 = { 96'd0, partial_product_2_rv[191:160] } ;
  assign y__h5329 = { 96'd0, partial_product_2_rv[319:288] } ;
  assign y__h5331 = { 96'd0, partial_product_1_rv[223:192] } ;
  assign y__h5451 = { 96'd0, partial_product_1_rv[287:256] } ;
  assign y__h5754 = { 32'd0, partial_product_1_rv[63:32] } ;
  assign y__h5756 = { partial_product_1_rv[319:288], 32'd0 } ;
  assign y__h5758 = { x793_PLUS_y794__q6[47:0], 16'd0 } ;
  assign y__h5794 = { 32'd0, partial_product_1_rv[287:256] } ;
  assign y__h5893 = { 32'd0, partial_product_1_rv[31:0] } ;
  assign y__h5895 = { partial_product_1_rv[191:160], 32'd0 } ;
  assign y__h5897 = { x932_PLUS_y933__q7[47:0], 16'd0 } ;
  assign y__h5933 = { 32'd0, partial_product_1_rv[159:128] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        mac_inputs_1_rv <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	mac_inputs_2_rv <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	mac_output_rv <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	mode_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	partial_product_1_rv <= `BSV_ASSIGNMENT_DELAY
	    321'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	partial_product_2_rv <= `BSV_ASSIGNMENT_DELAY
	    321'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (mac_inputs_1_rv$EN)
	  mac_inputs_1_rv <= `BSV_ASSIGNMENT_DELAY mac_inputs_1_rv$D_IN;
	if (mac_inputs_2_rv$EN)
	  mac_inputs_2_rv <= `BSV_ASSIGNMENT_DELAY mac_inputs_2_rv$D_IN;
	if (mac_output_rv$EN)
	  mac_output_rv <= `BSV_ASSIGNMENT_DELAY mac_output_rv$D_IN;
	if (mode_r$EN) mode_r <= `BSV_ASSIGNMENT_DELAY mode_r$D_IN;
	if (partial_product_1_rv$EN)
	  partial_product_1_rv <= `BSV_ASSIGNMENT_DELAY
	      partial_product_1_rv$D_IN;
	if (partial_product_2_rv$EN)
	  partial_product_2_rv <= `BSV_ASSIGNMENT_DELAY
	      partial_product_2_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    mac_inputs_1_rv = 193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_inputs_2_rv = 193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_rv = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mode_r = 1'h0;
    partial_product_1_rv =
	321'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_product_2_rv =
	321'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC64

