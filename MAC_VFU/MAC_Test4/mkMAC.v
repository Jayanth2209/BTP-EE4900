//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Mon Apr 10 23:40:45 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_values                 O     1 const
// mac_result                     O   128
// RDY_mac_result                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_values_multiplicand1       I    64
// get_values_multiplicand2       I    64
// get_values_addend              I    64
// get_values_mode                I     2
// EN_get_values                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC(CLK,
	     RST_N,

	     get_values_multiplicand1,
	     get_values_multiplicand2,
	     get_values_addend,
	     get_values_mode,
	     EN_get_values,
	     RDY_get_values,

	     mac_result,
	     RDY_mac_result);
  input  CLK;
  input  RST_N;

  // action method get_values
  input  [63 : 0] get_values_multiplicand1;
  input  [63 : 0] get_values_multiplicand2;
  input  [63 : 0] get_values_addend;
  input  [1 : 0] get_values_mode;
  input  EN_get_values;
  output RDY_get_values;

  // value method mac_result
  output [127 : 0] mac_result;
  output RDY_mac_result;

  // signals for module outputs
  reg [127 : 0] mac_result;
  wire RDY_get_values, RDY_mac_result;

  // register a
  reg [63 : 0] a;
  wire [63 : 0] a$D_IN;
  wire a$EN;

  // register b0a_0
  reg [15 : 0] b0a_0;
  wire [15 : 0] b0a_0$D_IN;
  wire b0a_0$EN;

  // register b0a_1
  reg [15 : 0] b0a_1;
  wire [15 : 0] b0a_1$D_IN;
  wire b0a_1$EN;

  // register b0a_2
  reg [15 : 0] b0a_2;
  wire [15 : 0] b0a_2$D_IN;
  wire b0a_2$EN;

  // register b0a_3
  reg [15 : 0] b0a_3;
  wire [15 : 0] b0a_3$D_IN;
  wire b0a_3$EN;

  // register b0a_4
  reg [15 : 0] b0a_4;
  wire [15 : 0] b0a_4$D_IN;
  wire b0a_4$EN;

  // register b0a_5
  reg [15 : 0] b0a_5;
  wire [15 : 0] b0a_5$D_IN;
  wire b0a_5$EN;

  // register b0a_6
  reg [15 : 0] b0a_6;
  wire [15 : 0] b0a_6$D_IN;
  wire b0a_6$EN;

  // register b0a_7
  reg [15 : 0] b0a_7;
  wire [15 : 0] b0a_7$D_IN;
  wire b0a_7$EN;

  // register b1a_0
  reg [15 : 0] b1a_0;
  wire [15 : 0] b1a_0$D_IN;
  wire b1a_0$EN;

  // register b1a_1
  reg [15 : 0] b1a_1;
  wire [15 : 0] b1a_1$D_IN;
  wire b1a_1$EN;

  // register b1a_2
  reg [15 : 0] b1a_2;
  wire [15 : 0] b1a_2$D_IN;
  wire b1a_2$EN;

  // register b1a_3
  reg [15 : 0] b1a_3;
  wire [15 : 0] b1a_3$D_IN;
  wire b1a_3$EN;

  // register b1a_4
  reg [15 : 0] b1a_4;
  wire [15 : 0] b1a_4$D_IN;
  wire b1a_4$EN;

  // register b1a_5
  reg [15 : 0] b1a_5;
  wire [15 : 0] b1a_5$D_IN;
  wire b1a_5$EN;

  // register b1a_6
  reg [15 : 0] b1a_6;
  wire [15 : 0] b1a_6$D_IN;
  wire b1a_6$EN;

  // register b1a_7
  reg [15 : 0] b1a_7;
  wire [15 : 0] b1a_7$D_IN;
  wire b1a_7$EN;

  // register b2a_0
  reg [15 : 0] b2a_0;
  wire [15 : 0] b2a_0$D_IN;
  wire b2a_0$EN;

  // register b2a_1
  reg [15 : 0] b2a_1;
  wire [15 : 0] b2a_1$D_IN;
  wire b2a_1$EN;

  // register b2a_2
  reg [15 : 0] b2a_2;
  wire [15 : 0] b2a_2$D_IN;
  wire b2a_2$EN;

  // register b2a_3
  reg [15 : 0] b2a_3;
  wire [15 : 0] b2a_3$D_IN;
  wire b2a_3$EN;

  // register b2a_4
  reg [15 : 0] b2a_4;
  wire [15 : 0] b2a_4$D_IN;
  wire b2a_4$EN;

  // register b2a_5
  reg [15 : 0] b2a_5;
  wire [15 : 0] b2a_5$D_IN;
  wire b2a_5$EN;

  // register b2a_6
  reg [15 : 0] b2a_6;
  wire [15 : 0] b2a_6$D_IN;
  wire b2a_6$EN;

  // register b2a_7
  reg [15 : 0] b2a_7;
  wire [15 : 0] b2a_7$D_IN;
  wire b2a_7$EN;

  // register b3a_0
  reg [15 : 0] b3a_0;
  wire [15 : 0] b3a_0$D_IN;
  wire b3a_0$EN;

  // register b3a_1
  reg [15 : 0] b3a_1;
  wire [15 : 0] b3a_1$D_IN;
  wire b3a_1$EN;

  // register b3a_2
  reg [15 : 0] b3a_2;
  wire [15 : 0] b3a_2$D_IN;
  wire b3a_2$EN;

  // register b3a_3
  reg [15 : 0] b3a_3;
  wire [15 : 0] b3a_3$D_IN;
  wire b3a_3$EN;

  // register b3a_4
  reg [15 : 0] b3a_4;
  wire [15 : 0] b3a_4$D_IN;
  wire b3a_4$EN;

  // register b3a_5
  reg [15 : 0] b3a_5;
  wire [15 : 0] b3a_5$D_IN;
  wire b3a_5$EN;

  // register b3a_6
  reg [15 : 0] b3a_6;
  wire [15 : 0] b3a_6$D_IN;
  wire b3a_6$EN;

  // register b3a_7
  reg [15 : 0] b3a_7;
  wire [15 : 0] b3a_7$D_IN;
  wire b3a_7$EN;

  // register b4a_0
  reg [15 : 0] b4a_0;
  wire [15 : 0] b4a_0$D_IN;
  wire b4a_0$EN;

  // register b4a_1
  reg [15 : 0] b4a_1;
  wire [15 : 0] b4a_1$D_IN;
  wire b4a_1$EN;

  // register b4a_2
  reg [15 : 0] b4a_2;
  wire [15 : 0] b4a_2$D_IN;
  wire b4a_2$EN;

  // register b4a_3
  reg [15 : 0] b4a_3;
  wire [15 : 0] b4a_3$D_IN;
  wire b4a_3$EN;

  // register b4a_4
  reg [15 : 0] b4a_4;
  wire [15 : 0] b4a_4$D_IN;
  wire b4a_4$EN;

  // register b4a_5
  reg [15 : 0] b4a_5;
  wire [15 : 0] b4a_5$D_IN;
  wire b4a_5$EN;

  // register b4a_6
  reg [15 : 0] b4a_6;
  wire [15 : 0] b4a_6$D_IN;
  wire b4a_6$EN;

  // register b4a_7
  reg [15 : 0] b4a_7;
  wire [15 : 0] b4a_7$D_IN;
  wire b4a_7$EN;

  // register b5a_0
  reg [15 : 0] b5a_0;
  wire [15 : 0] b5a_0$D_IN;
  wire b5a_0$EN;

  // register b5a_1
  reg [15 : 0] b5a_1;
  wire [15 : 0] b5a_1$D_IN;
  wire b5a_1$EN;

  // register b5a_2
  reg [15 : 0] b5a_2;
  wire [15 : 0] b5a_2$D_IN;
  wire b5a_2$EN;

  // register b5a_3
  reg [15 : 0] b5a_3;
  wire [15 : 0] b5a_3$D_IN;
  wire b5a_3$EN;

  // register b5a_4
  reg [15 : 0] b5a_4;
  wire [15 : 0] b5a_4$D_IN;
  wire b5a_4$EN;

  // register b5a_5
  reg [15 : 0] b5a_5;
  wire [15 : 0] b5a_5$D_IN;
  wire b5a_5$EN;

  // register b5a_6
  reg [15 : 0] b5a_6;
  wire [15 : 0] b5a_6$D_IN;
  wire b5a_6$EN;

  // register b5a_7
  reg [15 : 0] b5a_7;
  wire [15 : 0] b5a_7$D_IN;
  wire b5a_7$EN;

  // register b6a_0
  reg [15 : 0] b6a_0;
  wire [15 : 0] b6a_0$D_IN;
  wire b6a_0$EN;

  // register b6a_1
  reg [15 : 0] b6a_1;
  wire [15 : 0] b6a_1$D_IN;
  wire b6a_1$EN;

  // register b6a_2
  reg [15 : 0] b6a_2;
  wire [15 : 0] b6a_2$D_IN;
  wire b6a_2$EN;

  // register b6a_3
  reg [15 : 0] b6a_3;
  wire [15 : 0] b6a_3$D_IN;
  wire b6a_3$EN;

  // register b6a_4
  reg [15 : 0] b6a_4;
  wire [15 : 0] b6a_4$D_IN;
  wire b6a_4$EN;

  // register b6a_5
  reg [15 : 0] b6a_5;
  wire [15 : 0] b6a_5$D_IN;
  wire b6a_5$EN;

  // register b6a_6
  reg [15 : 0] b6a_6;
  wire [15 : 0] b6a_6$D_IN;
  wire b6a_6$EN;

  // register b6a_7
  reg [15 : 0] b6a_7;
  wire [15 : 0] b6a_7$D_IN;
  wire b6a_7$EN;

  // register b7a_0
  reg [15 : 0] b7a_0;
  wire [15 : 0] b7a_0$D_IN;
  wire b7a_0$EN;

  // register b7a_1
  reg [15 : 0] b7a_1;
  wire [15 : 0] b7a_1$D_IN;
  wire b7a_1$EN;

  // register b7a_2
  reg [15 : 0] b7a_2;
  wire [15 : 0] b7a_2$D_IN;
  wire b7a_2$EN;

  // register b7a_3
  reg [15 : 0] b7a_3;
  wire [15 : 0] b7a_3$D_IN;
  wire b7a_3$EN;

  // register b7a_4
  reg [15 : 0] b7a_4;
  wire [15 : 0] b7a_4$D_IN;
  wire b7a_4$EN;

  // register b7a_5
  reg [15 : 0] b7a_5;
  wire [15 : 0] b7a_5$D_IN;
  wire b7a_5$EN;

  // register b7a_6
  reg [15 : 0] b7a_6;
  wire [15 : 0] b7a_6$D_IN;
  wire b7a_6$EN;

  // register b7a_7
  reg [15 : 0] b7a_7;
  wire [15 : 0] b7a_7$D_IN;
  wire b7a_7$EN;

  // register flag_0
  reg flag_0;
  wire flag_0$D_IN, flag_0$EN;

  // register flag_1
  reg flag_1;
  wire flag_1$D_IN, flag_1$EN;

  // register flag_2
  reg flag_2;
  wire flag_2$D_IN, flag_2$EN;

  // register flag_3
  reg flag_3;
  wire flag_3$D_IN, flag_3$EN;

  // register inp_ready
  reg inp_ready;
  wire inp_ready$D_IN, inp_ready$EN;

  // register m1
  reg [63 : 0] m1;
  wire [63 : 0] m1$D_IN;
  wire m1$EN;

  // register m2
  reg [63 : 0] m2;
  wire [63 : 0] m2$D_IN;
  wire m2$EN;

  // register mac_output_0
  reg [127 : 0] mac_output_0;
  wire [127 : 0] mac_output_0$D_IN;
  wire mac_output_0$EN;

  // register mac_output_1
  reg [127 : 0] mac_output_1;
  wire [127 : 0] mac_output_1$D_IN;
  wire mac_output_1$EN;

  // register mac_output_2
  reg [127 : 0] mac_output_2;
  wire [127 : 0] mac_output_2$D_IN;
  wire mac_output_2$EN;

  // register mac_output_3
  reg [127 : 0] mac_output_3;
  wire [127 : 0] mac_output_3$D_IN;
  wire mac_output_3$EN;

  // register mac_ready
  reg mac_ready;
  wire mac_ready$D_IN, mac_ready$EN;

  // register partial_sum_0
  reg [127 : 0] partial_sum_0;
  wire [127 : 0] partial_sum_0$D_IN;
  wire partial_sum_0$EN;

  // register partial_sum_1
  reg [127 : 0] partial_sum_1;
  wire [127 : 0] partial_sum_1$D_IN;
  wire partial_sum_1$EN;

  // register partial_sum_10
  reg [127 : 0] partial_sum_10;
  wire [127 : 0] partial_sum_10$D_IN;
  wire partial_sum_10$EN;

  // register partial_sum_11
  reg [127 : 0] partial_sum_11;
  wire [127 : 0] partial_sum_11$D_IN;
  wire partial_sum_11$EN;

  // register partial_sum_12
  reg [127 : 0] partial_sum_12;
  wire [127 : 0] partial_sum_12$D_IN;
  wire partial_sum_12$EN;

  // register partial_sum_13
  reg [127 : 0] partial_sum_13;
  wire [127 : 0] partial_sum_13$D_IN;
  wire partial_sum_13$EN;

  // register partial_sum_14
  reg [127 : 0] partial_sum_14;
  wire [127 : 0] partial_sum_14$D_IN;
  wire partial_sum_14$EN;

  // register partial_sum_15
  reg [127 : 0] partial_sum_15;
  wire [127 : 0] partial_sum_15$D_IN;
  wire partial_sum_15$EN;

  // register partial_sum_16
  reg [127 : 0] partial_sum_16;
  wire [127 : 0] partial_sum_16$D_IN;
  wire partial_sum_16$EN;

  // register partial_sum_17
  reg [127 : 0] partial_sum_17;
  wire [127 : 0] partial_sum_17$D_IN;
  wire partial_sum_17$EN;

  // register partial_sum_18
  reg [127 : 0] partial_sum_18;
  wire [127 : 0] partial_sum_18$D_IN;
  wire partial_sum_18$EN;

  // register partial_sum_19
  reg [127 : 0] partial_sum_19;
  wire [127 : 0] partial_sum_19$D_IN;
  wire partial_sum_19$EN;

  // register partial_sum_2
  reg [127 : 0] partial_sum_2;
  wire [127 : 0] partial_sum_2$D_IN;
  wire partial_sum_2$EN;

  // register partial_sum_20
  reg [127 : 0] partial_sum_20;
  wire [127 : 0] partial_sum_20$D_IN;
  wire partial_sum_20$EN;

  // register partial_sum_21
  reg [127 : 0] partial_sum_21;
  wire [127 : 0] partial_sum_21$D_IN;
  wire partial_sum_21$EN;

  // register partial_sum_22
  reg [127 : 0] partial_sum_22;
  wire [127 : 0] partial_sum_22$D_IN;
  wire partial_sum_22$EN;

  // register partial_sum_23
  reg [127 : 0] partial_sum_23;
  wire [127 : 0] partial_sum_23$D_IN;
  wire partial_sum_23$EN;

  // register partial_sum_3
  reg [127 : 0] partial_sum_3;
  wire [127 : 0] partial_sum_3$D_IN;
  wire partial_sum_3$EN;

  // register partial_sum_4
  reg [127 : 0] partial_sum_4;
  wire [127 : 0] partial_sum_4$D_IN;
  wire partial_sum_4$EN;

  // register partial_sum_5
  reg [127 : 0] partial_sum_5;
  wire [127 : 0] partial_sum_5$D_IN;
  wire partial_sum_5$EN;

  // register partial_sum_6
  reg [127 : 0] partial_sum_6;
  wire [127 : 0] partial_sum_6$D_IN;
  wire partial_sum_6$EN;

  // register partial_sum_7
  reg [127 : 0] partial_sum_7;
  wire [127 : 0] partial_sum_7$D_IN;
  wire partial_sum_7$EN;

  // register partial_sum_8
  reg [127 : 0] partial_sum_8;
  wire [127 : 0] partial_sum_8$D_IN;
  wire partial_sum_8$EN;

  // register partial_sum_9
  reg [127 : 0] partial_sum_9;
  wire [127 : 0] partial_sum_9$D_IN;
  wire partial_sum_9$EN;

  // register product16_0
  reg [31 : 0] product16_0;
  wire [31 : 0] product16_0$D_IN;
  wire product16_0$EN;

  // register product16_1
  reg [31 : 0] product16_1;
  wire [31 : 0] product16_1$D_IN;
  wire product16_1$EN;

  // register product16_2
  reg [31 : 0] product16_2;
  wire [31 : 0] product16_2$D_IN;
  wire product16_2$EN;

  // register product16_3
  reg [31 : 0] product16_3;
  wire [31 : 0] product16_3$D_IN;
  wire product16_3$EN;

  // register product32_0
  reg [63 : 0] product32_0;
  wire [63 : 0] product32_0$D_IN;
  wire product32_0$EN;

  // register product32_1
  reg [63 : 0] product32_1;
  wire [63 : 0] product32_1$D_IN;
  wire product32_1$EN;

  // register product64
  reg [127 : 0] product64;
  wire [127 : 0] product64$D_IN;
  wire product64$EN;

  // register reg_mode
  reg [1 : 0] reg_mode;
  wire [1 : 0] reg_mode$D_IN;
  wire reg_mode$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_compute_MAC,
       CAN_FIRE_get_values,
       WILL_FIRE_RL_compute_MAC,
       WILL_FIRE_get_values;

  // remaining internal signals
  wire [127 : 0] x5455_PLUS_y5456__q1,
		 x5545_PLUS_y5546__q2,
		 x5613_PLUS_y5614__q13,
		 x5681_PLUS_y5682__q15,
		 x5973_PLUS_y5974__q16,
		 x6041_PLUS_y6042__q17,
		 x6109_PLUS_y6110__q3,
		 x6201_PLUS_y6202__q4,
		 x6293_PLUS_y6294__q5,
		 x6361_PLUS_y6362__q6,
		 x6429_PLUS_y6430__q7,
		 x6497_PLUS_y6498__q8,
		 x6589_PLUS_y6590__q9,
		 x6705_PLUS_y6706__q10,
		 x6845_PLUS_y6846__q12,
		 x6961_PLUS_y6962__q11,
		 x7053_PLUS_y7054__q14,
		 x__h15455,
		 x__h15545,
		 x__h15613,
		 x__h15681,
		 x__h15973,
		 x__h16041,
		 x__h16109,
		 x__h16111,
		 x__h16113,
		 x__h16201,
		 x__h16203,
		 x__h16205,
		 x__h16293,
		 x__h16361,
		 x__h16429,
		 x__h16497,
		 x__h16499,
		 x__h16501,
		 x__h16589,
		 x__h16591,
		 x__h16593,
		 x__h16595,
		 x__h16597,
		 x__h16705,
		 x__h16707,
		 x__h16709,
		 x__h16711,
		 x__h16713,
		 x__h16715,
		 x__h16717,
		 x__h16845,
		 x__h16847,
		 x__h16849,
		 x__h16851,
		 x__h16853,
		 x__h16961,
		 x__h16963,
		 x__h16965,
		 x__h17053,
		 x__h18724,
		 x__h18726,
		 x__h18728,
		 x__h18730,
		 x__h18732,
		 x__h18734,
		 x__h18736,
		 x__h18738,
		 x__h18740,
		 x__h18742,
		 x__h18744,
		 x__h18746,
		 x__h18748,
		 x__h18750,
		 x__h18752,
		 x__h18754,
		 x__h18756,
		 x__h18758,
		 x__h18760,
		 x__h18762,
		 x__h18764,
		 x__h18766,
		 x__h18768,
		 x__h18770,
		 y__h15456,
		 y__h15546,
		 y__h15614,
		 y__h15682,
		 y__h15974,
		 y__h16042,
		 y__h16110,
		 y__h16112,
		 y__h16114,
		 y__h16202,
		 y__h16204,
		 y__h16206,
		 y__h16294,
		 y__h16362,
		 y__h16430,
		 y__h16498,
		 y__h16500,
		 y__h16502,
		 y__h16590,
		 y__h16592,
		 y__h16594,
		 y__h16596,
		 y__h16598,
		 y__h16706,
		 y__h16708,
		 y__h16710,
		 y__h16712,
		 y__h16714,
		 y__h16716,
		 y__h16718,
		 y__h16846,
		 y__h16848,
		 y__h16850,
		 y__h16852,
		 y__h16854,
		 y__h16962,
		 y__h16964,
		 y__h16966,
		 y__h17054,
		 y__h18725,
		 y__h18727,
		 y__h18729,
		 y__h18731,
		 y__h18733,
		 y__h18737,
		 y__h18739,
		 y__h18743,
		 y__h18753,
		 y__h18757;
  wire [95 : 0] b5a_5_97_PLUS_0_CONCAT_a_82_BITS_47_TO_40_89_9_ETC___d509;
  wire [63 : 0] b3a_3_95_PLUS_0_CONCAT_a_82_BITS_31_TO_24_95_9_ETC___d508,
		x__h18082,
		x__h18084,
		x__h18086,
		x__h18088,
		x__h18090,
		x__h18092,
		x__h18094,
		x__h18096,
		x__h18408,
		x__h18410,
		x__h18412,
		x__h18414,
		x__h18416,
		x__h18418,
		x__h18420,
		x__h18422,
		y__h18083,
		y__h18085,
		y__h18409,
		y__h18411,
		y__h19806,
		y__h19845;
  wire [31 : 0] _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d102,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d12,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d120,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d22,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d34,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d48,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d64,
		_0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d82,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d100,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d118,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d132,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d20,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d32,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d46,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d62,
		_0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d80,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d116,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d130,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d142,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d30,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d44,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d60,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d78,
		_0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d98,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d114,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d128,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d140,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d150,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d42,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d58,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d76,
		_0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d96,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d112,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d126,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d138,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d148,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d156,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d56,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d74,
		_0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d94,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d110,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d124,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d136,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d146,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d154,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d160,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d72,
		_0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d92,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d108,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d122,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d134,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d144,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d152,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d158,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d162,
		_0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d90,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_1_ETC___d16,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_2_ETC___d26,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d38,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d52,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_4_ETC___d68,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_5_ETC___d86,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_6_ETC___d106,
		_0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_7_ETC___d8,
		x__h17512,
		x__h17514,
		x__h17651,
		x__h17653,
		x__h17766,
		x__h17768,
		x__h17881,
		x__h17883,
		y__h19609,
		y__h19648,
		y__h19681,
		y__h19714;
  wire [15 : 0] x__h12160,
		x__h12769,
		x__h13291,
		x__h13726,
		x__h14074,
		x__h14335,
		x__h14509,
		x__h14596,
		y__h11320,
		y__h12248,
		y__h12857,
		y__h13379,
		y__h13814,
		y__h14162,
		y__h14423,
		y__h14597,
		y__h19282,
		y__h19321,
		y__h19353,
		y__h19385,
		y__h19417,
		y__h19449,
		y__h19481,
		y__h19513;
  wire NOT_get_values_multiplicand1_EQ_m1_41_42_OR_NO_ETC___d548;

  // action method get_values
  assign RDY_get_values = 1'd1 ;
  assign CAN_FIRE_get_values = 1'd1 ;
  assign WILL_FIRE_get_values = EN_get_values ;

  // value method mac_result
  always@(reg_mode or
	  mac_output_0 or mac_output_1 or mac_output_2 or mac_output_3)
  begin
    case (reg_mode)
      2'd0: mac_result = mac_output_0;
      2'd1: mac_result = mac_output_1;
      2'd2: mac_result = mac_output_2;
      2'd3: mac_result = mac_output_3;
    endcase
  end
  assign RDY_mac_result = mac_ready ;

  // rule RL_compute_MAC
  assign CAN_FIRE_RL_compute_MAC = 1'd1 ;
  assign WILL_FIRE_RL_compute_MAC = 1'd1 ;

  // register a
  assign a$D_IN = get_values_addend ;
  assign a$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_41_42_OR_NO_ETC___d548 ||
	      get_values_mode != reg_mode) ;

  // register b0a_0
  assign b0a_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_7_ETC___d8[15:0] ;
  assign b0a_0$EN = inp_ready ;

  // register b0a_1
  assign b0a_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d12[15:0] ;
  assign b0a_1$EN = inp_ready ;

  // register b0a_2
  assign b0a_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d20[15:0] ;
  assign b0a_2$EN = inp_ready ;

  // register b0a_3
  assign b0a_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d30[15:0] ;
  assign b0a_3$EN = inp_ready ;

  // register b0a_4
  assign b0a_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d42[15:0] ;
  assign b0a_4$EN = inp_ready ;

  // register b0a_5
  assign b0a_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d56[15:0] ;
  assign b0a_5$EN = inp_ready ;

  // register b0a_6
  assign b0a_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d72[15:0] ;
  assign b0a_6$EN = inp_ready ;

  // register b0a_7
  assign b0a_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d90[15:0] ;
  assign b0a_7$EN = inp_ready ;

  // register b1a_0
  assign b1a_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_1_ETC___d16[15:0] ;
  assign b1a_0$EN = inp_ready ;

  // register b1a_1
  assign b1a_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d22[15:0] ;
  assign b1a_1$EN = inp_ready ;

  // register b1a_2
  assign b1a_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d32[15:0] ;
  assign b1a_2$EN = inp_ready ;

  // register b1a_3
  assign b1a_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d44[15:0] ;
  assign b1a_3$EN = inp_ready ;

  // register b1a_4
  assign b1a_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d58[15:0] ;
  assign b1a_4$EN = inp_ready ;

  // register b1a_5
  assign b1a_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d74[15:0] ;
  assign b1a_5$EN = inp_ready ;

  // register b1a_6
  assign b1a_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d92[15:0] ;
  assign b1a_6$EN = inp_ready ;

  // register b1a_7
  assign b1a_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d108[15:0] ;
  assign b1a_7$EN = inp_ready ;

  // register b2a_0
  assign b2a_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_2_ETC___d26[15:0] ;
  assign b2a_0$EN = inp_ready ;

  // register b2a_1
  assign b2a_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d34[15:0] ;
  assign b2a_1$EN = inp_ready ;

  // register b2a_2
  assign b2a_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d46[15:0] ;
  assign b2a_2$EN = inp_ready ;

  // register b2a_3
  assign b2a_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d60[15:0] ;
  assign b2a_3$EN = inp_ready ;

  // register b2a_4
  assign b2a_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d76[15:0] ;
  assign b2a_4$EN = inp_ready ;

  // register b2a_5
  assign b2a_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d94[15:0] ;
  assign b2a_5$EN = inp_ready ;

  // register b2a_6
  assign b2a_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d110[15:0] ;
  assign b2a_6$EN = inp_ready ;

  // register b2a_7
  assign b2a_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d122[15:0] ;
  assign b2a_7$EN = inp_ready ;

  // register b3a_0
  assign b3a_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d38[15:0] ;
  assign b3a_0$EN = inp_ready ;

  // register b3a_1
  assign b3a_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d48[15:0] ;
  assign b3a_1$EN = inp_ready ;

  // register b3a_2
  assign b3a_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d62[15:0] ;
  assign b3a_2$EN = inp_ready ;

  // register b3a_3
  assign b3a_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d78[15:0] ;
  assign b3a_3$EN = inp_ready ;

  // register b3a_4
  assign b3a_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d96[15:0] ;
  assign b3a_4$EN = inp_ready ;

  // register b3a_5
  assign b3a_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d112[15:0] ;
  assign b3a_5$EN = inp_ready ;

  // register b3a_6
  assign b3a_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d124[15:0] ;
  assign b3a_6$EN = inp_ready ;

  // register b3a_7
  assign b3a_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d134[15:0] ;
  assign b3a_7$EN = inp_ready ;

  // register b4a_0
  assign b4a_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d52[15:0] ;
  assign b4a_0$EN = inp_ready ;

  // register b4a_1
  assign b4a_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d64[15:0] ;
  assign b4a_1$EN = inp_ready ;

  // register b4a_2
  assign b4a_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d80[15:0] ;
  assign b4a_2$EN = inp_ready ;

  // register b4a_3
  assign b4a_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d98[15:0] ;
  assign b4a_3$EN = inp_ready ;

  // register b4a_4
  assign b4a_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d114[15:0] ;
  assign b4a_4$EN = inp_ready ;

  // register b4a_5
  assign b4a_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d126[15:0] ;
  assign b4a_5$EN = inp_ready ;

  // register b4a_6
  assign b4a_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d136[15:0] ;
  assign b4a_6$EN = inp_ready ;

  // register b4a_7
  assign b4a_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d144[15:0] ;
  assign b4a_7$EN = inp_ready ;

  // register b5a_0
  assign b5a_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_4_ETC___d68[15:0] ;
  assign b5a_0$EN = inp_ready ;

  // register b5a_1
  assign b5a_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d82[15:0] ;
  assign b5a_1$EN = inp_ready ;

  // register b5a_2
  assign b5a_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d100[15:0] ;
  assign b5a_2$EN = inp_ready ;

  // register b5a_3
  assign b5a_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d116[15:0] ;
  assign b5a_3$EN = inp_ready ;

  // register b5a_4
  assign b5a_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d128[15:0] ;
  assign b5a_4$EN = inp_ready ;

  // register b5a_5
  assign b5a_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d138[15:0] ;
  assign b5a_5$EN = inp_ready ;

  // register b5a_6
  assign b5a_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d146[15:0] ;
  assign b5a_6$EN = inp_ready ;

  // register b5a_7
  assign b5a_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d152[15:0] ;
  assign b5a_7$EN = inp_ready ;

  // register b6a_0
  assign b6a_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_5_ETC___d86[15:0] ;
  assign b6a_0$EN = inp_ready ;

  // register b6a_1
  assign b6a_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d102[15:0] ;
  assign b6a_1$EN = inp_ready ;

  // register b6a_2
  assign b6a_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d118[15:0] ;
  assign b6a_2$EN = inp_ready ;

  // register b6a_3
  assign b6a_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d130[15:0] ;
  assign b6a_3$EN = inp_ready ;

  // register b6a_4
  assign b6a_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d140[15:0] ;
  assign b6a_4$EN = inp_ready ;

  // register b6a_5
  assign b6a_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d148[15:0] ;
  assign b6a_5$EN = inp_ready ;

  // register b6a_6
  assign b6a_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d154[15:0] ;
  assign b6a_6$EN = inp_ready ;

  // register b6a_7
  assign b6a_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d158[15:0] ;
  assign b6a_7$EN = inp_ready ;

  // register b7a_0
  assign b7a_0$D_IN =
	     _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_6_ETC___d106[15:0] ;
  assign b7a_0$EN = inp_ready ;

  // register b7a_1
  assign b7a_1$D_IN =
	     _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d120[15:0] ;
  assign b7a_1$EN = inp_ready ;

  // register b7a_2
  assign b7a_2$D_IN =
	     _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d132[15:0] ;
  assign b7a_2$EN = inp_ready ;

  // register b7a_3
  assign b7a_3$D_IN =
	     _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d142[15:0] ;
  assign b7a_3$EN = inp_ready ;

  // register b7a_4
  assign b7a_4$D_IN =
	     _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d150[15:0] ;
  assign b7a_4$EN = inp_ready ;

  // register b7a_5
  assign b7a_5$D_IN =
	     _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d156[15:0] ;
  assign b7a_5$EN = inp_ready ;

  // register b7a_6
  assign b7a_6$D_IN =
	     _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d160[15:0] ;
  assign b7a_6$EN = inp_ready ;

  // register b7a_7
  assign b7a_7$D_IN =
	     _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d162[15:0] ;
  assign b7a_7$EN = inp_ready ;

  // register flag_0
  assign flag_0$D_IN = inp_ready ;
  assign flag_0$EN = 1'd1 ;

  // register flag_1
  assign flag_1$D_IN = flag_0 ;
  assign flag_1$EN = 1'd1 ;

  // register flag_2
  assign flag_2$D_IN = flag_1 ;
  assign flag_2$EN = 1'd1 ;

  // register flag_3
  assign flag_3$D_IN = flag_2 ;
  assign flag_3$EN = 1'd1 ;

  // register inp_ready
  assign inp_ready$D_IN =
	     NOT_get_values_multiplicand1_EQ_m1_41_42_OR_NO_ETC___d548 ||
	     get_values_mode != reg_mode ;
  assign inp_ready$EN = EN_get_values ;

  // register m1
  assign m1$D_IN = get_values_multiplicand1 ;
  assign m1$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_41_42_OR_NO_ETC___d548 ||
	      get_values_mode != reg_mode) ;

  // register m2
  assign m2$D_IN = get_values_multiplicand2 ;
  assign m2$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_41_42_OR_NO_ETC___d548 ||
	      get_values_mode != reg_mode) ;

  // register mac_output_0
  assign mac_output_0$D_IN =
	     { b7a_7 + y__h19282,
	       b6a_6 + y__h19321,
	       b5a_5_97_PLUS_0_CONCAT_a_82_BITS_47_TO_40_89_9_ETC___d509 } ;
  assign mac_output_0$EN = flag_2 ;

  // register mac_output_1
  assign mac_output_1$D_IN =
	     { product16_3 + y__h19609,
	       product16_2 + y__h19648,
	       product16_1 + y__h19681,
	       product16_0 + y__h19714 } ;
  assign mac_output_1$EN = flag_2 ;

  // register mac_output_2
  assign mac_output_2$D_IN =
	     { product32_1 + y__h19806, product32_0 + y__h19845 } ;
  assign mac_output_2$EN = flag_2 ;

  // register mac_output_3
  assign mac_output_3$D_IN = product64 + { 64'd0, a } ;
  assign mac_output_3$EN = flag_2 ;

  // register mac_ready
  assign mac_ready$D_IN = 1'd1 ;
  assign mac_ready$EN = flag_2 ;

  // register partial_sum_0
  assign partial_sum_0$D_IN = { x5455_PLUS_y5456__q1[119:0], 8'd0 } ;
  assign partial_sum_0$EN = flag_0 ;

  // register partial_sum_1
  assign partial_sum_1$D_IN = { x5545_PLUS_y5546__q2[119:0], 8'd0 } ;
  assign partial_sum_1$EN = flag_0 ;

  // register partial_sum_10
  assign partial_sum_10$D_IN = { x6109_PLUS_y6110__q3[103:0], 24'd0 } ;
  assign partial_sum_10$EN = flag_0 ;

  // register partial_sum_11
  assign partial_sum_11$D_IN = { x6201_PLUS_y6202__q4[103:0], 24'd0 } ;
  assign partial_sum_11$EN = flag_0 ;

  // register partial_sum_12
  assign partial_sum_12$D_IN = { x6293_PLUS_y6294__q5[95:0], 32'd0 } ;
  assign partial_sum_12$EN = flag_0 ;

  // register partial_sum_13
  assign partial_sum_13$D_IN = { x6361_PLUS_y6362__q6[95:0], 32'd0 } ;
  assign partial_sum_13$EN = flag_0 ;

  // register partial_sum_14
  assign partial_sum_14$D_IN = { x6429_PLUS_y6430__q7[95:0], 32'd0 } ;
  assign partial_sum_14$EN = flag_0 ;

  // register partial_sum_15
  assign partial_sum_15$D_IN = { x6497_PLUS_y6498__q8[87:0], 40'd0 } ;
  assign partial_sum_15$EN = flag_0 ;

  // register partial_sum_16
  assign partial_sum_16$D_IN = { x6589_PLUS_y6590__q9[79:0], 48'd0 } ;
  assign partial_sum_16$EN = flag_0 ;

  // register partial_sum_17
  assign partial_sum_17$D_IN = { x6705_PLUS_y6706__q10[71:0], 56'd0 } ;
  assign partial_sum_17$EN = flag_0 ;

  // register partial_sum_18
  assign partial_sum_18$D_IN = { x6845_PLUS_y6846__q12[63:0], 64'd0 } ;
  assign partial_sum_18$EN = flag_0 ;

  // register partial_sum_19
  assign partial_sum_19$D_IN = { x6961_PLUS_y6962__q11[55:0], 72'd0 } ;
  assign partial_sum_19$EN = flag_0 ;

  // register partial_sum_2
  assign partial_sum_2$D_IN = { x5613_PLUS_y5614__q13[119:0], 8'd0 } ;
  assign partial_sum_2$EN = flag_0 ;

  // register partial_sum_20
  assign partial_sum_20$D_IN = { x7053_PLUS_y7054__q14[47:0], 80'd0 } ;
  assign partial_sum_20$EN = flag_0 ;

  // register partial_sum_21
  assign partial_sum_21$D_IN = { 80'd0, b2a_2, 32'd0 } ;
  assign partial_sum_21$EN = flag_0 ;

  // register partial_sum_22
  assign partial_sum_22$D_IN = { x__h18422, 64'd0 } ;
  assign partial_sum_22$EN = flag_0 ;

  // register partial_sum_23
  assign partial_sum_23$D_IN = { 80'd0, b6a_6, 32'd0 } ;
  assign partial_sum_23$EN = flag_0 ;

  // register partial_sum_3
  assign partial_sum_3$D_IN = { x5681_PLUS_y5682__q15[119:0], 8'd0 } ;
  assign partial_sum_3$EN = flag_0 ;

  // register partial_sum_4
  assign partial_sum_4$D_IN = { 96'd0, b1a_1, 16'd0 } ;
  assign partial_sum_4$EN = flag_0 ;

  // register partial_sum_5
  assign partial_sum_5$D_IN = { 96'd0, b3a_3, 16'd0 } ;
  assign partial_sum_5$EN = flag_0 ;

  // register partial_sum_6
  assign partial_sum_6$D_IN = { 96'd0, b5a_5, 16'd0 } ;
  assign partial_sum_6$EN = flag_0 ;

  // register partial_sum_7
  assign partial_sum_7$D_IN = { 96'd0, b7a_7, 16'd0 } ;
  assign partial_sum_7$EN = flag_0 ;

  // register partial_sum_8
  assign partial_sum_8$D_IN = { x5973_PLUS_y5974__q16[111:0], 16'd0 } ;
  assign partial_sum_8$EN = flag_0 ;

  // register partial_sum_9
  assign partial_sum_9$D_IN = { x6041_PLUS_y6042__q17[111:0], 16'd0 } ;
  assign partial_sum_9$EN = flag_0 ;

  // register product16_0
  assign product16_0$D_IN = x__h17512 + partial_sum_4[31:0] ;
  assign product16_0$EN = flag_1 ;

  // register product16_1
  assign product16_1$D_IN = x__h17651 + partial_sum_5[31:0] ;
  assign product16_1$EN = flag_1 ;

  // register product16_2
  assign product16_2$D_IN = x__h17766 + partial_sum_6[31:0] ;
  assign product16_2$EN = flag_1 ;

  // register product16_3
  assign product16_3$D_IN = x__h17881 + partial_sum_7[31:0] ;
  assign product16_3$EN = flag_1 ;

  // register product32_0
  assign product32_0$D_IN = x__h18082 + y__h18083 ;
  assign product32_0$EN = flag_1 ;

  // register product32_1
  assign product32_1$D_IN = x__h18408 + y__h18409 ;
  assign product32_1$EN = flag_1 ;

  // register product64
  assign product64$D_IN = x__h18724 + y__h18725 ;
  assign product64$EN = flag_1 ;

  // register reg_mode
  assign reg_mode$D_IN = get_values_mode ;
  assign reg_mode$EN =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_41_42_OR_NO_ETC___d548 ||
	      get_values_mode != reg_mode) ;

  // remaining internal signals
  assign NOT_get_values_multiplicand1_EQ_m1_41_42_OR_NO_ETC___d548 =
	     get_values_multiplicand1 != m1 ||
	     get_values_multiplicand2 != m2 ||
	     get_values_addend != a ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d102 =
	     x__h12769 * y__h14423 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d12 =
	     x__h12769 * y__h11320 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d120 =
	     x__h12769 * y__h14597 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d22 =
	     x__h12769 * y__h12248 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d34 =
	     x__h12769 * y__h12857 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d48 =
	     x__h12769 * y__h13379 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d64 =
	     x__h12769 * y__h13814 ;
  assign _0_CONCAT_m1_BITS_15_TO_8_0_1_MUL_0_CONCAT_m2_B_ETC___d82 =
	     x__h12769 * y__h14162 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d100 =
	     x__h13291 * y__h14162 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d118 =
	     x__h13291 * y__h14423 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d132 =
	     x__h13291 * y__h14597 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d20 =
	     x__h13291 * y__h11320 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d32 =
	     x__h13291 * y__h12248 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d46 =
	     x__h13291 * y__h12857 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d62 =
	     x__h13291 * y__h13379 ;
  assign _0_CONCAT_m1_BITS_23_TO_16_8_9_MUL_0_CONCAT_m2__ETC___d80 =
	     x__h13291 * y__h13814 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d116 =
	     x__h13726 * y__h14162 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d130 =
	     x__h13726 * y__h14423 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d142 =
	     x__h13726 * y__h14597 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d30 =
	     x__h13726 * y__h11320 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d44 =
	     x__h13726 * y__h12248 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d60 =
	     x__h13726 * y__h12857 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d78 =
	     x__h13726 * y__h13379 ;
  assign _0_CONCAT_m1_BITS_31_TO_24_8_9_MUL_0_CONCAT_m2__ETC___d98 =
	     x__h13726 * y__h13814 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d114 =
	     x__h14074 * y__h13814 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d128 =
	     x__h14074 * y__h14162 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d140 =
	     x__h14074 * y__h14423 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d150 =
	     x__h14074 * y__h14597 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d42 =
	     x__h14074 * y__h11320 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d58 =
	     x__h14074 * y__h12248 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d76 =
	     x__h14074 * y__h12857 ;
  assign _0_CONCAT_m1_BITS_39_TO_32_0_1_MUL_0_CONCAT_m2__ETC___d96 =
	     x__h14074 * y__h13379 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d112 =
	     x__h14335 * y__h13379 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d126 =
	     x__h14335 * y__h13814 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d138 =
	     x__h14335 * y__h14162 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d148 =
	     x__h14335 * y__h14423 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d156 =
	     x__h14335 * y__h14597 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d56 =
	     x__h14335 * y__h11320 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d74 =
	     x__h14335 * y__h12248 ;
  assign _0_CONCAT_m1_BITS_47_TO_40_4_5_MUL_0_CONCAT_m2__ETC___d94 =
	     x__h14335 * y__h12857 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d110 =
	     x__h14509 * y__h12857 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d124 =
	     x__h14509 * y__h13379 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d136 =
	     x__h14509 * y__h13814 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d146 =
	     x__h14509 * y__h14162 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d154 =
	     x__h14509 * y__h14423 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d160 =
	     x__h14509 * y__h14597 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d72 =
	     x__h14509 * y__h11320 ;
  assign _0_CONCAT_m1_BITS_55_TO_48_0_1_MUL_0_CONCAT_m2__ETC___d92 =
	     x__h14509 * y__h12248 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d108 =
	     x__h14596 * y__h12248 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d122 =
	     x__h14596 * y__h12857 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d134 =
	     x__h14596 * y__h13379 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d144 =
	     x__h14596 * y__h13814 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d152 =
	     x__h14596 * y__h14162 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d158 =
	     x__h14596 * y__h14423 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d162 =
	     x__h14596 * y__h14597 ;
  assign _0_CONCAT_m1_BITS_63_TO_56_8_9_MUL_0_CONCAT_m2__ETC___d90 =
	     x__h14596 * y__h11320 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_1_ETC___d16 =
	     x__h12160 * y__h12248 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_2_ETC___d26 =
	     x__h12160 * y__h12857 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d38 =
	     x__h12160 * y__h13379 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_3_ETC___d52 =
	     x__h12160 * y__h13814 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_4_ETC___d68 =
	     x__h12160 * y__h14162 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_5_ETC___d86 =
	     x__h12160 * y__h14423 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_6_ETC___d106 =
	     x__h12160 * y__h14597 ;
  assign _0_CONCAT_m1_BITS_7_TO_0_MUL_0_CONCAT_m2_BITS_7_ETC___d8 =
	     x__h12160 * y__h11320 ;
  assign b3a_3_95_PLUS_0_CONCAT_a_82_BITS_31_TO_24_95_9_ETC___d508 =
	     { b3a_3 + y__h19417,
	       b2a_2 + y__h19449,
	       b1a_1 + y__h19481,
	       b0a_0 + y__h19513 } ;
  assign b5a_5_97_PLUS_0_CONCAT_a_82_BITS_47_TO_40_89_9_ETC___d509 =
	     { b5a_5 + y__h19353,
	       b4a_4 + y__h19385,
	       b3a_3_95_PLUS_0_CONCAT_a_82_BITS_31_TO_24_95_9_ETC___d508 } ;
  assign x5455_PLUS_y5456__q1 = x__h15455 + y__h15456 ;
  assign x5545_PLUS_y5546__q2 = x__h15545 + y__h15546 ;
  assign x5613_PLUS_y5614__q13 = x__h15613 + y__h15614 ;
  assign x5681_PLUS_y5682__q15 = x__h15681 + y__h15682 ;
  assign x5973_PLUS_y5974__q16 = x__h15973 + y__h15974 ;
  assign x6041_PLUS_y6042__q17 = x__h16041 + y__h16042 ;
  assign x6109_PLUS_y6110__q3 = x__h16109 + y__h16110 ;
  assign x6201_PLUS_y6202__q4 = x__h16201 + y__h16202 ;
  assign x6293_PLUS_y6294__q5 = x__h16293 + y__h16294 ;
  assign x6361_PLUS_y6362__q6 = x__h16361 + y__h16362 ;
  assign x6429_PLUS_y6430__q7 = x__h16429 + y__h16430 ;
  assign x6497_PLUS_y6498__q8 = x__h16497 + y__h16498 ;
  assign x6589_PLUS_y6590__q9 = x__h16589 + y__h16590 ;
  assign x6705_PLUS_y6706__q10 = x__h16705 + y__h16706 ;
  assign x6845_PLUS_y6846__q12 = x__h16845 + y__h16846 ;
  assign x6961_PLUS_y6962__q11 = x__h16961 + y__h16962 ;
  assign x7053_PLUS_y7054__q14 = x__h17053 + y__h17054 ;
  assign x__h12160 = { 8'd0, m1[7:0] } ;
  assign x__h12769 = { 8'd0, m1[15:8] } ;
  assign x__h13291 = { 8'd0, m1[23:16] } ;
  assign x__h13726 = { 8'd0, m1[31:24] } ;
  assign x__h14074 = { 8'd0, m1[39:32] } ;
  assign x__h14335 = { 8'd0, m1[47:40] } ;
  assign x__h14509 = { 8'd0, m1[55:48] } ;
  assign x__h14596 = { 8'd0, m1[63:56] } ;
  assign x__h15455 = { 112'd0, b1a_0 } ;
  assign x__h15545 = { 112'd0, b3a_2 } ;
  assign x__h15613 = { 112'd0, b5a_4 } ;
  assign x__h15681 = { 112'd0, b7a_6 } ;
  assign x__h15973 = { 112'd0, b2a_0 } ;
  assign x__h16041 = { 112'd0, b6a_4 } ;
  assign x__h16109 = x__h16111 + y__h16112 ;
  assign x__h16111 = x__h16113 + y__h16114 ;
  assign x__h16113 = { 112'd0, b3a_0 } ;
  assign x__h16201 = x__h16203 + y__h16204 ;
  assign x__h16203 = x__h16205 + y__h16206 ;
  assign x__h16205 = { 112'd0, b7a_4 } ;
  assign x__h16293 = { 112'd0, b3a_1 } ;
  assign x__h16361 = { 112'd0, b4a_0 } ;
  assign x__h16429 = { 112'd0, b7a_5 } ;
  assign x__h16497 = x__h16499 + y__h16500 ;
  assign x__h16499 = x__h16501 + y__h16502 ;
  assign x__h16501 = { 112'd0, b5a_0 } ;
  assign x__h16589 = x__h16591 + y__h16592 ;
  assign x__h16591 = x__h16593 + y__h16594 ;
  assign x__h16593 = x__h16595 + y__h16596 ;
  assign x__h16595 = x__h16597 + y__h16598 ;
  assign x__h16597 = { 112'd0, b6a_0 } ;
  assign x__h16705 = x__h16707 + y__h16708 ;
  assign x__h16707 = x__h16709 + y__h16710 ;
  assign x__h16709 = x__h16711 + y__h16712 ;
  assign x__h16711 = x__h16713 + y__h16714 ;
  assign x__h16713 = x__h16715 + y__h16716 ;
  assign x__h16715 = x__h16717 + y__h16718 ;
  assign x__h16717 = { 112'd0, b7a_0 } ;
  assign x__h16845 = x__h16847 + y__h16848 ;
  assign x__h16847 = x__h16849 + y__h16850 ;
  assign x__h16849 = x__h16851 + y__h16852 ;
  assign x__h16851 = x__h16853 + y__h16854 ;
  assign x__h16853 = { 112'd0, b7a_1 } ;
  assign x__h16961 = x__h16963 + y__h16964 ;
  assign x__h16963 = x__h16965 + y__h16966 ;
  assign x__h16965 = { 112'd0, b7a_2 } ;
  assign x__h17053 = { 112'd0, b7a_3 } ;
  assign x__h17512 = x__h17514 + partial_sum_0[31:0] ;
  assign x__h17514 = { 16'd0, b0a_0 } ;
  assign x__h17651 = x__h17653 + partial_sum_1[31:0] ;
  assign x__h17653 = { 16'd0, b2a_2 } ;
  assign x__h17766 = x__h17768 + partial_sum_2[31:0] ;
  assign x__h17768 = { 16'd0, b4a_4 } ;
  assign x__h17881 = x__h17883 + partial_sum_3[31:0] ;
  assign x__h17883 = { 16'd0, b6a_6 } ;
  assign x__h18082 = x__h18084 + y__h18085 ;
  assign x__h18084 = x__h18086 + partial_sum_12[63:0] ;
  assign x__h18086 = x__h18088 + partial_sum_21[63:0] ;
  assign x__h18088 = x__h18090 + partial_sum_10[63:0] ;
  assign x__h18090 = x__h18092 + partial_sum_8[63:0] ;
  assign x__h18092 = x__h18094 + partial_sum_4[63:0] ;
  assign x__h18094 = x__h18096 + partial_sum_0[63:0] ;
  assign x__h18096 = { 48'd0, b0a_0 } ;
  assign x__h18408 = x__h18410 + y__h18411 ;
  assign x__h18410 = x__h18412 + partial_sum_14[63:0] ;
  assign x__h18412 = x__h18414 + partial_sum_23[63:0] ;
  assign x__h18414 = x__h18416 + partial_sum_11[63:0] ;
  assign x__h18416 = x__h18418 + partial_sum_9[63:0] ;
  assign x__h18418 = x__h18420 + partial_sum_6[63:0] ;
  assign x__h18420 = x__h18422 + partial_sum_2[63:0] ;
  assign x__h18422 = { 48'd0, b4a_4 } ;
  assign x__h18724 = x__h18726 + y__h18727 ;
  assign x__h18726 = x__h18728 + y__h18729 ;
  assign x__h18728 = x__h18730 + y__h18731 ;
  assign x__h18730 = x__h18732 + y__h18733 ;
  assign x__h18732 = x__h18734 + partial_sum_20 ;
  assign x__h18734 = x__h18736 + y__h18737 ;
  assign x__h18736 = x__h18738 + y__h18739 ;
  assign x__h18738 = x__h18740 + partial_sum_19 ;
  assign x__h18740 = x__h18742 + y__h18743 ;
  assign x__h18742 = x__h18744 + partial_sum_18 ;
  assign x__h18744 = x__h18746 + partial_sum_22 ;
  assign x__h18746 = x__h18748 + partial_sum_17 ;
  assign x__h18748 = x__h18750 + partial_sum_16 ;
  assign x__h18750 = x__h18752 + y__h18753 ;
  assign x__h18752 = x__h18754 + partial_sum_15 ;
  assign x__h18754 = x__h18756 + y__h18757 ;
  assign x__h18756 = x__h18758 + partial_sum_13 ;
  assign x__h18758 = x__h18760 + partial_sum_12 ;
  assign x__h18760 = x__h18762 + partial_sum_21 ;
  assign x__h18762 = x__h18764 + partial_sum_10 ;
  assign x__h18764 = x__h18766 + partial_sum_8 ;
  assign x__h18766 = x__h18768 + partial_sum_4 ;
  assign x__h18768 = x__h18770 + partial_sum_0 ;
  assign x__h18770 = { 112'd0, b0a_0 } ;
  assign y__h11320 = { 8'd0, m2[7:0] } ;
  assign y__h12248 = { 8'd0, m2[15:8] } ;
  assign y__h12857 = { 8'd0, m2[23:16] } ;
  assign y__h13379 = { 8'd0, m2[31:24] } ;
  assign y__h13814 = { 8'd0, m2[39:32] } ;
  assign y__h14162 = { 8'd0, m2[47:40] } ;
  assign y__h14423 = { 8'd0, m2[55:48] } ;
  assign y__h14597 = { 8'd0, m2[63:56] } ;
  assign y__h15456 = { 112'd0, b0a_1 } ;
  assign y__h15546 = { 112'd0, b2a_3 } ;
  assign y__h15614 = { 112'd0, b4a_5 } ;
  assign y__h15682 = { 112'd0, b6a_7 } ;
  assign y__h15974 = { 112'd0, b0a_2 } ;
  assign y__h16042 = { 112'd0, b4a_6 } ;
  assign y__h16110 = { 112'd0, b0a_3 } ;
  assign y__h16112 = { 112'd0, b1a_2 } ;
  assign y__h16114 = { 112'd0, b2a_1 } ;
  assign y__h16202 = { 112'd0, b4a_7 } ;
  assign y__h16204 = { 112'd0, b5a_6 } ;
  assign y__h16206 = { 112'd0, b6a_5 } ;
  assign y__h16294 = { 112'd0, b1a_3 } ;
  assign y__h16362 = { 112'd0, b0a_4 } ;
  assign y__h16430 = { 112'd0, b5a_7 } ;
  assign y__h16498 = { 112'd0, b0a_5 } ;
  assign y__h16500 = { 112'd0, b1a_4 } ;
  assign y__h16502 = { 112'd0, b4a_1 } ;
  assign y__h16590 = { 112'd0, b0a_6 } ;
  assign y__h16592 = { 112'd0, b1a_5 } ;
  assign y__h16594 = { 112'd0, b2a_4 } ;
  assign y__h16596 = { 112'd0, b4a_2 } ;
  assign y__h16598 = { 112'd0, b5a_1 } ;
  assign y__h16706 = { 112'd0, b0a_7 } ;
  assign y__h16708 = { 112'd0, b1a_6 } ;
  assign y__h16710 = { 112'd0, b2a_5 } ;
  assign y__h16712 = { 112'd0, b3a_4 } ;
  assign y__h16714 = { 112'd0, b4a_3 } ;
  assign y__h16716 = { 112'd0, b5a_2 } ;
  assign y__h16718 = { 112'd0, b6a_1 } ;
  assign y__h16846 = { 112'd0, b1a_7 } ;
  assign y__h16848 = { 112'd0, b2a_6 } ;
  assign y__h16850 = { 112'd0, b3a_5 } ;
  assign y__h16852 = { 112'd0, b5a_3 } ;
  assign y__h16854 = { 112'd0, b6a_2 } ;
  assign y__h16962 = { 112'd0, b2a_7 } ;
  assign y__h16964 = { 112'd0, b3a_6 } ;
  assign y__h16966 = { 112'd0, b6a_3 } ;
  assign y__h17054 = { 112'd0, b3a_7 } ;
  assign y__h18083 = { partial_sum_5[31:0], 32'd0 } ;
  assign y__h18085 = { partial_sum_1[31:0], 32'd0 } ;
  assign y__h18409 = { partial_sum_7[31:0], 32'd0 } ;
  assign y__h18411 = { partial_sum_3[31:0], 32'd0 } ;
  assign y__h18725 = { partial_sum_7[31:0], 96'd0 } ;
  assign y__h18727 = { partial_sum_3[31:0], 96'd0 } ;
  assign y__h18729 = { partial_sum_14[63:0], 64'd0 } ;
  assign y__h18731 = { partial_sum_23[63:0], 64'd0 } ;
  assign y__h18733 = { partial_sum_11[63:0], 64'd0 } ;
  assign y__h18737 = { partial_sum_9[63:0], 64'd0 } ;
  assign y__h18739 = { partial_sum_6[63:0], 64'd0 } ;
  assign y__h18743 = { partial_sum_2[63:0], 64'd0 } ;
  assign y__h18753 = { partial_sum_5[95:0], 32'd0 } ;
  assign y__h18757 = { partial_sum_1[95:0], 32'd0 } ;
  assign y__h19282 = { 8'd0, a[63:56] } ;
  assign y__h19321 = { 8'd0, a[55:48] } ;
  assign y__h19353 = { 8'd0, a[47:40] } ;
  assign y__h19385 = { 8'd0, a[39:32] } ;
  assign y__h19417 = { 8'd0, a[31:24] } ;
  assign y__h19449 = { 8'd0, a[23:16] } ;
  assign y__h19481 = { 8'd0, a[15:8] } ;
  assign y__h19513 = { 8'd0, a[7:0] } ;
  assign y__h19609 = { 16'd0, a[63:48] } ;
  assign y__h19648 = { 16'd0, a[47:32] } ;
  assign y__h19681 = { 16'd0, a[31:16] } ;
  assign y__h19714 = { 16'd0, a[15:0] } ;
  assign y__h19806 = { 32'd0, a[63:32] } ;
  assign y__h19845 = { 32'd0, a[31:0] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 64'd0;
	b0a_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b0a_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b0a_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b0a_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b0a_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b0a_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b0a_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b0a_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b1a_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b1a_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b1a_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b1a_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b1a_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b1a_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b1a_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b1a_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b2a_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b2a_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b2a_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b2a_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b2a_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b2a_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b2a_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b2a_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b3a_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b3a_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b3a_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b3a_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b3a_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b3a_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b3a_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b3a_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b4a_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b4a_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b4a_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b4a_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b4a_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b4a_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b4a_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b4a_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b5a_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b5a_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b5a_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b5a_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b5a_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b5a_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b5a_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b5a_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b6a_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b6a_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b6a_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b6a_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b6a_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b6a_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b6a_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b6a_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b7a_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b7a_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b7a_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b7a_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b7a_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b7a_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b7a_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b7a_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	flag_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flag_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inp_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	m2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mac_output_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mac_output_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mac_output_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mac_output_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mac_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	partial_sum_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_10 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_11 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_12 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_13 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_14 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_15 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_16 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_17 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_18 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_19 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_20 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_21 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_22 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_23 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_4 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_5 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_6 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_7 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_8 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	partial_sum_9 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	product16_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	product16_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	product16_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	product16_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	product32_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	product32_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	product64 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	reg_mode <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (a$EN) a <= `BSV_ASSIGNMENT_DELAY a$D_IN;
	if (b0a_0$EN) b0a_0 <= `BSV_ASSIGNMENT_DELAY b0a_0$D_IN;
	if (b0a_1$EN) b0a_1 <= `BSV_ASSIGNMENT_DELAY b0a_1$D_IN;
	if (b0a_2$EN) b0a_2 <= `BSV_ASSIGNMENT_DELAY b0a_2$D_IN;
	if (b0a_3$EN) b0a_3 <= `BSV_ASSIGNMENT_DELAY b0a_3$D_IN;
	if (b0a_4$EN) b0a_4 <= `BSV_ASSIGNMENT_DELAY b0a_4$D_IN;
	if (b0a_5$EN) b0a_5 <= `BSV_ASSIGNMENT_DELAY b0a_5$D_IN;
	if (b0a_6$EN) b0a_6 <= `BSV_ASSIGNMENT_DELAY b0a_6$D_IN;
	if (b0a_7$EN) b0a_7 <= `BSV_ASSIGNMENT_DELAY b0a_7$D_IN;
	if (b1a_0$EN) b1a_0 <= `BSV_ASSIGNMENT_DELAY b1a_0$D_IN;
	if (b1a_1$EN) b1a_1 <= `BSV_ASSIGNMENT_DELAY b1a_1$D_IN;
	if (b1a_2$EN) b1a_2 <= `BSV_ASSIGNMENT_DELAY b1a_2$D_IN;
	if (b1a_3$EN) b1a_3 <= `BSV_ASSIGNMENT_DELAY b1a_3$D_IN;
	if (b1a_4$EN) b1a_4 <= `BSV_ASSIGNMENT_DELAY b1a_4$D_IN;
	if (b1a_5$EN) b1a_5 <= `BSV_ASSIGNMENT_DELAY b1a_5$D_IN;
	if (b1a_6$EN) b1a_6 <= `BSV_ASSIGNMENT_DELAY b1a_6$D_IN;
	if (b1a_7$EN) b1a_7 <= `BSV_ASSIGNMENT_DELAY b1a_7$D_IN;
	if (b2a_0$EN) b2a_0 <= `BSV_ASSIGNMENT_DELAY b2a_0$D_IN;
	if (b2a_1$EN) b2a_1 <= `BSV_ASSIGNMENT_DELAY b2a_1$D_IN;
	if (b2a_2$EN) b2a_2 <= `BSV_ASSIGNMENT_DELAY b2a_2$D_IN;
	if (b2a_3$EN) b2a_3 <= `BSV_ASSIGNMENT_DELAY b2a_3$D_IN;
	if (b2a_4$EN) b2a_4 <= `BSV_ASSIGNMENT_DELAY b2a_4$D_IN;
	if (b2a_5$EN) b2a_5 <= `BSV_ASSIGNMENT_DELAY b2a_5$D_IN;
	if (b2a_6$EN) b2a_6 <= `BSV_ASSIGNMENT_DELAY b2a_6$D_IN;
	if (b2a_7$EN) b2a_7 <= `BSV_ASSIGNMENT_DELAY b2a_7$D_IN;
	if (b3a_0$EN) b3a_0 <= `BSV_ASSIGNMENT_DELAY b3a_0$D_IN;
	if (b3a_1$EN) b3a_1 <= `BSV_ASSIGNMENT_DELAY b3a_1$D_IN;
	if (b3a_2$EN) b3a_2 <= `BSV_ASSIGNMENT_DELAY b3a_2$D_IN;
	if (b3a_3$EN) b3a_3 <= `BSV_ASSIGNMENT_DELAY b3a_3$D_IN;
	if (b3a_4$EN) b3a_4 <= `BSV_ASSIGNMENT_DELAY b3a_4$D_IN;
	if (b3a_5$EN) b3a_5 <= `BSV_ASSIGNMENT_DELAY b3a_5$D_IN;
	if (b3a_6$EN) b3a_6 <= `BSV_ASSIGNMENT_DELAY b3a_6$D_IN;
	if (b3a_7$EN) b3a_7 <= `BSV_ASSIGNMENT_DELAY b3a_7$D_IN;
	if (b4a_0$EN) b4a_0 <= `BSV_ASSIGNMENT_DELAY b4a_0$D_IN;
	if (b4a_1$EN) b4a_1 <= `BSV_ASSIGNMENT_DELAY b4a_1$D_IN;
	if (b4a_2$EN) b4a_2 <= `BSV_ASSIGNMENT_DELAY b4a_2$D_IN;
	if (b4a_3$EN) b4a_3 <= `BSV_ASSIGNMENT_DELAY b4a_3$D_IN;
	if (b4a_4$EN) b4a_4 <= `BSV_ASSIGNMENT_DELAY b4a_4$D_IN;
	if (b4a_5$EN) b4a_5 <= `BSV_ASSIGNMENT_DELAY b4a_5$D_IN;
	if (b4a_6$EN) b4a_6 <= `BSV_ASSIGNMENT_DELAY b4a_6$D_IN;
	if (b4a_7$EN) b4a_7 <= `BSV_ASSIGNMENT_DELAY b4a_7$D_IN;
	if (b5a_0$EN) b5a_0 <= `BSV_ASSIGNMENT_DELAY b5a_0$D_IN;
	if (b5a_1$EN) b5a_1 <= `BSV_ASSIGNMENT_DELAY b5a_1$D_IN;
	if (b5a_2$EN) b5a_2 <= `BSV_ASSIGNMENT_DELAY b5a_2$D_IN;
	if (b5a_3$EN) b5a_3 <= `BSV_ASSIGNMENT_DELAY b5a_3$D_IN;
	if (b5a_4$EN) b5a_4 <= `BSV_ASSIGNMENT_DELAY b5a_4$D_IN;
	if (b5a_5$EN) b5a_5 <= `BSV_ASSIGNMENT_DELAY b5a_5$D_IN;
	if (b5a_6$EN) b5a_6 <= `BSV_ASSIGNMENT_DELAY b5a_6$D_IN;
	if (b5a_7$EN) b5a_7 <= `BSV_ASSIGNMENT_DELAY b5a_7$D_IN;
	if (b6a_0$EN) b6a_0 <= `BSV_ASSIGNMENT_DELAY b6a_0$D_IN;
	if (b6a_1$EN) b6a_1 <= `BSV_ASSIGNMENT_DELAY b6a_1$D_IN;
	if (b6a_2$EN) b6a_2 <= `BSV_ASSIGNMENT_DELAY b6a_2$D_IN;
	if (b6a_3$EN) b6a_3 <= `BSV_ASSIGNMENT_DELAY b6a_3$D_IN;
	if (b6a_4$EN) b6a_4 <= `BSV_ASSIGNMENT_DELAY b6a_4$D_IN;
	if (b6a_5$EN) b6a_5 <= `BSV_ASSIGNMENT_DELAY b6a_5$D_IN;
	if (b6a_6$EN) b6a_6 <= `BSV_ASSIGNMENT_DELAY b6a_6$D_IN;
	if (b6a_7$EN) b6a_7 <= `BSV_ASSIGNMENT_DELAY b6a_7$D_IN;
	if (b7a_0$EN) b7a_0 <= `BSV_ASSIGNMENT_DELAY b7a_0$D_IN;
	if (b7a_1$EN) b7a_1 <= `BSV_ASSIGNMENT_DELAY b7a_1$D_IN;
	if (b7a_2$EN) b7a_2 <= `BSV_ASSIGNMENT_DELAY b7a_2$D_IN;
	if (b7a_3$EN) b7a_3 <= `BSV_ASSIGNMENT_DELAY b7a_3$D_IN;
	if (b7a_4$EN) b7a_4 <= `BSV_ASSIGNMENT_DELAY b7a_4$D_IN;
	if (b7a_5$EN) b7a_5 <= `BSV_ASSIGNMENT_DELAY b7a_5$D_IN;
	if (b7a_6$EN) b7a_6 <= `BSV_ASSIGNMENT_DELAY b7a_6$D_IN;
	if (b7a_7$EN) b7a_7 <= `BSV_ASSIGNMENT_DELAY b7a_7$D_IN;
	if (flag_0$EN) flag_0 <= `BSV_ASSIGNMENT_DELAY flag_0$D_IN;
	if (flag_1$EN) flag_1 <= `BSV_ASSIGNMENT_DELAY flag_1$D_IN;
	if (flag_2$EN) flag_2 <= `BSV_ASSIGNMENT_DELAY flag_2$D_IN;
	if (flag_3$EN) flag_3 <= `BSV_ASSIGNMENT_DELAY flag_3$D_IN;
	if (inp_ready$EN) inp_ready <= `BSV_ASSIGNMENT_DELAY inp_ready$D_IN;
	if (m1$EN) m1 <= `BSV_ASSIGNMENT_DELAY m1$D_IN;
	if (m2$EN) m2 <= `BSV_ASSIGNMENT_DELAY m2$D_IN;
	if (mac_output_0$EN)
	  mac_output_0 <= `BSV_ASSIGNMENT_DELAY mac_output_0$D_IN;
	if (mac_output_1$EN)
	  mac_output_1 <= `BSV_ASSIGNMENT_DELAY mac_output_1$D_IN;
	if (mac_output_2$EN)
	  mac_output_2 <= `BSV_ASSIGNMENT_DELAY mac_output_2$D_IN;
	if (mac_output_3$EN)
	  mac_output_3 <= `BSV_ASSIGNMENT_DELAY mac_output_3$D_IN;
	if (mac_ready$EN) mac_ready <= `BSV_ASSIGNMENT_DELAY mac_ready$D_IN;
	if (partial_sum_0$EN)
	  partial_sum_0 <= `BSV_ASSIGNMENT_DELAY partial_sum_0$D_IN;
	if (partial_sum_1$EN)
	  partial_sum_1 <= `BSV_ASSIGNMENT_DELAY partial_sum_1$D_IN;
	if (partial_sum_10$EN)
	  partial_sum_10 <= `BSV_ASSIGNMENT_DELAY partial_sum_10$D_IN;
	if (partial_sum_11$EN)
	  partial_sum_11 <= `BSV_ASSIGNMENT_DELAY partial_sum_11$D_IN;
	if (partial_sum_12$EN)
	  partial_sum_12 <= `BSV_ASSIGNMENT_DELAY partial_sum_12$D_IN;
	if (partial_sum_13$EN)
	  partial_sum_13 <= `BSV_ASSIGNMENT_DELAY partial_sum_13$D_IN;
	if (partial_sum_14$EN)
	  partial_sum_14 <= `BSV_ASSIGNMENT_DELAY partial_sum_14$D_IN;
	if (partial_sum_15$EN)
	  partial_sum_15 <= `BSV_ASSIGNMENT_DELAY partial_sum_15$D_IN;
	if (partial_sum_16$EN)
	  partial_sum_16 <= `BSV_ASSIGNMENT_DELAY partial_sum_16$D_IN;
	if (partial_sum_17$EN)
	  partial_sum_17 <= `BSV_ASSIGNMENT_DELAY partial_sum_17$D_IN;
	if (partial_sum_18$EN)
	  partial_sum_18 <= `BSV_ASSIGNMENT_DELAY partial_sum_18$D_IN;
	if (partial_sum_19$EN)
	  partial_sum_19 <= `BSV_ASSIGNMENT_DELAY partial_sum_19$D_IN;
	if (partial_sum_2$EN)
	  partial_sum_2 <= `BSV_ASSIGNMENT_DELAY partial_sum_2$D_IN;
	if (partial_sum_20$EN)
	  partial_sum_20 <= `BSV_ASSIGNMENT_DELAY partial_sum_20$D_IN;
	if (partial_sum_21$EN)
	  partial_sum_21 <= `BSV_ASSIGNMENT_DELAY partial_sum_21$D_IN;
	if (partial_sum_22$EN)
	  partial_sum_22 <= `BSV_ASSIGNMENT_DELAY partial_sum_22$D_IN;
	if (partial_sum_23$EN)
	  partial_sum_23 <= `BSV_ASSIGNMENT_DELAY partial_sum_23$D_IN;
	if (partial_sum_3$EN)
	  partial_sum_3 <= `BSV_ASSIGNMENT_DELAY partial_sum_3$D_IN;
	if (partial_sum_4$EN)
	  partial_sum_4 <= `BSV_ASSIGNMENT_DELAY partial_sum_4$D_IN;
	if (partial_sum_5$EN)
	  partial_sum_5 <= `BSV_ASSIGNMENT_DELAY partial_sum_5$D_IN;
	if (partial_sum_6$EN)
	  partial_sum_6 <= `BSV_ASSIGNMENT_DELAY partial_sum_6$D_IN;
	if (partial_sum_7$EN)
	  partial_sum_7 <= `BSV_ASSIGNMENT_DELAY partial_sum_7$D_IN;
	if (partial_sum_8$EN)
	  partial_sum_8 <= `BSV_ASSIGNMENT_DELAY partial_sum_8$D_IN;
	if (partial_sum_9$EN)
	  partial_sum_9 <= `BSV_ASSIGNMENT_DELAY partial_sum_9$D_IN;
	if (product16_0$EN)
	  product16_0 <= `BSV_ASSIGNMENT_DELAY product16_0$D_IN;
	if (product16_1$EN)
	  product16_1 <= `BSV_ASSIGNMENT_DELAY product16_1$D_IN;
	if (product16_2$EN)
	  product16_2 <= `BSV_ASSIGNMENT_DELAY product16_2$D_IN;
	if (product16_3$EN)
	  product16_3 <= `BSV_ASSIGNMENT_DELAY product16_3$D_IN;
	if (product32_0$EN)
	  product32_0 <= `BSV_ASSIGNMENT_DELAY product32_0$D_IN;
	if (product32_1$EN)
	  product32_1 <= `BSV_ASSIGNMENT_DELAY product32_1$D_IN;
	if (product64$EN) product64 <= `BSV_ASSIGNMENT_DELAY product64$D_IN;
	if (reg_mode$EN) reg_mode <= `BSV_ASSIGNMENT_DELAY reg_mode$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 64'hAAAAAAAAAAAAAAAA;
    b0a_0 = 16'hAAAA;
    b0a_1 = 16'hAAAA;
    b0a_2 = 16'hAAAA;
    b0a_3 = 16'hAAAA;
    b0a_4 = 16'hAAAA;
    b0a_5 = 16'hAAAA;
    b0a_6 = 16'hAAAA;
    b0a_7 = 16'hAAAA;
    b1a_0 = 16'hAAAA;
    b1a_1 = 16'hAAAA;
    b1a_2 = 16'hAAAA;
    b1a_3 = 16'hAAAA;
    b1a_4 = 16'hAAAA;
    b1a_5 = 16'hAAAA;
    b1a_6 = 16'hAAAA;
    b1a_7 = 16'hAAAA;
    b2a_0 = 16'hAAAA;
    b2a_1 = 16'hAAAA;
    b2a_2 = 16'hAAAA;
    b2a_3 = 16'hAAAA;
    b2a_4 = 16'hAAAA;
    b2a_5 = 16'hAAAA;
    b2a_6 = 16'hAAAA;
    b2a_7 = 16'hAAAA;
    b3a_0 = 16'hAAAA;
    b3a_1 = 16'hAAAA;
    b3a_2 = 16'hAAAA;
    b3a_3 = 16'hAAAA;
    b3a_4 = 16'hAAAA;
    b3a_5 = 16'hAAAA;
    b3a_6 = 16'hAAAA;
    b3a_7 = 16'hAAAA;
    b4a_0 = 16'hAAAA;
    b4a_1 = 16'hAAAA;
    b4a_2 = 16'hAAAA;
    b4a_3 = 16'hAAAA;
    b4a_4 = 16'hAAAA;
    b4a_5 = 16'hAAAA;
    b4a_6 = 16'hAAAA;
    b4a_7 = 16'hAAAA;
    b5a_0 = 16'hAAAA;
    b5a_1 = 16'hAAAA;
    b5a_2 = 16'hAAAA;
    b5a_3 = 16'hAAAA;
    b5a_4 = 16'hAAAA;
    b5a_5 = 16'hAAAA;
    b5a_6 = 16'hAAAA;
    b5a_7 = 16'hAAAA;
    b6a_0 = 16'hAAAA;
    b6a_1 = 16'hAAAA;
    b6a_2 = 16'hAAAA;
    b6a_3 = 16'hAAAA;
    b6a_4 = 16'hAAAA;
    b6a_5 = 16'hAAAA;
    b6a_6 = 16'hAAAA;
    b6a_7 = 16'hAAAA;
    b7a_0 = 16'hAAAA;
    b7a_1 = 16'hAAAA;
    b7a_2 = 16'hAAAA;
    b7a_3 = 16'hAAAA;
    b7a_4 = 16'hAAAA;
    b7a_5 = 16'hAAAA;
    b7a_6 = 16'hAAAA;
    b7a_7 = 16'hAAAA;
    flag_0 = 1'h0;
    flag_1 = 1'h0;
    flag_2 = 1'h0;
    flag_3 = 1'h0;
    inp_ready = 1'h0;
    m1 = 64'hAAAAAAAAAAAAAAAA;
    m2 = 64'hAAAAAAAAAAAAAAAA;
    mac_output_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_ready = 1'h0;
    partial_sum_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_10 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_11 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_12 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_13 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_14 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_15 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_16 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_17 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_18 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_19 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_20 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_21 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_22 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_23 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_4 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_5 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_6 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_7 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_8 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    partial_sum_9 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    product16_0 = 32'hAAAAAAAA;
    product16_1 = 32'hAAAAAAAA;
    product16_2 = 32'hAAAAAAAA;
    product16_3 = 32'hAAAAAAAA;
    product32_0 = 64'hAAAAAAAAAAAAAAAA;
    product32_1 = 64'hAAAAAAAAAAAAAAAA;
    product64 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    reg_mode = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC

