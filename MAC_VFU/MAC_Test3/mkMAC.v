//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Mon Apr 10 18:42:20 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_values                 O     1 const
// mac_result                     O   128 reg
// RDY_mac_result                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_values_multiplicand1       I    64
// get_values_multiplicand2       I    64
// get_values_addend              I    64
// get_values_mode                I     2
// EN_get_values                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC(CLK,
	     RST_N,

	     get_values_multiplicand1,
	     get_values_multiplicand2,
	     get_values_addend,
	     get_values_mode,
	     EN_get_values,
	     RDY_get_values,

	     mac_result,
	     RDY_mac_result);
  input  CLK;
  input  RST_N;

  // action method get_values
  input  [63 : 0] get_values_multiplicand1;
  input  [63 : 0] get_values_multiplicand2;
  input  [63 : 0] get_values_addend;
  input  [1 : 0] get_values_mode;
  input  EN_get_values;
  output RDY_get_values;

  // value method mac_result
  output [127 : 0] mac_result;
  output RDY_mac_result;

  // signals for module outputs
  wire [127 : 0] mac_result;
  wire RDY_get_values, RDY_mac_result;

  // register a
  reg [63 : 0] a;
  wire [63 : 0] a$D_IN;
  wire a$EN;

  // register inp_ready
  reg inp_ready;
  wire inp_ready$D_IN, inp_ready$EN;

  // register m1
  reg [63 : 0] m1;
  wire [63 : 0] m1$D_IN;
  wire m1$EN;

  // register m2
  reg [63 : 0] m2;
  wire [63 : 0] m2$D_IN;
  wire m2$EN;

  // register mac_output
  reg [127 : 0] mac_output;
  reg [127 : 0] mac_output$D_IN;
  wire mac_output$EN;

  // register mac_ready
  reg mac_ready;
  wire mac_ready$D_IN, mac_ready$EN;

  // register p_20_1_0
  reg [127 : 0] p_20_1_0;
  reg [127 : 0] p_20_1_0$D_IN;
  wire p_20_1_0$EN;

  // register p_20_1_1
  reg [127 : 0] p_20_1_1;
  wire [127 : 0] p_20_1_1$D_IN;
  wire p_20_1_1$EN;

  // register p_20_1_2
  reg [127 : 0] p_20_1_2;
  wire [127 : 0] p_20_1_2$D_IN;
  wire p_20_1_2$EN;

  // register p_20_1_3
  reg [127 : 0] p_20_1_3;
  wire [127 : 0] p_20_1_3$D_IN;
  wire p_20_1_3$EN;

  // register p_21_1_0
  reg [127 : 0] p_21_1_0;
  wire [127 : 0] p_21_1_0$D_IN;
  wire p_21_1_0$EN;

  // register p_21_1_1
  reg [127 : 0] p_21_1_1;
  wire [127 : 0] p_21_1_1$D_IN;
  wire p_21_1_1$EN;

  // register p_21_1_2
  reg [127 : 0] p_21_1_2;
  wire [127 : 0] p_21_1_2$D_IN;
  wire p_21_1_2$EN;

  // register p_21_1_3
  reg [127 : 0] p_21_1_3;
  wire [127 : 0] p_21_1_3$D_IN;
  wire p_21_1_3$EN;

  // register p_22_1_0
  reg [127 : 0] p_22_1_0;
  reg [127 : 0] p_22_1_0$D_IN;
  wire p_22_1_0$EN;

  // register p_22_1_1
  reg [127 : 0] p_22_1_1;
  wire [127 : 0] p_22_1_1$D_IN;
  wire p_22_1_1$EN;

  // register p_22_1_2
  reg [127 : 0] p_22_1_2;
  wire [127 : 0] p_22_1_2$D_IN;
  wire p_22_1_2$EN;

  // register p_22_1_3
  reg [127 : 0] p_22_1_3;
  wire [127 : 0] p_22_1_3$D_IN;
  wire p_22_1_3$EN;

  // register p_23_1_0
  reg [127 : 0] p_23_1_0;
  reg [127 : 0] p_23_1_0$D_IN;
  wire p_23_1_0$EN;

  // register p_23_1_1
  reg [127 : 0] p_23_1_1;
  wire [127 : 0] p_23_1_1$D_IN;
  wire p_23_1_1$EN;

  // register p_23_1_2
  reg [127 : 0] p_23_1_2;
  wire [127 : 0] p_23_1_2$D_IN;
  wire p_23_1_2$EN;

  // register p_23_1_3
  reg [127 : 0] p_23_1_3;
  wire [127 : 0] p_23_1_3$D_IN;
  wire p_23_1_3$EN;

  // register reg_mode
  reg [1 : 0] reg_mode;
  wire [1 : 0] reg_mode$D_IN;
  wire reg_mode$EN;

  // register stage
  reg [1 : 0] stage;
  reg [1 : 0] stage$D_IN;
  wire stage$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_compute_MAC1,
       CAN_FIRE_RL_compute_MAC2,
       CAN_FIRE_RL_compute_MAC3,
       CAN_FIRE_RL_compute_MAC4,
       CAN_FIRE_get_values,
       WILL_FIRE_RL_compute_MAC1,
       WILL_FIRE_RL_compute_MAC2,
       WILL_FIRE_RL_compute_MAC3,
       WILL_FIRE_RL_compute_MAC4,
       WILL_FIRE_get_values;

  // inputs to muxes for submodule ports
  wire [127 : 0] MUX_p_20_1_0$write_1__VAL_3,
		 MUX_p_20_1_1$write_1__VAL_2,
		 MUX_p_20_1_2$write_1__VAL_2,
		 MUX_p_20_1_3$write_1__VAL_2,
		 MUX_p_21_1_0$write_1__VAL_2,
		 MUX_p_21_1_1$write_1__VAL_2,
		 MUX_p_21_1_2$write_1__VAL_2,
		 MUX_p_21_1_3$write_1__VAL_2,
		 MUX_p_22_1_0$write_1__VAL_2,
		 MUX_p_22_1_0$write_1__VAL_3,
		 MUX_p_22_1_1$write_1__VAL_2,
		 MUX_p_22_1_3$write_1__VAL_2,
		 MUX_p_23_1_0$write_1__VAL_2,
		 MUX_p_23_1_0$write_1__VAL_3,
		 MUX_p_23_1_2$write_1__VAL_2,
		 MUX_p_23_1_3$write_1__VAL_2;
  wire [1 : 0] MUX_stage$write_1__VAL_2;
  wire MUX_stage$write_1__SEL_1;

  // remaining internal signals
  wire [255 : 0] _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d11,
		 _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d15,
		 _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d23,
		 _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d33,
		 _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d19,
		 _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d25,
		 _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d35,
		 _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d43,
		 _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d29,
		 _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d37,
		 _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d45,
		 _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d49,
		 _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d41,
		 _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d47,
		 _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d51,
		 _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d53;
  wire [127 : 0] x__h2567,
		 x__h2923,
		 x__h3190,
		 x__h3368,
		 x__h4408,
		 x__h4489,
		 x__h4491,
		 x__h4493,
		 x__h4495,
		 x__h4497,
		 x__h4499,
		 x__h4501,
		 x__h4503,
		 x__h4505,
		 x__h4507,
		 x__h4509,
		 x__h4511,
		 x__h4513,
		 x__h4515,
		 x__h4517,
		 x__h4726,
		 x__h4989,
		 x__h5132,
		 y__h2835,
		 y__h3102,
		 y__h3280,
		 y__h3369,
		 y__h4490;
  wire NOT_get_values_multiplicand1_EQ_m1_38_39_OR_NO_ETC___d145;

  // action method get_values
  assign RDY_get_values = 1'd1 ;
  assign CAN_FIRE_get_values = 1'd1 ;
  assign WILL_FIRE_get_values = EN_get_values ;

  // value method mac_result
  assign mac_result = mac_output ;
  assign RDY_mac_result = mac_ready ;

  // rule RL_compute_MAC1
  assign CAN_FIRE_RL_compute_MAC1 = inp_ready && stage == 2'd0 ;
  assign WILL_FIRE_RL_compute_MAC1 = CAN_FIRE_RL_compute_MAC1 ;

  // rule RL_compute_MAC2
  assign CAN_FIRE_RL_compute_MAC2 = stage == 2'd1 ;
  assign WILL_FIRE_RL_compute_MAC2 = CAN_FIRE_RL_compute_MAC2 ;

  // rule RL_compute_MAC3
  assign CAN_FIRE_RL_compute_MAC3 = stage == 2'd2 ;
  assign WILL_FIRE_RL_compute_MAC3 = CAN_FIRE_RL_compute_MAC3 ;

  // rule RL_compute_MAC4
  assign CAN_FIRE_RL_compute_MAC4 = stage == 2'd3 ;
  assign WILL_FIRE_RL_compute_MAC4 = CAN_FIRE_RL_compute_MAC4 ;

  // inputs to muxes for submodule ports
  assign MUX_stage$write_1__SEL_1 =
	     EN_get_values &&
	     (NOT_get_values_multiplicand1_EQ_m1_38_39_OR_NO_ETC___d145 ||
	      get_values_mode != reg_mode) ;
  assign MUX_p_20_1_0$write_1__VAL_3 = p_20_1_0 + y__h4490 ;
  assign MUX_p_20_1_1$write_1__VAL_2 = { p_20_1_1[111:0], 16'd0 } ;
  assign MUX_p_20_1_2$write_1__VAL_2 = { p_20_1_2[95:0], 32'd0 } ;
  assign MUX_p_20_1_3$write_1__VAL_2 = { p_20_1_3[79:0], 48'd0 } ;
  assign MUX_p_21_1_0$write_1__VAL_2 = { p_21_1_0[111:0], 16'd0 } ;
  assign MUX_p_21_1_1$write_1__VAL_2 = { p_21_1_1[95:0], 32'd0 } ;
  assign MUX_p_21_1_2$write_1__VAL_2 = { p_21_1_2[79:0], 48'd0 } ;
  assign MUX_p_21_1_3$write_1__VAL_2 = { p_23_1_1[63:0], 64'd0 } ;
  assign MUX_p_22_1_0$write_1__VAL_2 = { p_22_1_0[95:0], 32'd0 } ;
  assign MUX_p_22_1_0$write_1__VAL_3 = x__h4408 + y__h4490 ;
  assign MUX_p_22_1_1$write_1__VAL_2 = { p_22_1_1[79:0], 48'd0 } ;
  assign MUX_p_22_1_3$write_1__VAL_2 = { p_22_1_3[47:0], 80'd0 } ;
  assign MUX_p_23_1_0$write_1__VAL_2 = { p_23_1_0[79:0], 48'd0 } ;
  assign MUX_p_23_1_0$write_1__VAL_3 = x__h4489 + y__h4490 ;
  assign MUX_p_23_1_2$write_1__VAL_2 = { p_23_1_2[47:0], 80'd0 } ;
  assign MUX_p_23_1_3$write_1__VAL_2 = { p_23_1_3[31:0], 96'd0 } ;
  assign MUX_stage$write_1__VAL_2 = stage + 2'd1 ;

  // register a
  assign a$D_IN = get_values_addend ;
  assign a$EN = MUX_stage$write_1__SEL_1 ;

  // register inp_ready
  assign inp_ready$D_IN =
	     NOT_get_values_multiplicand1_EQ_m1_38_39_OR_NO_ETC___d145 ||
	     get_values_mode != reg_mode ;
  assign inp_ready$EN = EN_get_values ;

  // register m1
  assign m1$D_IN = get_values_multiplicand1 ;
  assign m1$EN = MUX_stage$write_1__SEL_1 ;

  // register m2
  assign m2$D_IN = get_values_multiplicand2 ;
  assign m2$EN = MUX_stage$write_1__SEL_1 ;

  // register mac_output
  always@(reg_mode or p_23_1_0 or x__h4726 or x__h4989 or x__h5132)
  begin
    case (reg_mode)
      2'd0: mac_output$D_IN = x__h4726;
      2'd1: mac_output$D_IN = x__h4989;
      2'd2: mac_output$D_IN = x__h5132;
      2'd3: mac_output$D_IN = p_23_1_0;
    endcase
  end
  assign mac_output$EN = CAN_FIRE_RL_compute_MAC4 ;

  // register mac_ready
  assign mac_ready$D_IN = 1'd1 ;
  assign mac_ready$EN = CAN_FIRE_RL_compute_MAC4 ;

  // register p_20_1_0
  always@(WILL_FIRE_RL_compute_MAC2 or
	  p_20_1_0 or
	  WILL_FIRE_RL_compute_MAC1 or
	  _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d11 or
	  WILL_FIRE_RL_compute_MAC3 or MUX_p_20_1_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_compute_MAC2: p_20_1_0$D_IN = p_20_1_0;
      WILL_FIRE_RL_compute_MAC1:
	  p_20_1_0$D_IN =
	      _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d11[127:0];
      WILL_FIRE_RL_compute_MAC3: p_20_1_0$D_IN = MUX_p_20_1_0$write_1__VAL_3;
      default: p_20_1_0$D_IN =
		   128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign p_20_1_0$EN =
	     WILL_FIRE_RL_compute_MAC2 || WILL_FIRE_RL_compute_MAC1 ||
	     WILL_FIRE_RL_compute_MAC3 ;

  // register p_20_1_1
  assign p_20_1_1$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d19[127:0] :
	       MUX_p_20_1_1$write_1__VAL_2 ;
  assign p_20_1_1$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_20_1_2
  assign p_20_1_2$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d29[127:0] :
	       MUX_p_20_1_2$write_1__VAL_2 ;
  assign p_20_1_2$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_20_1_3
  assign p_20_1_3$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d41[127:0] :
	       MUX_p_20_1_3$write_1__VAL_2 ;
  assign p_20_1_3$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_21_1_0
  assign p_21_1_0$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d15[127:0] :
	       MUX_p_21_1_0$write_1__VAL_2 ;
  assign p_21_1_0$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_21_1_1
  assign p_21_1_1$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d25[127:0] :
	       MUX_p_21_1_1$write_1__VAL_2 ;
  assign p_21_1_1$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_21_1_2
  assign p_21_1_2$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d37[127:0] :
	       MUX_p_21_1_2$write_1__VAL_2 ;
  assign p_21_1_2$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_21_1_3
  assign p_21_1_3$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d47[127:0] :
	       MUX_p_21_1_3$write_1__VAL_2 ;
  assign p_21_1_3$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_22_1_0
  always@(WILL_FIRE_RL_compute_MAC1 or
	  _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d23 or
	  WILL_FIRE_RL_compute_MAC2 or
	  MUX_p_22_1_0$write_1__VAL_2 or
	  WILL_FIRE_RL_compute_MAC3 or MUX_p_22_1_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_compute_MAC1:
	  p_22_1_0$D_IN =
	      _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d23[127:0];
      WILL_FIRE_RL_compute_MAC2: p_22_1_0$D_IN = MUX_p_22_1_0$write_1__VAL_2;
      WILL_FIRE_RL_compute_MAC3: p_22_1_0$D_IN = MUX_p_22_1_0$write_1__VAL_3;
      default: p_22_1_0$D_IN =
		   128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign p_22_1_0$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ||
	     WILL_FIRE_RL_compute_MAC3 ;

  // register p_22_1_1
  assign p_22_1_1$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d35[127:0] :
	       MUX_p_22_1_1$write_1__VAL_2 ;
  assign p_22_1_1$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_22_1_2
  assign p_22_1_2$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d45[127:0] :
	       MUX_p_21_1_3$write_1__VAL_2 ;
  assign p_22_1_2$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_22_1_3
  assign p_22_1_3$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d51[127:0] :
	       MUX_p_22_1_3$write_1__VAL_2 ;
  assign p_22_1_3$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_23_1_0
  always@(WILL_FIRE_RL_compute_MAC1 or
	  _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d33 or
	  WILL_FIRE_RL_compute_MAC2 or
	  MUX_p_23_1_0$write_1__VAL_2 or
	  WILL_FIRE_RL_compute_MAC3 or MUX_p_23_1_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_compute_MAC1:
	  p_23_1_0$D_IN =
	      _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d33[127:0];
      WILL_FIRE_RL_compute_MAC2: p_23_1_0$D_IN = MUX_p_23_1_0$write_1__VAL_2;
      WILL_FIRE_RL_compute_MAC3: p_23_1_0$D_IN = MUX_p_23_1_0$write_1__VAL_3;
      default: p_23_1_0$D_IN =
		   128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign p_23_1_0$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ||
	     WILL_FIRE_RL_compute_MAC3 ;

  // register p_23_1_1
  assign p_23_1_1$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d43[127:0] :
	       MUX_p_21_1_3$write_1__VAL_2 ;
  assign p_23_1_1$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_23_1_2
  assign p_23_1_2$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d49[127:0] :
	       MUX_p_23_1_2$write_1__VAL_2 ;
  assign p_23_1_2$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register p_23_1_3
  assign p_23_1_3$D_IN =
	     WILL_FIRE_RL_compute_MAC1 ?
	       _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d53[127:0] :
	       MUX_p_23_1_3$write_1__VAL_2 ;
  assign p_23_1_3$EN =
	     WILL_FIRE_RL_compute_MAC1 || WILL_FIRE_RL_compute_MAC2 ;

  // register reg_mode
  assign reg_mode$D_IN = get_values_mode ;
  assign reg_mode$EN = MUX_stage$write_1__SEL_1 ;

  // register stage
  always@(MUX_stage$write_1__SEL_1 or
	  WILL_FIRE_RL_compute_MAC4 or
	  MUX_stage$write_1__VAL_2 or
	  WILL_FIRE_RL_compute_MAC3 or
	  WILL_FIRE_RL_compute_MAC2 or WILL_FIRE_RL_compute_MAC1)
  case (1'b1)
    MUX_stage$write_1__SEL_1: stage$D_IN = 2'd0;
    WILL_FIRE_RL_compute_MAC4: stage$D_IN = MUX_stage$write_1__VAL_2;
    WILL_FIRE_RL_compute_MAC3: stage$D_IN = MUX_stage$write_1__VAL_2;
    WILL_FIRE_RL_compute_MAC2: stage$D_IN = MUX_stage$write_1__VAL_2;
    WILL_FIRE_RL_compute_MAC1: stage$D_IN = MUX_stage$write_1__VAL_2;
    default: stage$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign stage$EN =
	     MUX_stage$write_1__SEL_1 || WILL_FIRE_RL_compute_MAC4 ||
	     WILL_FIRE_RL_compute_MAC3 ||
	     WILL_FIRE_RL_compute_MAC2 ||
	     WILL_FIRE_RL_compute_MAC1 ;

  // remaining internal signals
  assign NOT_get_values_multiplicand1_EQ_m1_38_39_OR_NO_ETC___d145 =
	     get_values_multiplicand1 != m1 ||
	     get_values_multiplicand2 != m2 ||
	     get_values_addend != a ;
  assign _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d11 =
	     x__h2567 * y__h2835 ;
  assign _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d15 =
	     x__h2567 * y__h3102 ;
  assign _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d23 =
	     x__h2567 * y__h3280 ;
  assign _0_CONCAT_m1_BITS_15_TO_0_MUL_0_CONCAT_m2_BITS__ETC___d33 =
	     x__h2567 * y__h3369 ;
  assign _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d19 =
	     x__h2923 * y__h2835 ;
  assign _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d25 =
	     x__h2923 * y__h3102 ;
  assign _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d35 =
	     x__h2923 * y__h3280 ;
  assign _0_CONCAT_m1_BITS_31_TO_16_7_8_MUL_0_CONCAT_m2__ETC___d43 =
	     x__h2923 * y__h3369 ;
  assign _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d29 =
	     x__h3190 * y__h2835 ;
  assign _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d37 =
	     x__h3190 * y__h3102 ;
  assign _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d45 =
	     x__h3190 * y__h3280 ;
  assign _0_CONCAT_m1_BITS_47_TO_32_7_8_MUL_0_CONCAT_m2__ETC___d49 =
	     x__h3190 * y__h3369 ;
  assign _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d41 =
	     x__h3368 * y__h2835 ;
  assign _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d47 =
	     x__h3368 * y__h3102 ;
  assign _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d51 =
	     x__h3368 * y__h3280 ;
  assign _0_CONCAT_m1_BITS_63_TO_48_9_0_MUL_0_CONCAT_m2__ETC___d53 =
	     x__h3368 * y__h3369 ;
  assign x__h2567 = { 112'd0, m1[15:0] } ;
  assign x__h2923 = { 112'd0, m1[31:16] } ;
  assign x__h3190 = { 112'd0, m1[47:32] } ;
  assign x__h3368 = { 112'd0, m1[63:48] } ;
  assign x__h4408 = x__h4515 + p_21_1_1 ;
  assign x__h4489 = x__h4491 + p_23_1_3 ;
  assign x__h4491 = x__h4493 + p_22_1_3 ;
  assign x__h4493 = x__h4495 + p_23_1_2 ;
  assign x__h4495 = x__h4497 + p_21_1_3 ;
  assign x__h4497 = x__h4499 + p_22_1_2 ;
  assign x__h4499 = x__h4501 + p_23_1_1 ;
  assign x__h4501 = x__h4503 + p_20_1_3 ;
  assign x__h4503 = x__h4505 + p_21_1_2 ;
  assign x__h4505 = x__h4507 + p_22_1_1 ;
  assign x__h4507 = x__h4509 + p_23_1_0 ;
  assign x__h4509 = x__h4511 + p_20_1_2 ;
  assign x__h4511 = x__h4513 + p_21_1_1 ;
  assign x__h4513 = x__h4515 + p_22_1_0 ;
  assign x__h4515 = x__h4517 + p_20_1_1 ;
  assign x__h4517 = p_20_1_0 + p_21_1_0 ;
  assign x__h4726 = {8{p_20_1_0[15:0]}} ;
  assign x__h4989 = {4{p_20_1_0[31:0]}} ;
  assign x__h5132 = {2{p_22_1_0[63:0]}} ;
  assign y__h2835 = { 112'd0, m2[15:0] } ;
  assign y__h3102 = { 112'd0, m2[31:16] } ;
  assign y__h3280 = { 112'd0, m2[47:32] } ;
  assign y__h3369 = { 112'd0, m2[63:48] } ;
  assign y__h4490 = { 64'd0, a } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 64'd0;
	inp_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	m2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mac_output <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mac_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	p_20_1_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_20_1_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_20_1_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_20_1_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_21_1_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_21_1_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_21_1_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_21_1_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_22_1_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_22_1_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_22_1_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_22_1_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_23_1_0 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_23_1_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_23_1_2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	p_23_1_3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	reg_mode <= `BSV_ASSIGNMENT_DELAY 2'd0;
	stage <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (a$EN) a <= `BSV_ASSIGNMENT_DELAY a$D_IN;
	if (inp_ready$EN) inp_ready <= `BSV_ASSIGNMENT_DELAY inp_ready$D_IN;
	if (m1$EN) m1 <= `BSV_ASSIGNMENT_DELAY m1$D_IN;
	if (m2$EN) m2 <= `BSV_ASSIGNMENT_DELAY m2$D_IN;
	if (mac_output$EN)
	  mac_output <= `BSV_ASSIGNMENT_DELAY mac_output$D_IN;
	if (mac_ready$EN) mac_ready <= `BSV_ASSIGNMENT_DELAY mac_ready$D_IN;
	if (p_20_1_0$EN) p_20_1_0 <= `BSV_ASSIGNMENT_DELAY p_20_1_0$D_IN;
	if (p_20_1_1$EN) p_20_1_1 <= `BSV_ASSIGNMENT_DELAY p_20_1_1$D_IN;
	if (p_20_1_2$EN) p_20_1_2 <= `BSV_ASSIGNMENT_DELAY p_20_1_2$D_IN;
	if (p_20_1_3$EN) p_20_1_3 <= `BSV_ASSIGNMENT_DELAY p_20_1_3$D_IN;
	if (p_21_1_0$EN) p_21_1_0 <= `BSV_ASSIGNMENT_DELAY p_21_1_0$D_IN;
	if (p_21_1_1$EN) p_21_1_1 <= `BSV_ASSIGNMENT_DELAY p_21_1_1$D_IN;
	if (p_21_1_2$EN) p_21_1_2 <= `BSV_ASSIGNMENT_DELAY p_21_1_2$D_IN;
	if (p_21_1_3$EN) p_21_1_3 <= `BSV_ASSIGNMENT_DELAY p_21_1_3$D_IN;
	if (p_22_1_0$EN) p_22_1_0 <= `BSV_ASSIGNMENT_DELAY p_22_1_0$D_IN;
	if (p_22_1_1$EN) p_22_1_1 <= `BSV_ASSIGNMENT_DELAY p_22_1_1$D_IN;
	if (p_22_1_2$EN) p_22_1_2 <= `BSV_ASSIGNMENT_DELAY p_22_1_2$D_IN;
	if (p_22_1_3$EN) p_22_1_3 <= `BSV_ASSIGNMENT_DELAY p_22_1_3$D_IN;
	if (p_23_1_0$EN) p_23_1_0 <= `BSV_ASSIGNMENT_DELAY p_23_1_0$D_IN;
	if (p_23_1_1$EN) p_23_1_1 <= `BSV_ASSIGNMENT_DELAY p_23_1_1$D_IN;
	if (p_23_1_2$EN) p_23_1_2 <= `BSV_ASSIGNMENT_DELAY p_23_1_2$D_IN;
	if (p_23_1_3$EN) p_23_1_3 <= `BSV_ASSIGNMENT_DELAY p_23_1_3$D_IN;
	if (reg_mode$EN) reg_mode <= `BSV_ASSIGNMENT_DELAY reg_mode$D_IN;
	if (stage$EN) stage <= `BSV_ASSIGNMENT_DELAY stage$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 64'hAAAAAAAAAAAAAAAA;
    inp_ready = 1'h0;
    m1 = 64'hAAAAAAAAAAAAAAAA;
    m2 = 64'hAAAAAAAAAAAAAAAA;
    mac_output = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_ready = 1'h0;
    p_20_1_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_20_1_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_20_1_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_20_1_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_21_1_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_21_1_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_21_1_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_21_1_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_22_1_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_22_1_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_22_1_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_22_1_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_23_1_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_23_1_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_23_1_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p_23_1_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    reg_mode = 2'h2;
    stage = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC

