//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Tue May  9 01:21:01 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_inputs                 O     1
// mac_result                     O   128
// RDY_mac_result                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_inputs_multiplicand1       I    64
// get_inputs_multiplicand2       I    64
// get_inputs_addend              I    64
// get_inputs_mode                I     1 reg
// EN_get_inputs                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC64(CLK,
	       RST_N,

	       get_inputs_multiplicand1,
	       get_inputs_multiplicand2,
	       get_inputs_addend,
	       get_inputs_mode,
	       EN_get_inputs,
	       RDY_get_inputs,

	       mac_result,
	       RDY_mac_result);
  input  CLK;
  input  RST_N;

  // action method get_inputs
  input  [63 : 0] get_inputs_multiplicand1;
  input  [63 : 0] get_inputs_multiplicand2;
  input  [63 : 0] get_inputs_addend;
  input  get_inputs_mode;
  input  EN_get_inputs;
  output RDY_get_inputs;

  // value method mac_result
  output [127 : 0] mac_result;
  output RDY_mac_result;

  // signals for module outputs
  wire [127 : 0] mac_result;
  wire RDY_get_inputs, RDY_mac_result;

  // inlined wires
  wire [576 : 0] partial_product_rv$port1__read,
		 partial_product_rv$port1__write_1,
		 partial_product_rv$port2__read;
  wire [192 : 0] mac_inputs_rv$port1__read,
		 mac_inputs_rv$port1__write_1,
		 mac_inputs_rv$port2__read;
  wire [128 : 0] mac_output_rv$port1__write_1, mac_output_rv$port2__read;
  wire mac_output_rv$EN_port1__write, partial_product_rv$EN_port0__write;

  // register mac_inputs_rv
  reg [192 : 0] mac_inputs_rv;
  wire [192 : 0] mac_inputs_rv$D_IN;
  wire mac_inputs_rv$EN;

  // register mac_output_rv
  reg [128 : 0] mac_output_rv;
  wire [128 : 0] mac_output_rv$D_IN;
  wire mac_output_rv$EN;

  // register mode_r
  reg mode_r;
  wire mode_r$D_IN, mode_r$EN;

  // register partial_product_rv
  reg [576 : 0] partial_product_rv;
  wire [576 : 0] partial_product_rv$D_IN;
  wire partial_product_rv$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_generate_partials,
       CAN_FIRE_RL_rl_mac_32,
       CAN_FIRE_RL_rl_mac_64,
       CAN_FIRE_get_inputs,
       WILL_FIRE_RL_rl_generate_partials,
       WILL_FIRE_RL_rl_mac_32,
       WILL_FIRE_RL_rl_mac_64,
       WILL_FIRE_get_inputs;

  // inputs to muxes for submodule ports
  wire [128 : 0] MUX_mac_output_rv$port1__write_1__VAL_1,
		 MUX_mac_output_rv$port1__write_1__VAL_2;

  // remaining internal signals
  wire [127 : 0] x140_PLUS_y141__q1,
		 x222_PLUS_y223__q2,
		 x344_PLUS_y345__q3,
		 x506_PLUS_y507__q4,
		 x628_PLUS_y629__q5,
		 x__h3670,
		 x__h3672,
		 x__h3674,
		 x__h3676,
		 x__h3678,
		 x__h3680,
		 x__h3682,
		 x__h4140,
		 x__h4222,
		 x__h4224,
		 x__h4344,
		 x__h4346,
		 x__h4348,
		 x__h4506,
		 x__h4508,
		 x__h4628,
		 y__h3671,
		 y__h3673,
		 y__h3675,
		 y__h3677,
		 y__h3679,
		 y__h3681,
		 y__h3683,
		 y__h4141,
		 y__h4223,
		 y__h4225,
		 y__h4345,
		 y__h4347,
		 y__h4349,
		 y__h4507,
		 y__h4509,
		 y__h4629;
  wire [63 : 0] _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d45,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d53,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d58,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d60,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d31,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d41,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d50,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d55,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d20,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d27,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d38,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d48,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d11,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d15,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d24,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d36,
		mac_32_1__h4848,
		mac_32_2__h4849,
		x047_PLUS_y048__q7,
		x909_PLUS_y910__q6,
		x__h4869,
		x__h4871,
		x__h4873,
		x__h4909,
		x__h5007,
		x__h5009,
		x__h5011,
		x__h5047,
		y__h4870,
		y__h4872,
		y__h4874,
		y__h4910,
		y__h5008,
		y__h5010,
		y__h5012,
		y__h5048;

  // action method get_inputs
  assign RDY_get_inputs = !mac_inputs_rv$port1__read[192] ;
  assign CAN_FIRE_get_inputs = !mac_inputs_rv$port1__read[192] ;
  assign WILL_FIRE_get_inputs = EN_get_inputs ;

  // value method mac_result
  assign mac_result = mac_output_rv[127:0] ;
  assign RDY_mac_result = mac_output_rv[128] ;

  // rule RL_rl_mac_64
  assign CAN_FIRE_RL_rl_mac_64 =
	     partial_product_rv[576] && !mac_output_rv[128] && mode_r ;
  assign WILL_FIRE_RL_rl_mac_64 = CAN_FIRE_RL_rl_mac_64 ;

  // rule RL_rl_mac_32
  assign CAN_FIRE_RL_rl_mac_32 =
	     partial_product_rv[576] && !mac_output_rv[128] && !mode_r ;
  assign WILL_FIRE_RL_rl_mac_32 = CAN_FIRE_RL_rl_mac_32 ;

  // rule RL_rl_generate_partials
  assign CAN_FIRE_RL_rl_generate_partials =
	     mac_inputs_rv[192] && !partial_product_rv$port1__read[576] ;
  assign WILL_FIRE_RL_rl_generate_partials =
	     CAN_FIRE_RL_rl_generate_partials ;

  // inputs to muxes for submodule ports
  assign MUX_mac_output_rv$port1__write_1__VAL_1 =
	     { 1'd1, x__h3670 + y__h3671 } ;
  assign MUX_mac_output_rv$port1__write_1__VAL_2 =
	     { 1'd1, mac_32_2__h4849, mac_32_1__h4848 } ;

  // inlined wires
  assign mac_inputs_rv$port1__read =
	     CAN_FIRE_RL_rl_generate_partials ?
	       193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       mac_inputs_rv ;
  assign mac_inputs_rv$port1__write_1 =
	     { 1'd1,
	       get_inputs_multiplicand1,
	       get_inputs_multiplicand2,
	       get_inputs_addend } ;
  assign mac_inputs_rv$port2__read =
	     EN_get_inputs ?
	       mac_inputs_rv$port1__write_1 :
	       mac_inputs_rv$port1__read ;
  assign partial_product_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_mac_32 || WILL_FIRE_RL_rl_mac_64 ;
  assign partial_product_rv$port1__read =
	     partial_product_rv$EN_port0__write ?
	       577'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       partial_product_rv ;
  assign partial_product_rv$port1__write_1 =
	     { 1'd1,
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d11[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d15[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d20[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d24[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d27[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d31[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d36[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d38[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d41[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d45[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d48[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d50[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d53[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d55[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d58[31:0],
	       _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d60[31:0],
	       mac_inputs_rv[63:0] } ;
  assign partial_product_rv$port2__read =
	     CAN_FIRE_RL_rl_generate_partials ?
	       partial_product_rv$port1__write_1 :
	       partial_product_rv$port1__read ;
  assign mac_output_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_mac_64 || WILL_FIRE_RL_rl_mac_32 ;
  assign mac_output_rv$port1__write_1 =
	     WILL_FIRE_RL_rl_mac_64 ?
	       MUX_mac_output_rv$port1__write_1__VAL_1 :
	       MUX_mac_output_rv$port1__write_1__VAL_2 ;
  assign mac_output_rv$port2__read =
	     mac_output_rv$EN_port1__write ?
	       mac_output_rv$port1__write_1 :
	       mac_output_rv ;

  // register mac_inputs_rv
  assign mac_inputs_rv$D_IN = mac_inputs_rv$port2__read ;
  assign mac_inputs_rv$EN = 1'b1 ;

  // register mac_output_rv
  assign mac_output_rv$D_IN = mac_output_rv$port2__read ;
  assign mac_output_rv$EN = 1'b1 ;

  // register mode_r
  assign mode_r$D_IN = get_inputs_mode ;
  assign mode_r$EN = EN_get_inputs ;

  // register partial_product_rv
  assign partial_product_rv$D_IN = partial_product_rv$port2__read ;
  assign partial_product_rv$EN = 1'b1 ;

  // remaining internal signals
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d45 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d53 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d58 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_143_TO_ETC___d60 =
	     { 16'd0, mac_inputs_rv[143:128] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d31 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d41 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d50 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_159_TO_ETC___d55 =
	     { 16'd0, mac_inputs_rv[159:144] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d20 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d27 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d38 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_175_TO_ETC___d48 =
	     { 16'd0, mac_inputs_rv[175:160] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d11 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[127:112] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d15 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[111:96] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d24 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[95:80] } ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_191_TO_ETC___d36 =
	     { 16'd0, mac_inputs_rv[191:176] } *
	     { 16'd0, mac_inputs_rv[79:64] } ;
  assign mac_32_1__h4848 = x__h5007 + y__h5008 ;
  assign mac_32_2__h4849 = x__h4869 + y__h4870 ;
  assign x047_PLUS_y048__q7 = x__h5047 + y__h5048 ;
  assign x140_PLUS_y141__q1 = x__h4140 + y__h4141 ;
  assign x222_PLUS_y223__q2 = x__h4222 + y__h4223 ;
  assign x344_PLUS_y345__q3 = x__h4344 + y__h4345 ;
  assign x506_PLUS_y507__q4 = x__h4506 + y__h4507 ;
  assign x628_PLUS_y629__q5 = x__h4628 + y__h4629 ;
  assign x909_PLUS_y910__q6 = x__h4909 + y__h4910 ;
  assign x__h3670 = x__h3672 + y__h3673 ;
  assign x__h3672 = x__h3674 + y__h3675 ;
  assign x__h3674 = x__h3676 + y__h3677 ;
  assign x__h3676 = x__h3678 + y__h3679 ;
  assign x__h3678 = x__h3680 + y__h3681 ;
  assign x__h3680 = x__h3682 + y__h3683 ;
  assign x__h3682 = { 96'd0, partial_product_rv[95:64] } ;
  assign x__h4140 = { 96'd0, partial_product_rv[127:96] } ;
  assign x__h4222 = x__h4224 + y__h4225 ;
  assign x__h4224 = { 96'd0, partial_product_rv[191:160] } ;
  assign x__h4344 = x__h4346 + y__h4347 ;
  assign x__h4346 = x__h4348 + y__h4349 ;
  assign x__h4348 = { 96'd0, partial_product_rv[287:256] } ;
  assign x__h4506 = x__h4508 + y__h4509 ;
  assign x__h4508 = { 96'd0, partial_product_rv[415:384] } ;
  assign x__h4628 = { 96'd0, partial_product_rv[511:480] } ;
  assign x__h4869 = x__h4871 + y__h4872 ;
  assign x__h4871 = x__h4873 + y__h4874 ;
  assign x__h4873 = { 32'd0, partial_product_rv[447:416] } ;
  assign x__h4909 = { 32'd0, partial_product_rv[511:480] } ;
  assign x__h5007 = x__h5009 + y__h5010 ;
  assign x__h5009 = x__h5011 + y__h5012 ;
  assign x__h5011 = { 32'd0, partial_product_rv[95:64] } ;
  assign x__h5047 = { 32'd0, partial_product_rv[127:96] } ;
  assign y__h3671 = { 64'd0, partial_product_rv[63:0] } ;
  assign y__h3673 = { partial_product_rv[575:544], 96'd0 } ;
  assign y__h3675 = { x628_PLUS_y629__q5[47:0], 80'd0 } ;
  assign y__h3677 = { x506_PLUS_y507__q4[63:0], 64'd0 } ;
  assign y__h3679 = { x344_PLUS_y345__q3[79:0], 48'd0 } ;
  assign y__h3681 = { x222_PLUS_y223__q2[95:0], 32'd0 } ;
  assign y__h3683 = { x140_PLUS_y141__q1[111:0], 16'd0 } ;
  assign y__h4141 = { 96'd0, partial_product_rv[159:128] } ;
  assign y__h4223 = { 96'd0, partial_product_rv[255:224] } ;
  assign y__h4225 = { 96'd0, partial_product_rv[223:192] } ;
  assign y__h4345 = { 96'd0, partial_product_rv[383:352] } ;
  assign y__h4347 = { 96'd0, partial_product_rv[351:320] } ;
  assign y__h4349 = { 96'd0, partial_product_rv[319:288] } ;
  assign y__h4507 = { 96'd0, partial_product_rv[479:448] } ;
  assign y__h4509 = { 96'd0, partial_product_rv[447:416] } ;
  assign y__h4629 = { 96'd0, partial_product_rv[543:512] } ;
  assign y__h4870 = { 32'd0, partial_product_rv[63:32] } ;
  assign y__h4872 = { partial_product_rv[575:544], 32'd0 } ;
  assign y__h4874 = { x909_PLUS_y910__q6[47:0], 16'd0 } ;
  assign y__h4910 = { 32'd0, partial_product_rv[543:512] } ;
  assign y__h5008 = { 32'd0, partial_product_rv[31:0] } ;
  assign y__h5010 = { partial_product_rv[223:192], 32'd0 } ;
  assign y__h5012 = { x047_PLUS_y048__q7[47:0], 16'd0 } ;
  assign y__h5048 = { 32'd0, partial_product_rv[159:128] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        mac_inputs_rv <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	mac_output_rv <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	mode_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	partial_product_rv <= `BSV_ASSIGNMENT_DELAY
	    577'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (mac_inputs_rv$EN)
	  mac_inputs_rv <= `BSV_ASSIGNMENT_DELAY mac_inputs_rv$D_IN;
	if (mac_output_rv$EN)
	  mac_output_rv <= `BSV_ASSIGNMENT_DELAY mac_output_rv$D_IN;
	if (mode_r$EN) mode_r <= `BSV_ASSIGNMENT_DELAY mode_r$D_IN;
	if (partial_product_rv$EN)
	  partial_product_rv <= `BSV_ASSIGNMENT_DELAY partial_product_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    mac_inputs_rv = 193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_rv = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mode_r = 1'h0;
    partial_product_rv =
	577'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC64

