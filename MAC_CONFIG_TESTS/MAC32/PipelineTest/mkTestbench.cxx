/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Thu May  4 22:04:10 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestbench.h"


/* String declarations */
static std::string const __str_literal_4("\nCycles: %d\n", 12u);
static std::string const __str_literal_1("%t: PIPE1: data: %d", 19u);
static std::string const __str_literal_3("%t: PIPE2 is Empty", 18u);
static std::string const __str_literal_2("%t: PIPE2: data: %d", 19u);


/* Constructor */
MOD_mkTestbench::MOD_mkTestbench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_counter(simHdl, "counter", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_pipe1_rv(simHdl, "pipe1_rv", this, 33u, 2863311530llu, (tUInt8)0u),
    INST_pipe2_rv(simHdl, "pipe2_rv", this, 33u, 2863311530llu, (tUInt8)0u),
    INST_rg_cnt(simHdl, "rg_cnt", this, 4u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h1063(12297829382473034410llu),
    DEF_v__h1019(12297829382473034410llu),
    DEF_v__h902(12297829382473034410llu)
{
  symbol_count = 23u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestbench::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_cycle_count", SYM_DEF, &DEF_CAN_FIRE_RL_cycle_count, 1u);
  init_symbol(&symbols[1u],
	      "CAN_FIRE_RL_rl_dummy_print2",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_rl_dummy_print2,
	      1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_rl_finish", SYM_DEF, &DEF_CAN_FIRE_RL_rl_finish, 1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_rl_give_inputs",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_rl_give_inputs,
	      1u);
  init_symbol(&symbols[4u], "CAN_FIRE_RL_rl_stage1", SYM_DEF, &DEF_CAN_FIRE_RL_rl_stage1, 1u);
  init_symbol(&symbols[5u], "CAN_FIRE_RL_rl_stage2", SYM_DEF, &DEF_CAN_FIRE_RL_rl_stage2, 1u);
  init_symbol(&symbols[6u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[7u], "pipe1_rv", SYM_MODULE, &INST_pipe1_rv);
  init_symbol(&symbols[8u], "pipe2_rv", SYM_MODULE, &INST_pipe2_rv);
  init_symbol(&symbols[9u], "RL_cycle_count", SYM_RULE);
  init_symbol(&symbols[10u], "RL_rl_dummy_print2", SYM_RULE);
  init_symbol(&symbols[11u], "RL_rl_finish", SYM_RULE);
  init_symbol(&symbols[12u], "RL_rl_give_inputs", SYM_RULE);
  init_symbol(&symbols[13u], "RL_rl_stage1", SYM_RULE);
  init_symbol(&symbols[14u], "RL_rl_stage2", SYM_RULE);
  init_symbol(&symbols[15u], "rg_cnt", SYM_MODULE, &INST_rg_cnt);
  init_symbol(&symbols[16u], "WILL_FIRE_RL_cycle_count", SYM_DEF, &DEF_WILL_FIRE_RL_cycle_count, 1u);
  init_symbol(&symbols[17u],
	      "WILL_FIRE_RL_rl_dummy_print2",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_rl_dummy_print2,
	      1u);
  init_symbol(&symbols[18u], "WILL_FIRE_RL_rl_finish", SYM_DEF, &DEF_WILL_FIRE_RL_rl_finish, 1u);
  init_symbol(&symbols[19u],
	      "WILL_FIRE_RL_rl_give_inputs",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_rl_give_inputs,
	      1u);
  init_symbol(&symbols[20u], "WILL_FIRE_RL_rl_stage1", SYM_DEF, &DEF_WILL_FIRE_RL_rl_stage1, 1u);
  init_symbol(&symbols[21u], "WILL_FIRE_RL_rl_stage2", SYM_DEF, &DEF_WILL_FIRE_RL_rl_stage2, 1u);
  init_symbol(&symbols[22u], "x__h683", SYM_DEF, &DEF_x__h683, 4u);
}


/* Rule actions */

void MOD_mkTestbench::RL_cycle_count()
{
  tUInt8 DEF_x__h520;
  DEF_x__h540 = INST_counter.METH_read();
  DEF_x__h520 = (tUInt8)15u & (DEF_x__h540 + (tUInt8)1u);
  INST_counter.METH_write(DEF_x__h520);
}

void MOD_mkTestbench::RL_rl_give_inputs()
{
  tUInt8 DEF_x__h664;
  tUInt64 DEF__268435456_CONCAT_rg_cnt___d9;
  DEF_x__h683 = INST_rg_cnt.METH_read();
  DEF__268435456_CONCAT_rg_cnt___d9 = 8589934591llu & ((((tUInt64)(268435456u)) << 4u) | (tUInt64)(DEF_x__h683));
  DEF_x__h664 = (tUInt8)15u & (DEF_x__h683 + (tUInt8)1u);
  INST_pipe1_rv.METH_port1__write(DEF__268435456_CONCAT_rg_cnt___d9);
  INST_rg_cnt.METH_write(DEF_x__h664);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this);
}

void MOD_mkTestbench::RL_rl_stage1()
{
  tUInt64 DEF__1_CONCAT_pipe1_rv_port0__read__1_BITS_31_TO_0_7___d18;
  tUInt32 DEF_data__h698;
  tUInt32 DEF_x__h832;
  DEF_pipe1_rv_port0__read____d11 = INST_pipe1_rv.METH_port0__read();
  DEF_x__h832 = (tUInt32)(DEF_pipe1_rv_port0__read____d11);
  DEF_data__h698 = DEF_x__h832;
  DEF__1_CONCAT_pipe1_rv_port0__read__1_BITS_31_TO_0_7___d18 = 8589934591llu & ((((tUInt64)((tUInt8)1u)) << 32u) | (tUInt64)(DEF_x__h832));
  DEF__0_CONCAT_DONTCARE___d19 = 2863311530llu;
  INST_pipe2_rv.METH_port1__write(DEF__1_CONCAT_pipe1_rv_port0__read__1_BITS_31_TO_0_7___d18);
  INST_pipe1_rv.METH_port0__write(DEF__0_CONCAT_DONTCARE___d19);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h902 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,64,32", &__str_literal_1, DEF_v__h902, DEF_data__h698);
}

void MOD_mkTestbench::RL_rl_stage2()
{
  tUInt32 DEF_data__h978;
  tUInt32 DEF_x__h1052;
  DEF_pipe2_rv_port0__read____d22 = INST_pipe2_rv.METH_port0__read();
  DEF_x__h1052 = (tUInt32)(DEF_pipe2_rv_port0__read____d22);
  DEF_data__h978 = DEF_x__h1052;
  DEF__0_CONCAT_DONTCARE___d19 = 2863311530llu;
  INST_pipe2_rv.METH_port0__write(DEF__0_CONCAT_DONTCARE___d19);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1019 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,64,32", &__str_literal_2, DEF_v__h1019, DEF_data__h978);
}

void MOD_mkTestbench::RL_rl_dummy_print2()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1063 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,64", &__str_literal_3, DEF_v__h1063);
}

void MOD_mkTestbench::RL_rl_finish()
{
  DEF_x__h540 = INST_counter.METH_read();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,4", &__str_literal_4, DEF_x__h540);
    dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTestbench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rg_cnt.reset_RST(ARG_rst_in);
  INST_pipe2_rv.reset_RST(ARG_rst_in);
  INST_pipe1_rv.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestbench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestbench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_counter.dump_state(indent + 2u);
  INST_pipe1_rv.dump_state(indent + 2u);
  INST_pipe2_rv.dump_state(indent + 2u);
  INST_rg_cnt.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestbench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 25u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_cycle_count", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_dummy_print2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_finish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_give_inputs", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_stage1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_stage2", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_cycle_count", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_dummy_print2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_finish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_give_inputs", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_stage1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_stage2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_DONTCARE___d19", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "pipe1_rv_port0__read____d11", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "pipe2_rv_port0__read____d22", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1019", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1063", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h902", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h540", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h683", 4u);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_pipe1_rv.dump_VCD_defs(num);
  num = INST_pipe2_rv.dump_VCD_defs(num);
  num = INST_rg_cnt.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestbench::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTestbench::vcd_defs(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 4u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_cycle_count) != DEF_CAN_FIRE_RL_cycle_count)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_cycle_count, 1u);
	backing.DEF_CAN_FIRE_RL_cycle_count = DEF_CAN_FIRE_RL_cycle_count;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_dummy_print2) != DEF_CAN_FIRE_RL_rl_dummy_print2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_dummy_print2, 1u);
	backing.DEF_CAN_FIRE_RL_rl_dummy_print2 = DEF_CAN_FIRE_RL_rl_dummy_print2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_finish) != DEF_CAN_FIRE_RL_rl_finish)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_finish, 1u);
	backing.DEF_CAN_FIRE_RL_rl_finish = DEF_CAN_FIRE_RL_rl_finish;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_give_inputs) != DEF_CAN_FIRE_RL_rl_give_inputs)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_give_inputs, 1u);
	backing.DEF_CAN_FIRE_RL_rl_give_inputs = DEF_CAN_FIRE_RL_rl_give_inputs;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_stage1) != DEF_CAN_FIRE_RL_rl_stage1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_stage1, 1u);
	backing.DEF_CAN_FIRE_RL_rl_stage1 = DEF_CAN_FIRE_RL_rl_stage1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_stage2) != DEF_CAN_FIRE_RL_rl_stage2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_stage2, 1u);
	backing.DEF_CAN_FIRE_RL_rl_stage2 = DEF_CAN_FIRE_RL_rl_stage2;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_cycle_count) != DEF_WILL_FIRE_RL_cycle_count)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_cycle_count, 1u);
	backing.DEF_WILL_FIRE_RL_cycle_count = DEF_WILL_FIRE_RL_cycle_count;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_dummy_print2) != DEF_WILL_FIRE_RL_rl_dummy_print2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_dummy_print2, 1u);
	backing.DEF_WILL_FIRE_RL_rl_dummy_print2 = DEF_WILL_FIRE_RL_rl_dummy_print2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_finish) != DEF_WILL_FIRE_RL_rl_finish)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_finish, 1u);
	backing.DEF_WILL_FIRE_RL_rl_finish = DEF_WILL_FIRE_RL_rl_finish;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_give_inputs) != DEF_WILL_FIRE_RL_rl_give_inputs)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_give_inputs, 1u);
	backing.DEF_WILL_FIRE_RL_rl_give_inputs = DEF_WILL_FIRE_RL_rl_give_inputs;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_stage1) != DEF_WILL_FIRE_RL_rl_stage1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_stage1, 1u);
	backing.DEF_WILL_FIRE_RL_rl_stage1 = DEF_WILL_FIRE_RL_rl_stage1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_stage2) != DEF_WILL_FIRE_RL_rl_stage2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_stage2, 1u);
	backing.DEF_WILL_FIRE_RL_rl_stage2 = DEF_WILL_FIRE_RL_rl_stage2;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_DONTCARE___d19) != DEF__0_CONCAT_DONTCARE___d19)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_DONTCARE___d19, 33u);
	backing.DEF__0_CONCAT_DONTCARE___d19 = DEF__0_CONCAT_DONTCARE___d19;
      }
      ++num;
      if ((backing.DEF_pipe1_rv_port0__read____d11) != DEF_pipe1_rv_port0__read____d11)
      {
	vcd_write_val(sim_hdl, num, DEF_pipe1_rv_port0__read____d11, 33u);
	backing.DEF_pipe1_rv_port0__read____d11 = DEF_pipe1_rv_port0__read____d11;
      }
      ++num;
      if ((backing.DEF_pipe2_rv_port0__read____d22) != DEF_pipe2_rv_port0__read____d22)
      {
	vcd_write_val(sim_hdl, num, DEF_pipe2_rv_port0__read____d22, 33u);
	backing.DEF_pipe2_rv_port0__read____d22 = DEF_pipe2_rv_port0__read____d22;
      }
      ++num;
      if ((backing.DEF_v__h1019) != DEF_v__h1019)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1019, 64u);
	backing.DEF_v__h1019 = DEF_v__h1019;
      }
      ++num;
      if ((backing.DEF_v__h1063) != DEF_v__h1063)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1063, 64u);
	backing.DEF_v__h1063 = DEF_v__h1063;
      }
      ++num;
      if ((backing.DEF_v__h902) != DEF_v__h902)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h902, 64u);
	backing.DEF_v__h902 = DEF_v__h902;
      }
      ++num;
      if ((backing.DEF_x__h540) != DEF_x__h540)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h540, 4u);
	backing.DEF_x__h540 = DEF_x__h540;
      }
      ++num;
      if ((backing.DEF_x__h683) != DEF_x__h683)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h683, 4u);
	backing.DEF_x__h683 = DEF_x__h683;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_cycle_count, 1u);
      backing.DEF_CAN_FIRE_RL_cycle_count = DEF_CAN_FIRE_RL_cycle_count;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_dummy_print2, 1u);
      backing.DEF_CAN_FIRE_RL_rl_dummy_print2 = DEF_CAN_FIRE_RL_rl_dummy_print2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_finish, 1u);
      backing.DEF_CAN_FIRE_RL_rl_finish = DEF_CAN_FIRE_RL_rl_finish;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_give_inputs, 1u);
      backing.DEF_CAN_FIRE_RL_rl_give_inputs = DEF_CAN_FIRE_RL_rl_give_inputs;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_stage1, 1u);
      backing.DEF_CAN_FIRE_RL_rl_stage1 = DEF_CAN_FIRE_RL_rl_stage1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_stage2, 1u);
      backing.DEF_CAN_FIRE_RL_rl_stage2 = DEF_CAN_FIRE_RL_rl_stage2;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_cycle_count, 1u);
      backing.DEF_WILL_FIRE_RL_cycle_count = DEF_WILL_FIRE_RL_cycle_count;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_dummy_print2, 1u);
      backing.DEF_WILL_FIRE_RL_rl_dummy_print2 = DEF_WILL_FIRE_RL_rl_dummy_print2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_finish, 1u);
      backing.DEF_WILL_FIRE_RL_rl_finish = DEF_WILL_FIRE_RL_rl_finish;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_give_inputs, 1u);
      backing.DEF_WILL_FIRE_RL_rl_give_inputs = DEF_WILL_FIRE_RL_rl_give_inputs;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_stage1, 1u);
      backing.DEF_WILL_FIRE_RL_rl_stage1 = DEF_WILL_FIRE_RL_rl_stage1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_stage2, 1u);
      backing.DEF_WILL_FIRE_RL_rl_stage2 = DEF_WILL_FIRE_RL_rl_stage2;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_DONTCARE___d19, 33u);
      backing.DEF__0_CONCAT_DONTCARE___d19 = DEF__0_CONCAT_DONTCARE___d19;
      vcd_write_val(sim_hdl, num++, DEF_pipe1_rv_port0__read____d11, 33u);
      backing.DEF_pipe1_rv_port0__read____d11 = DEF_pipe1_rv_port0__read____d11;
      vcd_write_val(sim_hdl, num++, DEF_pipe2_rv_port0__read____d22, 33u);
      backing.DEF_pipe2_rv_port0__read____d22 = DEF_pipe2_rv_port0__read____d22;
      vcd_write_val(sim_hdl, num++, DEF_v__h1019, 64u);
      backing.DEF_v__h1019 = DEF_v__h1019;
      vcd_write_val(sim_hdl, num++, DEF_v__h1063, 64u);
      backing.DEF_v__h1063 = DEF_v__h1063;
      vcd_write_val(sim_hdl, num++, DEF_v__h902, 64u);
      backing.DEF_v__h902 = DEF_v__h902;
      vcd_write_val(sim_hdl, num++, DEF_x__h540, 4u);
      backing.DEF_x__h540 = DEF_x__h540;
      vcd_write_val(sim_hdl, num++, DEF_x__h683, 4u);
      backing.DEF_x__h683 = DEF_x__h683;
    }
}

void MOD_mkTestbench::vcd_prims(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_pipe1_rv.dump_VCD(dt, backing.INST_pipe1_rv);
  INST_pipe2_rv.dump_VCD(dt, backing.INST_pipe2_rv);
  INST_rg_cnt.dump_VCD(dt, backing.INST_rg_cnt);
}
