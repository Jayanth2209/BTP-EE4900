//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Fri May  5 17:06:08 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_inputs                 O     1
// mac_result                     O    64
// RDY_mac_result                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_inputs_multiplicand1       I    32
// get_inputs_multiplicand2       I    32
// get_inputs_addend              I    32
// EN_get_inputs                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC16(CLK,
	       RST_N,

	       get_inputs_multiplicand1,
	       get_inputs_multiplicand2,
	       get_inputs_addend,
	       EN_get_inputs,
	       RDY_get_inputs,

	       mac_result,
	       RDY_mac_result);
  input  CLK;
  input  RST_N;

  // action method get_inputs
  input  [31 : 0] get_inputs_multiplicand1;
  input  [31 : 0] get_inputs_multiplicand2;
  input  [31 : 0] get_inputs_addend;
  input  EN_get_inputs;
  output RDY_get_inputs;

  // value method mac_result
  output [63 : 0] mac_result;
  output RDY_mac_result;

  // signals for module outputs
  wire [63 : 0] mac_result;
  wire RDY_get_inputs, RDY_mac_result;

  // inlined wires
  wire [96 : 0] mac_inputs_rv$port1__read,
		mac_inputs_rv$port1__write_1,
		mac_inputs_rv$port2__read;
  wire [64 : 0] mac_output_rv$port1__write_1, mac_output_rv$port2__read;

  // register mac_inputs_rv
  reg [96 : 0] mac_inputs_rv;
  wire [96 : 0] mac_inputs_rv$D_IN;
  wire mac_inputs_rv$EN;

  // register mac_output_rv
  reg [64 : 0] mac_output_rv;
  wire [64 : 0] mac_output_rv$D_IN;
  wire mac_output_rv$EN;

  // register partial_product_rv
  reg [160 : 0] partial_product_rv;
  wire [160 : 0] partial_product_rv$D_IN;
  wire partial_product_rv$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_generate_macs,
       CAN_FIRE_get_inputs,
       WILL_FIRE_RL_rl_generate_macs,
       WILL_FIRE_get_inputs;

  // remaining internal signals
  wire [63 : 0] _0_CONCAT_mac_inputs_rv_port0__read_BITS_79_TO__ETC___d20,
		_0_CONCAT_mac_inputs_rv_port0__read_BITS_95_TO__ETC___d11;
  wire [31 : 0] mac0__h922,
		mac3__h742,
		x__h765,
		x__h947,
		y__h764,
		y__h766,
		y__h946,
		y__h948;

  // action method get_inputs
  assign RDY_get_inputs = !mac_inputs_rv$port1__read[96] ;
  assign CAN_FIRE_get_inputs = !mac_inputs_rv$port1__read[96] ;
  assign WILL_FIRE_get_inputs = EN_get_inputs ;

  // value method mac_result
  assign mac_result = mac_output_rv[63:0] ;
  assign RDY_mac_result = mac_output_rv[64] ;

  // rule RL_rl_generate_macs
  assign CAN_FIRE_RL_rl_generate_macs =
	     mac_inputs_rv[96] && !mac_output_rv[64] ;
  assign WILL_FIRE_RL_rl_generate_macs = CAN_FIRE_RL_rl_generate_macs ;

  // inlined wires
  assign mac_inputs_rv$port1__read =
	     CAN_FIRE_RL_rl_generate_macs ?
	       97'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       mac_inputs_rv ;
  assign mac_inputs_rv$port1__write_1 =
	     { 1'd1,
	       get_inputs_multiplicand1,
	       get_inputs_multiplicand2,
	       get_inputs_addend } ;
  assign mac_inputs_rv$port2__read =
	     EN_get_inputs ?
	       mac_inputs_rv$port1__write_1 :
	       mac_inputs_rv$port1__read ;
  assign mac_output_rv$port1__write_1 = { 1'd1, mac3__h742, mac0__h922 } ;
  assign mac_output_rv$port2__read =
	     CAN_FIRE_RL_rl_generate_macs ?
	       mac_output_rv$port1__write_1 :
	       mac_output_rv ;

  // register mac_inputs_rv
  assign mac_inputs_rv$D_IN = mac_inputs_rv$port2__read ;
  assign mac_inputs_rv$EN = 1'b1 ;

  // register mac_output_rv
  assign mac_output_rv$D_IN = mac_output_rv$port2__read ;
  assign mac_output_rv$EN = 1'b1 ;

  // register partial_product_rv
  assign partial_product_rv$D_IN = partial_product_rv ;
  assign partial_product_rv$EN = 1'b1 ;

  // remaining internal signals
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_79_TO__ETC___d20 =
	     x__h947 * y__h948 ;
  assign _0_CONCAT_mac_inputs_rv_port0__read_BITS_95_TO__ETC___d11 =
	     x__h765 * y__h766 ;
  assign mac0__h922 =
	     _0_CONCAT_mac_inputs_rv_port0__read_BITS_79_TO__ETC___d20[31:0] +
	     y__h946 ;
  assign mac3__h742 =
	     _0_CONCAT_mac_inputs_rv_port0__read_BITS_95_TO__ETC___d11[31:0] +
	     y__h764 ;
  assign x__h765 = { 16'd0, mac_inputs_rv[95:80] } ;
  assign x__h947 = { 16'd0, mac_inputs_rv[79:64] } ;
  assign y__h764 = { 16'd0, mac_inputs_rv[31:16] } ;
  assign y__h766 = { 16'd0, mac_inputs_rv[63:48] } ;
  assign y__h946 = { 16'd0, mac_inputs_rv[15:0] } ;
  assign y__h948 = { 16'd0, mac_inputs_rv[47:32] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        mac_inputs_rv <= `BSV_ASSIGNMENT_DELAY 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	mac_output_rv <= `BSV_ASSIGNMENT_DELAY 65'h0AAAAAAAAAAAAAAAA;
	partial_product_rv <= `BSV_ASSIGNMENT_DELAY
	    161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (mac_inputs_rv$EN)
	  mac_inputs_rv <= `BSV_ASSIGNMENT_DELAY mac_inputs_rv$D_IN;
	if (mac_output_rv$EN)
	  mac_output_rv <= `BSV_ASSIGNMENT_DELAY mac_output_rv$D_IN;
	if (partial_product_rv$EN)
	  partial_product_rv <= `BSV_ASSIGNMENT_DELAY partial_product_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    mac_inputs_rv = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    mac_output_rv = 65'h0AAAAAAAAAAAAAAAA;
    partial_product_rv = 161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC16

